---
name: HumanEval_101_words_string
language: lua
results:
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in string.gmatch(s, '%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f42p3j6.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp7f42p3j6.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You will be given a string of words separated by commas or spaces.
    Your task is\n-- to split the string into words and return a table of the words.\n--
    For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',
    'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',
    'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal
    words = {}\n\tfor word in s:gmatch('%w+') do\n\t\ttable.insert(words, word)\n\tend\n\treturn
    words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my',
    'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three, four,
    five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,
    my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,
    four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),
    {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, "%S+") do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicdtx514.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpicdtx514.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfv5am01f.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpfv5am01f.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('[^,%s]+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local t = {}
        for word in s:gmatch('%w+') do
            table.insert(t, word)
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg23ielwi.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpg23ielwi.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghw1rx29.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpghw1rx29.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv06bkwx5.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpv06bkwx5.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp295iee5u.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp295iee5u.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudn2fvgd.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpudn2fvgd.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtl__a3z.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpjtl__a3z.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in string.gmatch(s, '%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for w in s:gmatch('%S+') do
        words[#words + 1] = w
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcau98sfo.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpcau98sfo.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in string.gmatch(s, '%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnpmpw8x.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmphnpmpw8x.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bacjjcl.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp6bacjjcl.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_e__3iw4.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp_e__3iw4.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejgys4bk.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpejgys4bk.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nvioi25.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp2nvioi25.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('[^,%s]+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi407t__m.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpi407t__m.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for w in s:gmatch('%S+') do
        words[#words + 1] = w
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqntulz0o.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpqntulz0o.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%S+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_00y6so.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpx_00y6so.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You will be given a string of words separated by commas or spaces.
    Your task is\n-- to split the string into words and return a table of the words.\n--
    For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',
    'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',
    'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal
    words = {}\n\tfor word in s:gmatch('%w+') do\n\t\ttable.insert(words, word)\n\tend\n\treturn
    words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my',
    'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three, four,
    five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,
    my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,
    four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),
    {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjphrhde.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpmjphrhde.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in string.gmatch(s, "%S+") do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrzi7ch5.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmptrzi7ch5.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local t = {}
        for word in s:gmatch('%w+') do
            table.insert(t, word)
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in string.gmatch(s, "%S+") do
        table.insert(words, word)
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz6e749p.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmprz6e749p.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkcouc53.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpzkcouc53.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You will be given a string of words separated by commas or spaces.
    Your task is\n-- to split the string into words and return a table of the words.\n--
    For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',
    'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',
    'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal
    words = {}\n\tfor word in s:gmatch('%w+') do\n\t\ttable.insert(words, word)\n\tend\n\treturn
    words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my',
    'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three, four,
    five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,
    my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,
    four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),
    {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for w in s:gmatch('%S+') do
        words[#words + 1] = w
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporf335n8.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmporf335n8.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8jnt_7r.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpz8jnt_7r.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You will be given a string of words separated by commas or spaces.
    Your task is\n-- to split the string into words and return a table of the words.\n--
    For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',
    'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',
    'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal
    words = {}\n\tfor w in s:gmatch('%w+') do\n\t\ttable.insert(words, w)\n\tend\n\treturn
    words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my',
    'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three, four,
    five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,
    my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,
    four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),
    {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40iud9wt.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp40iud9wt.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%S+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz0cxzkt.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmprz0cxzkt.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('[^,%s]+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hxwxmoe.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp3hxwxmoe.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00b42mfr.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp00b42mfr.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdklbdiwm.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpdklbdiwm.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in s:gmatch('%w+') do
        words[#words + 1] = word
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in string.gmatch(s, '%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for w in s:gmatch('%w+') do
            table.insert(words, w)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You will be given a string of words separated by commas or spaces.
    Your task is\n-- to split the string into words and return a table of the words.\n--
    For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',
    'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',
    'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal
    words = {}\n\tfor word in s:gmatch('%S+') do\n\t\ttable.insert(words, word)\n\tend\n\treturn
    words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my',
    'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three, four,
    five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,
    my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,
    four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),
    {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvi87eer.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpqvi87eer.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
      local words = {}
      for word in string.gmatch(s, '%w+') do
        table.insert(words, word)
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You will be given a string of words separated by commas or spaces. Your task is
    -- to split the string into words and return a table of the words.
    -- For example:
    -- >>> words_string('Hi, my name is John')
    -- {'Hi', 'my', 'name', 'is', 'John'}
    -- >>> words_string('One, two, three, four, five, six')
    -- {'One', 'two', 'three', 'four', 'five', 'six'}
    local function words_string(s)
        local t = {}
        for w in s:gmatch('%S+') do
            t[#t+1] = w
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_string
        lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
        lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
        lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrwlpjtv.lua:19:
    expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"my\",
    \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpqrwlpjtv.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
