---
name: HumanEval_1_separate_paren_groups
language: lua
prompt: |
  -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
  -- separate those group into separate strings and return the table of those.
  -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
  -- Ignore any spaces in the input string.
  -- >>> separate_paren_groups('( ) (( )) (( )( ))')
  -- {'()', '(())', '(()())'}
  local function separate_paren_groups(paren_string)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = separate_paren_groups
      lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
      lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
      lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
      lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              paren_groups[#paren_groups + 1] = current_group
              current_group = ''
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == ' ' then
              -- ignore spaces
          elseif char == '(' then
              depth = depth + 1
              group = group .. char
          elseif char == ')' then
              depth = depth - 1
              group = group .. char
              if depth == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
              paren_group = paren_group .. char
          elseif char == ')' then
              paren_count = paren_count - 1
              paren_group = paren_group .. char
              if paren_count == 0 then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              current_group = current_group .. char
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              paren_groups[#paren_groups + 1] = current_group
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local result = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(result, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return result
  end
- |2-
    local groups = {}
    local current_group = ''
    local paren_count = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        paren_count = paren_count + 1
      elseif char == ')' then
        paren_count = paren_count - 1
      end
      if paren_count == 0 then
        if current_group ~= '' then
          table.insert(groups, current_group)
          current_group = ''
        end
      else
        current_group = current_group .. char
      end
    end
    return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              current_group = current_group .. char
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if #current_group > 0 then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local start_index = 1
      local end_index = 1
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              end_index = i
              table.insert(groups, paren_string:sub(start_index, end_index))
              start_index = i + 1
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              current_group = current_group .. char
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
    local paren_groups = {}
    local current_group = ''
    local paren_count = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        paren_count = paren_count + 1
      elseif char == ')' then
        paren_count = paren_count - 1
      end
      if paren_count == 0 then
        if current_group ~= '' then
          table.insert(paren_groups, current_group)
          current_group = ''
        end
      else
        current_group = current_group .. char
      end
    end
    return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open = open + 1
          elseif c == ')' then
              open = open - 1
          end
          if open == 0 then
              if #group > 0 then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              paren_groups[#paren_groups + 1] = current_group
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i=1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              depth = depth + 1
          elseif c == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  groups[#groups + 1] = group
                  group = ''
              end
          else
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group_start = 1
      local group_end = 1
      local group_open = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              group_open = group_open + 1
          elseif c == ')' then
              group_open = group_open - 1
              if group_open == 0 then
                  group_end = i
                  table.insert(groups, paren_string:sub(group_start, group_end))
                  group_start = i + 1
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      -- TODO: Implement this function
      local paren_table = {}
      local paren_count = 0
      local paren_start = 0
      local paren_end = 0
      for i = 1, #paren_string do
          if paren_string:sub(i, i) == '(' then
              paren_count = paren_count + 1
              if paren_count == 1 then
                  paren_start = i
              end
          elseif paren_string:sub(i, i) == ')' then
              paren_count = paren_count - 1
              if paren_count == 0 then
                  paren_end = i
                  paren_table[#paren_table + 1] = paren_string:sub(paren_start, paren_end)
              end
          end
      end
      return paren_table
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if paren_group ~= '' then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          else
              paren_group = paren_group .. char
          end
      end
      return paren_groups
  end
- |2-
    local groups = {}
    local group_start = 1
    local group_end = 1
    local group_count = 0
    local paren_count = 0
    for i = 1, #paren_string do
      local c = paren_string:sub(i, i)
      if c == '(' then
        paren_count = paren_count + 1
      elseif c == ')' then
        paren_count = paren_count - 1
      end
      if paren_count == 0 then
        group_end = i
        group_count = group_count + 1
        groups[group_count] = paren_string:sub(group_start, group_end)
        group_start = i + 1
      end
    end
    return groups
  end
- |2-
    local paren_groups = {}
    local paren_group = ''
    local paren_count = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        paren_count = paren_count + 1
        paren_group = paren_group .. char
      elseif char == ')' then
        paren_count = paren_count - 1
        paren_group = paren_group .. char
        if paren_count == 0 then
          table.insert(paren_groups, paren_group)
          paren_group = ''
        end
      end
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and current_group ~= '' then
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local paren_count = 0
      local paren_start = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
              if paren_count == 1 then
                  paren_start = i
              end
          elseif char == ')' then
              paren_count = paren_count - 1
              if paren_count == 0 then
                  paren_groups[#paren_groups + 1] = paren_string:sub(paren_start, i)
              end
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              group = group .. char
              table.insert(groups, group)
              group = ''
          elseif char ~= ' ' then
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local groups = {}
      local group = ''
      local level = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              level = level + 1
              group = group .. c
          elseif c == ')' then
              level = level - 1
              group = group .. c
              if level == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_count = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_count = open_count + 1
          elseif c == ')' then
              open_count = open_count - 1
          end
          if open_count == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and current_group ~= '' then
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif c ~= ' ' then
              current_group = current_group .. c
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_count = open_count + 1
          elseif char == ')' then
              open_count = open_count - 1
          end
          if open_count == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_count = open_count + 1
          elseif char == ')' then
              open_count = open_count - 1
          end
          if open_count == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              paren_groups[#paren_groups + 1] = current_group
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              current_group = current_group .. char
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local result = {}
      local start, stop = paren_string:find('%b()')
      while start do
          result[#result + 1] = paren_string:sub(start, stop)
          start, stop = paren_string:find('%b()', stop + 1)
      end
      return result
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open = open + 1
          elseif char == ')' then
              open = open - 1
          end
          if open == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local level = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              level = level + 1
          elseif char == ')' then
              level = level - 1
          end
          if level == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              depth = depth + 1
              group = group .. c
          elseif c == ')' then
              depth = depth - 1
              group = group .. c
              if depth == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local level = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              level = level + 1
          elseif c == ')' then
              level = level - 1
          end
          if level == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local level = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              level = level + 1
              current_group = current_group .. char
          elseif char == ')' then
              level = level - 1
              current_group = current_group .. char
              if level == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              open_parens = open_parens + 1
              group = group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              group = group .. c
              if open_parens == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              if char == ')' then
                  group = group .. char
                  table.insert(groups, group)
                  group = ''
              else
                  group = group .. char
              end
          elseif char ~= ' ' then
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_paren_count = open_paren_count + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_paren_count = open_paren_count - 1
              current_group = current_group .. char
              if open_paren_count == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
    local paren_groups = {}
    local current_group = ''
    local open_parens = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        open_parens = open_parens + 1
        current_group = current_group .. char
      elseif char == ')' then
        open_parens = open_parens - 1
        current_group = current_group .. char
        if open_parens == 0 then
          table.insert(paren_groups, current_group)
          current_group = ''
        end
      end
    end
    return paren_groups
  end
- |2-
    local groups = {}
    local group = ''
    local open_count = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        open_count = open_count + 1
      elseif char == ')' then
        open_count = open_count - 1
      end
      if open_count == 0 then
        if group ~= '' then
          table.insert(groups, group)
          group = ''
        end
      else
        group = group .. char
      end
    end
    return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              current_group = current_group .. char
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              depth = depth + 1
          elseif c == ')' then
              depth = depth - 1
          end
          if c ~= ' ' then
              group = group .. c
          end
          if depth == 0 then
              table.insert(groups, group)
              group = ''
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- "\tlocal paren_groups = {}\n\tlocal current_group = ''\n\tlocal paren_count = 0\n\tfor
  i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == '(' then\n\t\t\tparen_count
  = paren_count + 1\n\t\t\tcurrent_group = current_group .. c\n\t\telseif c == ')'
  then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group ..
  c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group
  = ''\n\t\t\tend\n\t\tend\n\tend\n\treturn paren_groups\nend"
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              paren_groups[#paren_groups + 1] = current_group
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- "\tlocal groups = {}\n\tlocal group = ''\n\tlocal depth = 0\n\tfor i = 1, #paren_string
  do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == '(' then\n\t\t\tdepth
  = depth + 1\n\t\t\tgroup = group .. char\n\t\telseif char == ')' then\n\t\t\tdepth
  = depth - 1\n\t\t\tgroup = group .. char\n\t\t\tif depth == 0 then\n\t\t\t\ttable.insert(groups,
  group)\n\t\t\t\tgroup = ''\n\t\t\tend\n\t\tend\n\tend\n\treturn groups\nend"
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              group = group .. char
              table.insert(groups, group)
              group = ''
          elseif char ~= ' ' then
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              paren_group = paren_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              paren_group = paren_group .. char
              if open_parens == 0 then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          end
      end
      return paren_groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 then
              if current_group ~= '' then
                  table.insert(result, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return result
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_stack = {}
      for char in paren_string:gmatch('%S') do
          if char == '(' then
              paren_stack[#paren_stack + 1] = char
          elseif char == ')' then
              paren_stack[#paren_stack] = nil
              if #paren_stack == 0 then
                  paren_groups[#paren_groups + 1] = current_group
                  current_group = ''
              end
          end
          current_group = current_group .. char
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              group = group .. char
              table.insert(groups, group)
              group = ''
          elseif char ~= ' ' then
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
    local groups = {}
    local group = ''
    local paren_count = 0
    for c in paren_string:gmatch('.') do
      if c == '(' then
        paren_count = paren_count + 1
      elseif c == ')' then
        paren_count = paren_count - 1
      end
      if paren_count == 0 then
        if group ~= '' then
          table.insert(groups, group)
          group = ''
        end
      else
        group = group .. c
      end
    end
    if group ~= '' then
      table.insert(groups, group)
    end
    return groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == ' ' then
              -- ignore spaces
          elseif char == '(' then
              paren_count = paren_count + 1
              paren_group = paren_group .. char
          elseif char == ')' then
              paren_count = paren_count - 1
              paren_group = paren_group .. char
              if paren_count == 0 then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              depth = depth + 1
          elseif c == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- "\tlocal groups = {}\n\tlocal current_group = ''\n\tlocal paren_count = 0\n\tfor
  i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char ==
  '(' then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group
  .. char\n\t\telseif char == ')' then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group
  = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups,
  current_group)\n\t\t\t\tcurrent_group = ''\n\t\t\tend\n\t\tend\n\tend\n\treturn
  groups\nend"
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local groups = {}
      local group = ''
      local open_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_count = open_count + 1
          elseif char == ')' then
              open_count = open_count - 1
          end
          if open_count == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_count = open_count + 1
          elseif char == ')' then
              open_count = open_count - 1
          end
          if open_count == 0 then
              if current_group ~= '' then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if #group > 0 then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local paren_count = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if paren_group ~= '' then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          else
              paren_group = paren_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local groups = {}
      local group = ''
      local level = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              level = level + 1
          elseif c == ')' then
              level = level - 1
          end
          if level == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              depth = depth + 1
              group = group .. c
          elseif c == ')' then
              depth = depth - 1
              group = group .. c
              if depth == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(groups, current_group)
              end
              current_group = ''
          else
              current_group = current_group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              depth = depth + 1
          elseif c == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(result, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return result
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and current_group ~= '' then
              paren_groups[#paren_groups + 1] = current_group
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              depth = depth + 1
          elseif c == ')' then
              depth = depth - 1
          end
          if depth > 0 then
              group = group .. c
          elseif depth == 0 and group ~= '' then
              table.insert(groups, group)
              group = ''
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
          elseif c == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and c ~= ' ' then
              groups[#groups + 1] = group
              group = ''
          elseif c ~= ' ' then
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open = open + 1
          elseif c == ')' then
              open = open - 1
          end
          if open == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if char ~= ' ' then
              group = group .. char
          end
          if depth == 0 then
              table.insert(groups, group)
              group = ''
          end
      end
      return groups
  end
- |2-
    local paren_groups = {}
    local current_group = ''
    local open_parens = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        open_parens = open_parens + 1
      elseif char == ')' then
        open_parens = open_parens - 1
      end
      if open_parens == 0 and char ~= ' ' then
        current_group = current_group .. char
      elseif open_parens == 0 and char == ' ' then
        table.insert(paren_groups, current_group)
        current_group = ''
      elseif open_parens ~= 0 and char ~= ' ' then
        current_group = current_group .. char
      end
    end
    return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              group = group .. char
              table.insert(groups, group)
              group = ''
          elseif char ~= ' ' then
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if #group > 0 then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_count = open_count + 1
          elseif char == ')' then
              open_count = open_count - 1
          end
          if open_count == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
          elseif c == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and c ~= ' ' then
              if c == ')' then
                  group = group .. c
                  table.insert(groups, group)
                  group = ''
              else
                  group = group .. c
              end
          elseif c ~= ' ' then
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              current_group = current_group .. char
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local paren_group_table = {}
      local paren_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if paren_group ~= '' then
                  table.insert(paren_group_table, paren_group)
                  paren_group = ''
              end
          else
              paren_group = paren_group .. c
          end
      end
      return paren_group_table
  end
- |2-
      local groups = {}
      local group = ''
      local open = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              open = open + 1
          elseif c == ')' then
              open = open - 1
          end
          if open == 0 and c ~= ' ' then
              group = group .. c
          elseif open == 1 and c ~= ' ' then
              group = c
          elseif open == 0 and c == ' ' then
              table.insert(groups, group)
              group = ''
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if paren_group ~= '' then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          else
              paren_group = paren_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              current_group = current_group .. char
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
          elseif char == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              group = group .. char
              table.insert(groups, group)
              group = ''
          elseif char ~= ' ' then
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local paren_count = 0
      local start_index = 1
      local end_index = 1
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
              if paren_count == 1 then
                  start_index = i
              end
          elseif char == ')' then
              paren_count = paren_count - 1
              if paren_count == 0 then
                  end_index = i
                  table.insert(paren_groups, paren_string:sub(start_index, end_index))
              end
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local level = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              level = level + 1
              group = group .. c
          elseif c == ')' then
              level = level - 1
              group = group .. c
              if level == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and group ~= '' then
              table.insert(paren_groups, group)
              group = ''
          elseif char ~= ' ' then
              group = group .. char
          end
      end
      return paren_groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              current_group = current_group .. char
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_paren_count = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_paren_count = open_paren_count + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_paren_count = open_paren_count - 1
              current_group = current_group .. char
              if open_paren_count == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
    local groups = {}
    local group = ''
    local open_count = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        open_count = open_count + 1
      elseif char == ')' then
        open_count = open_count - 1
      end
      if open_count == 0 then
        if group ~= '' then
          table.insert(groups, group)
          group = ''
        end
      else
        group = group .. char
      end
    end
    return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if #current_group > 0 then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local current_level = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              current_level = current_level + 1
              current_group = current_group .. char
          elseif char == ')' then
              current_level = current_level - 1
              current_group = current_group .. char
              if current_level == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(result, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return result
  end
- |2-
    local groups = {}
    local current_group = ''
    local paren_count = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        paren_count = paren_count + 1
      elseif char == ')' then
        paren_count = paren_count - 1
      end
      if paren_count == 0 then
        if #current_group > 0 then
          table.insert(groups, current_group)
          current_group = ''
        end
      else
        current_group = current_group .. char
      end
    end
    return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. c
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if paren_group ~= '' then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          else
              paren_group = paren_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local current_level = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              current_level = current_level + 1
              current_group = current_group .. char
          elseif char == ')' then
              current_level = current_level - 1
              current_group = current_group .. char
              if current_level == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local paren_count = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local depth = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              depth = depth + 1
          elseif c == ')' then
              depth = depth - 1
          end
          if depth == 0 then
              if current_group ~= '' then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and current_group ~= '' then
              table.insert(groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              depth = depth + 1
              group = group .. c
          elseif c == ')' then
              depth = depth - 1
              group = group .. c
              if depth == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(groups, current_group)
              end
              current_group = ''
          else
              current_group = current_group .. c
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local i = 1
      local j = 1
      local len = #paren_string
      while i <= len do
          local c = paren_string:sub(i, i)
          if c == '(' then
              j = i
              while j <= len do
                  local c2 = paren_string:sub(j, j)
                  if c2 == ')' then
                      groups[#groups + 1] = paren_string:sub(i, j)
                      i = j + 1
                      break
                  end
                  j = j + 1
              end
          else
              i = i + 1
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and char == ')' then
              table.insert(groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
    local groups = {}
    local current_group = ''
    local open_parens = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        open_parens = open_parens + 1
        current_group = current_group .. char
      elseif char == ')' then
        open_parens = open_parens - 1
        current_group = current_group .. char
        if open_parens == 0 then
          table.insert(groups, current_group)
          current_group = ''
        end
      end
    end
    return groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
          elseif char == ')' then
              open_parens = open_parens - 1
          end
          if open_parens == 0 and char ~= ' ' then
              current_group = current_group .. char
              table.insert(paren_groups, current_group)
              current_group = ''
          elseif char ~= ' ' then
              current_group = current_group .. char
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
    local groups = {}
    local group = ''
    local depth = 0
    for i = 1, #paren_string do
      local c = paren_string:sub(i, i)
      if c == '(' then
        depth = depth + 1
      elseif c == ')' then
        depth = depth - 1
      end
      if depth == 0 then
        if group ~= '' then
          table.insert(groups, group)
          group = ''
        end
      else
        group = group .. c
      end
    end
    return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              depth = depth + 1
              group = group .. c
          elseif c == ')' then
              depth = depth - 1
              group = group .. c
              if depth == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local paren_count = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if paren_group ~= '' then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          else
              paren_group = paren_group .. c
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local group = ''
      local level = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              level = level + 1
          elseif char == ')' then
              level = level - 1
          end
          if level == 0 then
              if group ~= '' then
                  table.insert(groups, group)
                  group = ''
              end
          else
              group = group .. char
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(result, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. c
          end
      end
      return result
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
    local paren_groups = {}
    local current_group = ''
    local paren_count = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        paren_count = paren_count + 1
      elseif char == ')' then
        paren_count = paren_count - 1
      end
      if paren_count == 0 then
        if current_group ~= '' then
          table.insert(paren_groups, current_group)
          current_group = ''
        end
      else
        current_group = current_group .. char
      end
    end
    return paren_groups
  end
- |2-
      local paren_table = {}
      local paren_count = 0
      local paren_start = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              paren_count = paren_count + 1
              if paren_count == 1 then
                  paren_start = i
              end
          elseif c == ')' then
              paren_count = paren_count - 1
              if paren_count == 0 then
                  paren_table[#paren_table + 1] = paren_string:sub(paren_start, i)
              end
          end
      end
      return paren_table
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_count = paren_count + 1
          elseif char == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          else
              current_group = current_group .. char
          end
      end
      return groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if current_group ~= '' then
                  table.insert(groups, current_group)
              end
              current_group = ''
          else
              current_group = current_group .. c
          end
      end
      return groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local paren_count = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 then
              if paren_group ~= '' then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          else
              paren_group = paren_group .. c
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_count = paren_count + 1
          elseif c == ')' then
              paren_count = paren_count - 1
          end
          if paren_count == 0 and c ~= ' ' then
              if current_group ~= '' then
                  table.insert(paren_groups, current_group)
                  current_group = ''
              end
          elseif c ~= ' ' then
              current_group = current_group .. c
          end
      end
      return paren_groups
  end
- |2-
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(groups, current_group)
                  current_group = ''
              end
          end
      end
      return groups
  end
- |2-
    local groups = {}
    local current_group = ''
    local open_parens = 0
    for c in paren_string:gmatch('.') do
      if c == '(' then
        open_parens = open_parens + 1
        current_group = current_group .. c
      elseif c == ')' then
        open_parens = open_parens - 1
        current_group = current_group .. c
        if open_parens == 0 then
          table.insert(groups, current_group)
          current_group = ''
        end
      end
    end
    return groups
  end
- |2-
      local groups = {}
      local group = ''
      local depth = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              depth = depth + 1
              group = group .. c
          elseif c == ')' then
              depth = depth - 1
              group = group .. c
              if depth == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. c
          elseif c == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. c
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local result = {}
      local current_group = ''
      local open_parens = 0
      for char in paren_string:gmatch('.') do
          if char == '(' then
              open_parens = open_parens + 1
              current_group = current_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              current_group = current_group .. char
              if open_parens == 0 then
                  table.insert(result, current_group)
                  current_group = ''
              end
          end
      end
      return result
  end
- |2-
      local groups = {}
      local group = ''
      local level = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              group = group .. c
              level = level + 1
          elseif c == ')' then
              group = group .. c
              level = level - 1
              if level == 0 then
                  table.insert(groups, group)
                  group = ''
              end
          end
      end
      return groups
  end
- "\tlocal result = {}\n\tlocal current_group = ''\n\tlocal paren_count = 0\n\tfor
  i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char ==
  '(' then\n\t\t\tparen_count = paren_count + 1\n\t\telseif char == ')' then\n\t\t\tparen_count
  = paren_count - 1\n\t\tend\n\t\tcurrent_group = current_group .. char\n\t\tif paren_count
  == 0 then\n\t\t\ttable.insert(result, current_group)\n\t\t\tcurrent_group = ''\n\t\tend\n\tend\n\treturn
  result\nend"
- |2-
      local paren_groups = {}
      local paren_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              paren_group = paren_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              paren_group = paren_group .. char
              if open_parens == 0 then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          end
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              open_parens = open_parens + 1
              paren_group = paren_group .. char
          elseif char == ')' then
              open_parens = open_parens - 1
              paren_group = paren_group .. char
              if open_parens == 0 then
                  table.insert(paren_groups, paren_group)
                  paren_group = ''
              end
          end
      end
      return paren_groups
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
