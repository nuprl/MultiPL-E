---
name: HumanEval_155_even_odd_count
language: lua
prompt: |
  -- Given an integer. return a table that has the number of even and odd digits respectively.
  -- Example:
  -- >>> even_odd_count(-12)
  -- {1, 1}
  -- >>> even_odd_count(123)
  -- {1, 2}
  local function even_odd_count(num)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = even_odd_count
      lu.assertEquals(candidate(7), {0, 1})
      lu.assertEquals(candidate(-78), {1, 1})
      lu.assertEquals(candidate(3452), {2, 2})
      lu.assertEquals(candidate(346211), {3, 3})
      lu.assertEquals(candidate(-345821), {3, 3})
      lu.assertEquals(candidate(-2), {1, 0})
      lu.assertEquals(candidate(-45347), {2, 3})
      lu.assertEquals(candidate(0), {1, 0})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(string.sub(tostring(num), i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      if num < 0 then
          num = -num
      end
      while num > 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      local num = math.abs(num)
      while num > 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if (num % 10) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
      num = math.floor(num / 10)
    end
    return {even, odd}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
    end
    return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_abs = math.abs(num)
      while num_abs > 0 do
          local digit = num_abs % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num_abs = math.floor(num_abs / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(split_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even = 0
    local odd = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for digit in tostring(num):gmatch("%d") do
          if tonumber(digit) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
    end
    return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if (num % 10) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_str = tostring(num)
      for i = 1, #num_str do
          local digit = tonumber(num_str:sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_abs = math.abs(num)
      while num_abs > 0 do
          local digit = num_abs % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num_abs = math.floor(num_abs / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for _, v in pairs(split_number(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if (num % 10) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if (tonumber(tostring(num):sub(i, i)) % 2 == 0) then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      num = math.abs(num)
      while num > 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_str = tostring(num)
      for i = 1, #num_str do
          local digit = tonumber(num_str:sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even = 0
    local odd = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(string.sub(tostring(num), i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    for _, digit in ipairs(digits(num)) do
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
    end
    return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if (num % 10) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even = 0
      local odd = 0
      local abs = math.abs(num)
      while abs > 0 do
          local digit = abs % 10
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          abs = math.floor(abs / 10)
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if (num % 10) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for _, v in ipairs(digits(num)) do
      if v % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    while num ~= 0 do
      local digit = num % 10
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
      num = math.floor(num / 10)
    end
    return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if (num % 10) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
      num = math.floor(num / 10)
    end
    return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
    local even = 0
    local odd = 0
    local num = math.abs(num)
    while num > 0 do
      local digit = num % 10
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
      num = math.floor(num / 10)
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, digit in ipairs(to_digits(num)) do
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_str = tostring(num)
      for i = 1, #num_str do
          local digit = tonumber(num_str:sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(split_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = num % 10
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for digit in tostring(num):gmatch("%d") do
          if tonumber(digit) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    local num_abs = math.abs(num)
    while num_abs > 0 do
      local digit = num_abs % 10
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
      num_abs = math.floor(num_abs / 10)
    end
    return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(int_to_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_abs = math.abs(num)
      while num_abs > 0 do
          local digit = num_abs % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num_abs = math.floor(num_abs / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even = 0
      local odd = 0
      local n = math.abs(num)
      while n > 0 do
          local d = n % 10
          if d % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          n = math.floor(n / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      if num == 0 then
          return {0, 0}
      end
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
    local even = 0
    local odd = 0
    for i in tostring(num):gmatch("%d") do
      if tonumber(i) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
    local even = 0
    local odd = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for _, v in ipairs(split_digits(num)) do
      if v % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(split_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if (num % 10) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    for _, digit in ipairs(digits(num)) do
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
    end
    return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for digit in tostring(num):gmatch("%d") do
          if tonumber(digit) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even = 0
    local odd = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = num % 10
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for _, d in ipairs(digits(num)) do
      if d % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      if num < 0 then
          num = -num
      end
      while num > 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = num % 10
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for _, digit in ipairs(to_digits(num)) do
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, string.len(tostring(num)) do
          if tonumber(string.sub(tostring(num), i, i)) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for digit in tostring(num):gmatch("%d") do
          if tonumber(digit) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, digit in ipairs(split_digits(num)) do
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(string.sub(tostring(num), i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_str = tostring(num)
      for i = 1, #num_str do
          local digit = tonumber(num_str:sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for digit in tostring(num):gmatch("%d") do
          if tonumber(digit) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for digit in tostring(num):gmatch("%d") do
          if tonumber(digit) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(string.sub(tostring(num), i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(split_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for _, digit in ipairs(split_digits(num)) do
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_abs = math.abs(num)
      while num_abs > 0 do
          local digit = num_abs % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num_abs = math.floor(num_abs / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_abs = math.abs(num)
      while num_abs > 0 do
          local digit = num_abs % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num_abs = math.floor(num_abs / 10)
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    while num ~= 0 do
      if num % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
      num = math.floor(num / 10)
    end
    return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if (num % 10) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
      num = math.floor(num / 10)
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(int_to_table(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = num % 10
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = (num - digit) / 10
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for digit in tostring(num):gmatch("%d") do
      if tonumber(digit) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even = 0
    local odd = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(to_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, d in ipairs(num_to_digits(num)) do
          if d % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          if (num % 2) == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_abs = math.abs(num)
      while num_abs > 0 do
          local digit = num_abs % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num_abs = math.floor(num_abs / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      local digit = tonumber(string.sub(tostring(num), i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if (num % 10) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(int_to_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_abs = math.abs(num)
      while num_abs > 0 do
          local digit = num_abs % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num_abs = math.floor(num_abs / 10)
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for _, v in ipairs(split_digits(num)) do
      if v % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(string.sub(tostring(num), i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if (tostring(num):sub(i, i) % 2 == 0) then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for _, v in ipairs(to_digits(num)) do
      if v % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if (num % 10) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
      num = math.floor(num / 10)
    end
    return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for _, digit in ipairs(to_digits(num)) do
      if digit % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, digit in ipairs(digits(num)) do
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(split_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if (num % 10) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
      num = math.floor(num / 10)
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, d in ipairs(digits(num)) do
          if d % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for digit in tostring(num):gmatch("%d") do
          if tonumber(digit) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even, odd = 0, 0
    for i in tostring(num):gmatch('%d') do
      if tonumber(i) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- "\tlocal even, odd = 0, 0\n\tfor i = 1, #tostring(num) do\n\t\tif tonumber(tostring(num):sub(i,
  i)) % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn
  {even, odd}\nend"
- |2-
      local even_count = 0
      local odd_count = 0
      for _, digit in ipairs(to_digits(num)) do
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(to_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for _, v in ipairs(to_digits(num)) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    for i = 1, #tostring(num) do
      if num % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
      num = math.floor(num / 10)
    end
    return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(string.sub(tostring(num), i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if num % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num = math.abs(num)
      while num > 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      local num_str = tostring(num)
      for i = 1, #num_str do
          local digit = tonumber(num_str:sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(string.sub(tostring(num), i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(string.sub(tostring(num), i, i))
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
    end
    return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for digit in tostring(num):gmatch("%d") do
          if tonumber(digit) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    for i = 1, #tostring(num) do
      if (num % 10) % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
      num = math.floor(num / 10)
    end
    return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if num % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(string.sub(tostring(num), i, i))
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      num = math.abs(num)
      while num > 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    local num_abs = math.abs(num)
    while num_abs > 0 do
      local digit = num_abs % 10
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
      num_abs = math.floor(num_abs / 10)
    end
    return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for digit in tostring(num):gmatch("%d") do
      if tonumber(digit) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
    end
    return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if num % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          if (num % 10) % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for digit in tostring(num):gmatch("%d") do
          if tonumber(digit) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
    end
    return {even_count, odd_count}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      while num ~= 0 do
          local digit = num % 10
          if digit % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
          num = math.floor(num / 10)
      end
      return {even_count, odd_count}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
    local even_count = 0
    local odd_count = 0
    for i = 1, #tostring(num) do
      local digit = tonumber(tostring(num):sub(i, i))
      if digit % 2 == 0 then
        even_count = even_count + 1
      else
        odd_count = odd_count + 1
      end
    end
    return {even_count, odd_count}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      while num ~= 0 do
          if num % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
          num = math.floor(num / 10)
      end
      return {even, odd}
  end
- |2-
      local even = 0
      local odd = 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even, odd = 0, 0
      for i = 1, #tostring(num) do
          local digit = tonumber(tostring(num):sub(i, i))
          if digit % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      return {even, odd}
  end
- |2-
      local even_count = 0
      local odd_count = 0
      for i = 1, #tostring(num) do
          if tonumber(tostring(num):sub(i, i)) % 2 == 0 then
              even_count = even_count + 1
          else
              odd_count = odd_count + 1
          end
      end
      return {even_count, odd_count}
  end
- |2-
    local even, odd = 0, 0
    for i = 1, #tostring(num) do
      if (num % 10) % 2 == 0 then
        even = even + 1
      else
        odd = odd + 1
      end
      num = math.floor(num / 10)
    end
    return {even, odd}
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
