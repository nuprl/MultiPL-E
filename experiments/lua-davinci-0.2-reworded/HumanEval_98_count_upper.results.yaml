name: HumanEval_98_count_upper
language: lua
results:
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptikpsyub.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmptikpsyub.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeaok9hx.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkeaok9hx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0onaj_e.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu0onaj_e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopj4x_4v.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpopj4x_4v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_914txph.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_914txph.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphisds9wh.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphisds9wh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rzoyd20.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1rzoyd20.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uv2wedo.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4uv2wedo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgi2_s97.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwgi2_s97.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfy1r_sh.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbfy1r_sh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cyz5a81.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9cyz5a81.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9noz1v_.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpe9noz1v_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_zayrl3.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf_zayrl3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh9zocxd.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprh9zocxd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9o53te3.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa9o53te3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uwl_4kc.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3uwl_4kc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7el96y23.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7el96y23.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk01ofqew.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpk01ofqew.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbq42bol.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprbq42bol.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vlr2v68.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0vlr2v68.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqrw_inr.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpeqrw_inr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bxn9vpt.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_bxn9vpt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxbxaz2i.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplxbxaz2i.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhiw0kkf.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkhiw0kkf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxbhn7ez.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbxbhn7ez.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_pwlgsd.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpy_pwlgsd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp360tf00y.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp360tf00y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp681ix_m8.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp681ix_m8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr630p9o.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfr630p9o.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxncf25qz.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxncf25qz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhozb51n.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprhozb51n.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpveugv0lo.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpveugv0lo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1tezeut.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpz1tezeut.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvprq6axv.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvprq6axv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gonl6w5.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8gonl6w5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumzm53lq.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpumzm53lq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ldyf4q6.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9ldyf4q6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8u0offb6.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8u0offb6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yb4g06w.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_yb4g06w.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs6p96ah.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzs6p96ah.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0eja6e1y.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0eja6e1y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9iiwmyf.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpy9iiwmyf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp528w3h6e.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp528w3h6e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbroyue69.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbroyue69.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cs8v7bq.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0cs8v7bq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmea7ns1m.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmea7ns1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgekvvkk0.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpgekvvkk0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fvtgzce.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_fvtgzce.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl2uptdu.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmptl2uptdu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nud9axa.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1nud9axa.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_isyj2k.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpv_isyj2k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9odv4q5.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpp9odv4q5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk5mgnwn.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqk5mgnwn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsxpecwo.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprsxpecwo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbpi0p6t.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbbpi0p6t.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzarfj5v.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdzarfj5v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nwr78j7.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8nwr78j7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_qgm_st.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpc_qgm_st.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedauyip7.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpedauyip7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xin5_40.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9xin5_40.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18djfyo9.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp18djfyo9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd27vrhg5.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpd27vrhg5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfifo_gwl.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfifo_gwl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjylm3qm.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdjylm3qm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso9amou2.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpso9amou2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pejumf2.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3pejumf2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfv9bag4.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnfv9bag4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwt921tez.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwt921tez.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sqpa27k.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3sqpa27k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_3rjrbr.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf_3rjrbr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqdsowa7.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphqdsowa7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8lu7f1a.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpy8lu7f1a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37is8_ox.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp37is8_ox.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbcl5v7f.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsbcl5v7f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiizypa94.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpiizypa94.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1oatjbi7.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1oatjbi7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i=1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_lwyvcv.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl_lwyvcv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rfateci.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9rfateci.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5zzhsxi.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpn5zzhsxi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx0g7yie.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjx0g7yie.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jlzq744.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9jlzq744.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3609298.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpq3609298.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe32i4nrk.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpe32i4nrk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f4ea5kp.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8f4ea5kp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr_dmflp.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjr_dmflp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgig79al.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdgig79al.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9xjkdfn.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa9xjkdfn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwk0xoavv.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwk0xoavv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rrl2dr3.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6rrl2dr3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2zip6sn.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu2zip6sn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2c0jgk3.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpg2c0jgk3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuwjl8tm.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwuwjl8tm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o7h5c_j.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7o7h5c_j.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0b3yq2v.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpw0b3yq2v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55ykq9ii.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp55ykq9ii.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpam8s94uk.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpam8s94uk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_5q3q39.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpc_5q3q39.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5uf8_wdt.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5uf8_wdt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9isk0h2k.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9isk0h2k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0clf3xn2.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0clf3xn2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpou929mt7.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpou929mt7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mva8cod.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3mva8cod.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1bw_va3.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf1bw_va3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7w2mi82.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpo7w2mi82.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzquy3m36.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzquy3m36.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw84ds6_.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmw84ds6_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48sekrkm.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp48sekrkm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa50lj8a9.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa50lj8a9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaa9_qhq.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwaa9_qhq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvaqu_i30.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvaqu_i30.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42hcx8hh.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp42hcx8hh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1ooxcaj.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmps1ooxcaj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvdujr6m.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsvdujr6m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprf3lo63q.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprf3lo63q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbv7cv3b.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqbv7cv3b.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptryui36j.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmptryui36j.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplllm2te0.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplllm2te0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gf757x0.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8gf757x0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjopv358e.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjopv358e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozqy8r5g.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpozqy8r5g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fmui_cm.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2fmui_cm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3ax9f6y.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpw3ax9f6y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp758xhmw.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpp758xhmw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwy6pv6h.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzwy6pv6h.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxopdtee.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsxopdtee.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57kujmqp.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp57kujmqp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcfmhafv.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmptcfmhafv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3fb46m3.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu3fb46m3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd55hwr8p.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpd55hwr8p.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqf1gsd9v.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqf1gsd9v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6st57ox.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpx6st57ox.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponp0wzf1.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmponp0wzf1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q3lnrfh.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4q3lnrfh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmizbfr54.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmizbfr54.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_eoeoo83.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_eoeoo83.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahijviux.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpahijviux.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsexqiqac.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsexqiqac.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1aawv5r.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpn1aawv5r.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb52hm5ay.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpb52hm5ay.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g9jekr3.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_g9jekr3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjynfqjo.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppjynfqjo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pbc1tkr.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4pbc1tkr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc80ftj76.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpc80ftj76.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix61fno1.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpix61fno1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfeqbw_cj.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfeqbw_cj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n7ojhsz.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2n7ojhsz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3l9_slk.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpo3l9_slk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_1dv665.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpq_1dv665.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wxeokkq.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3wxeokkq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):upper()\
    \ == s:sub(i, i) then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2uslcp9t.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp2uslcp9t.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqni6nl0a.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqni6nl0a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bkflhrq.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2bkflhrq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzq9w9ksi.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzq9w9ksi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukyds_1d.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpukyds_1d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and is_upper(s:sub(i, i)) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx330s2lg.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpx330s2lg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpx330s2lg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8veqzu6t.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8veqzu6t.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k94vdr2.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5k94vdr2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhx8jnwx.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjhx8jnwx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1l3jw6j9.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1l3jw6j9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl51z3g_.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzl51z3g_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1fshekx.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu1fshekx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoebrp10d.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoebrp10d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3178910i.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3178910i.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswo17arh.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpswo17arh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsatf2bc1.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsatf2bc1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfzla431.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjfzla431.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasveuzhm.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpasveuzhm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsieg4fmg.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsieg4fmg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y39fo2e.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3y39fo2e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wx181pj.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7wx181pj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcx8p3kr.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjcx8p3kr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3g7v33g.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu3g7v33g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6w4_mk5.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpj6w4_mk5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08xaxd_7.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp08xaxd_7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4fchy9a.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpc4fchy9a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkl7we2q.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzkl7we2q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoekv84sk.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoekv84sk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwk1s_n0s.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwk1s_n0s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaed9likf.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpaed9likf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk6lvs6f.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpuk6lvs6f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu52owro5.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu52owro5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperozg2e_.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmperozg2e_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqi5rtup.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplqi5rtup.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7myfsyin.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7myfsyin.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp803opmzj.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp803opmzj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprt2ng8yg.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprt2ng8yg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanknbd2g.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpanknbd2g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3h16h4a.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpk3h16h4a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3u8ggiy.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpk3u8ggiy.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdi2kxsav.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdi2kxsav.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk0eja4u.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpuk0eja4u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30iqapqc.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp30iqapqc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5djvpvvi.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5djvpvvi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mt26wqc.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7mt26wqc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyb6jjrw.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmppyb6jjrw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmppyb6jjrw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsieqpq4h.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsieqpq4h.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejju_cu6.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpejju_cu6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4xd6vw5.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpe4xd6vw5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m_hw2ya.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6m_hw2ya.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh3trc0m.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphh3trc0m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
