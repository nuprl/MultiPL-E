name: HumanEval_21_rescale_to_unit
language: lua
prompt: "-- Given table of numbers (of at least two elements), apply a linear transform\
  \ to that table,\n-- such that the smallest number will become 0 and the largest\
  \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
  \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
  \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
  \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0,\
  \ 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0,\
  \ 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, v in ipairs(numbers)\
    \ do\n        table.insert(result, (v - min) / range)\n    end\n    return result\n\
    end", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local range = max_number - min_number\n   \
    \ local rescaled_numbers = {}\n    for _, number in ipairs(numbers) do\n     \
    \   table.insert(rescaled_numbers, (number - min_number) / range)\n    end\n \
    \   return rescaled_numbers\nend", "\tlocal min = numbers[1]\n\tlocal max = numbers[1]\n\
    \tfor _, n in ipairs(numbers) do\n\t\tif n < min then\n\t\t\tmin = n\n\t\tend\n\
    \t\tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\tlocal result = {}\n\tfor\
    \ _, n in ipairs(numbers) do\n\t\ttable.insert(result, (n - min) / (max - min))\n\
    \tend\n\treturn result\nend", "    local min = math.min(unpack(numbers))\n   \
    \ local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ scale = max - min\n    local result = {}\n    for _, v in ipairs(numbers) do\n\
    \        table.insert(result, (v - min) / scale)\n    end\n    return result\n\
    end", "  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] < min then\n      min = numbers[i]\n    elseif numbers[i]\
    \ > max then\n      max = numbers[i]\n    end\n  end\n  local result = {}\n  for\
    \ i = 1, #numbers do\n    result[i] = (numbers[i] - min) / (max - min)\n  end\n\
    \  return result\nend", "  local min_number = math.min(unpack(numbers))\n  local\
    \ max_number = math.max(unpack(numbers))\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(result, (number - min_number) / (max_number\
    \ - min_number))\n  end\n  return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number < min\
    \ then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        table.insert(result, (number - min)\
    \ / (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / scale)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ i = 2, #numbers do\n        if numbers[i] < min then\n            min = numbers[i]\n\
    \        elseif numbers[i] > max then\n            max = numbers[i]\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #numbers do\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    end\n    return result\nend", "    local\
    \ min_number = numbers[1]\n    local max_number = numbers[1]\n    for _, number\
    \ in ipairs(numbers) do\n        if number < min_number then\n            min_number\
    \ = number\n        end\n        if number > max_number then\n            max_number\
    \ = number\n        end\n    end\n    local scale = 1 / (max_number - min_number)\n\
    \    local scaled_numbers = {}\n    for _, number in ipairs(numbers) do\n    \
    \    table.insert(scaled_numbers, (number - min_number) * scale)\n    end\n  \
    \  return scaled_numbers\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for _, n in ipairs(numbers) do\n        if n < min then\n            min\
    \ = n\n        end\n        if n > max then\n            max = n\n        end\n\
    \    end\n    local scale = 1 / (max - min)\n    local result = {}\n    for _,\
    \ n in ipairs(numbers) do\n        table.insert(result, (n - min) * scale)\n \
    \   end\n    return result\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local range = max_number\
    \ - min_number\n    local rescaled_numbers = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled_numbers, (number - min_number) / range)\n\
    \    end\n    return rescaled_numbers\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for _, number in ipairs(numbers) do\n        if\
    \ number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min_number = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local range = max_number - min_number\n    local rescaled_numbers = {}\n\
    \    for _, number in ipairs(numbers) do\n        table.insert(rescaled_numbers,\
    \ (number - min_number) / range)\n    end\n    return rescaled_numbers\nend",
  "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, v in ipairs(numbers) do\n        if v < min then\n            min = v\n \
    \       end\n        if v > max then\n            max = v\n        end\n    end\n\
    \    local result = {}\n    for _, v in ipairs(numbers) do\n        table.insert(result,\
    \ (v - min) / (max - min))\n    end\n    return result\nend", "    local min_number\
    \ = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local range = max_number - min_number\n    local rescaled_numbers = {}\n\
    \    for _, number in ipairs(numbers) do\n        table.insert(rescaled_numbers,\
    \ (number - min_number) / range)\n    end\n    return rescaled_numbers\nend",
  "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, v in ipairs(numbers)\
    \ do\n        table.insert(result, (v - min) / range)\n    end\n    return result\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, number\
    \ in ipairs(numbers) do\n        if number < min then\n            min = number\n\
    \        end\n        if number > max then\n            max = number\n       \
    \ end\n    end\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        table.insert(result, (number - min) / (max - min))\n    end\n    return\
    \ result\nend", "  local min = numbers[1]\n  local max = numbers[1]\n  for i =\
    \ 2, #numbers do\n    if numbers[i] < min then\n      min = numbers[i]\n    elseif\
    \ numbers[i] > max then\n      max = numbers[i]\n    end\n  end\n  local result\
    \ = {}\n  for i = 1, #numbers do\n    result[i] = (numbers[i] - min) / (max -\
    \ min)\n  end\n  return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number < min\
    \ then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local scale = 1 / (max -\
    \ min)\n    local result = {}\n    for _, number in ipairs(numbers) do\n     \
    \   table.insert(result, (number - min) * scale)\n    end\n    return result\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, n in\
    \ ipairs(numbers) do\n        if n < min then\n            min = n\n        end\n\
    \        if n > max then\n            max = n\n        end\n    end\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n\
    \        if n < min then\n            min = n\n        end\n        if n > max\
    \ then\n            max = n\n        end\n    end\n    local range = max - min\n\
    \    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / range)\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / (max - min))\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number < min\
    \ then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        table.insert(result, (number - min)\
    \ / (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local range = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / range)\n    end\n    return\
    \ rescaled\nend", "    local min = math.min(unpack(numbers))\n    local max =\
    \ math.max(unpack(numbers))\n    local range = max - min\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        table.insert(result, (number\
    \ - min) / range)\n    end\n    return result\nend", "  local min_number = math.min(unpack(numbers))\n\
    \  local max_number = math.max(unpack(numbers))\n  local range = max_number -\
    \ min_number\n  local rescaled_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(rescaled_numbers, (number - min_number) / range)\n  end\n\
    \  return rescaled_numbers\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for i,\
    \ v in ipairs(numbers) do\n        result[i] = (v - min) / (max - min)\n    end\n\
    \    return result\nend", "    local min_number = numbers[1]\n    local max_number\
    \ = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number < min_number\
    \ then\n            min_number = number\n        end\n        if number > max_number\
    \ then\n            max_number = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min_number) / (max_number - min_number))\n    end\n    return result\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, number\
    \ in ipairs(numbers) do\n        if number < min then\n            min = number\n\
    \        end\n        if number > max then\n            max = number\n       \
    \ end\n    end\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        table.insert(result, (number - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ i = 2, #numbers do\n        if numbers[i] < min then\n            min = numbers[i]\n\
    \        elseif numbers[i] > max then\n            max = numbers[i]\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #numbers do\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local scale = 1 / (max - min)\n    local result = {}\n    for _, number in\
    \ ipairs(numbers) do\n        table.insert(result, (number - min) * scale)\n \
    \   end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for i, v in ipairs(numbers)\
    \ do\n        result[i] = (v - min) / range\n    end\n    return result\nend",
  "    local min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min_number = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min_number) / (max_number - min_number))\n    end\n    return result\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, v in\
    \ ipairs(numbers) do\n        if v < min then\n            min = v\n        end\n\
    \        if v > max then\n            max = v\n        end\n    end\n    local\
    \ result = {}\n    for _, v in ipairs(numbers) do\n        table.insert(result,\
    \ (v - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local scale = 1 / (max - min)\n    local result = {}\n    for _, number in\
    \ ipairs(numbers) do\n        table.insert(result, (number - min) * scale)\n \
    \   end\n    return result\nend", "    local min = numbers[1]\n    local max =\
    \ numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] < min then\n \
    \           min = numbers[i]\n        elseif numbers[i] > max then\n         \
    \   max = numbers[i]\n        end\n    end\n    local result = {}\n    for i =\
    \ 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n    end\n\
    \    return result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] < min then\n            min\
    \ = numbers[i]\n        elseif numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #numbers do\n   \
    \     result[i] = (numbers[i] - min) / (max - min)\n    end\n    return result\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / scale)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ i = 2, #numbers do\n        if numbers[i] < min then\n            min = numbers[i]\n\
    \        elseif numbers[i] > max then\n            max = numbers[i]\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #numbers do\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    end\n    return result\nend", "    local\
    \ min_number = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local range = max_number - min_number\n    local rescaled_numbers = {}\n\
    \    for i, number in ipairs(numbers) do\n        rescaled_numbers[i] = (number\
    \ - min_number) / range\n    end\n    return rescaled_numbers\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, number in ipairs(numbers) do\n        if number < min then\n            min\
    \ = number\n        end\n        if number > max then\n            max = number\n\
    \        end\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / (max - min))\n    end\n  \
    \  return result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] < min then\n            min\
    \ = numbers[i]\n        elseif numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #numbers do\n   \
    \     result[i] = (numbers[i] - min) / (max - min)\n    end\n    return result\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "  local min = numbers[1]\n  local max = numbers[1]\n  for _,\
    \ n in ipairs(numbers) do\n    if n < min then min = n end\n    if n > max then\
    \ max = n end\n  end\n  local scale = 1.0 / (max - min)\n  local result = {}\n\
    \  for _, n in ipairs(numbers) do\n    table.insert(result, (n - min) * scale)\n\
    \  end\n  return result\nend", "  local min = math.min(unpack(numbers))\n  local\
    \ max = math.max(unpack(numbers))\n  local result = {}\n  for _, v in ipairs(numbers)\
    \ do\n    table.insert(result, (v - min) / (max - min))\n  end\n  return result\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, number\
    \ in ipairs(numbers) do\n        if number < min then\n            min = number\n\
    \        end\n        if number > max then\n            max = number\n       \
    \ end\n    end\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        table.insert(result, (number - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, n in ipairs(numbers) do\n        if n < min then\n            min = n\n \
    \       end\n        if n > max then\n            max = n\n        end\n    end\n\
    \    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n\
    \        if n < min then\n            min = n\n        end\n        if n > max\
    \ then\n            max = n\n        end\n    end\n    local result = {}\n   \
    \ for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) / (max\
    \ - min))\n    end\n    return result\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] <\
    \ min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local range = max - min\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i]\
    \ - min) / range\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend", "\tlocal min, max = numbers[1], numbers[1]\n\
    \tfor i = 2, #numbers do\n\t\tif numbers[i] < min then\n\t\t\tmin = numbers[i]\n\
    \t\telseif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\tend\n\tlocal\
    \ result = {}\n\tfor i = 1, #numbers do\n\t\tresult[i] = (numbers[i] - min) /\
    \ (max - min)\n\tend\n\treturn result\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for _, number in ipairs(numbers) do\n        if\
    \ number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local range\
    \ = max - min\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        table.insert(result, (number - min) / range)\n    end\n    return result\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, n in\
    \ ipairs(numbers) do\n        if n < min then\n            min = n\n        end\n\
    \        if n > max then\n            max = n\n        end\n    end\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local range = max - min\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result, (number\
    \ - min) / range)\n  end\n  return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min_number = numbers[1]\n    local max_number = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < min_number then\n            min_number = numbers[i]\n\
    \        elseif numbers[i] > max_number then\n            max_number = numbers[i]\n\
    \        end\n    end\n    local range = max_number - min_number\n    local rescaled_numbers\
    \ = {}\n    for i = 1, #numbers do\n        rescaled_numbers[i] = (numbers[i]\
    \ - min_number) / range\n    end\n    return rescaled_numbers\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for i = 2, #numbers do\n \
    \       if numbers[i] < min then\n            min = numbers[i]\n        elseif\
    \ numbers[i] > max then\n            max = numbers[i]\n        end\n    end\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i]\
    \ - min) / (max - min)\n    end\n    return result\nend", "  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(result, (number - min) / (max - min))\n\
    \  end\n  return result\nend", "    local min = math.min(unpack(numbers))\n  \
    \  local max = math.max(unpack(numbers))\n    local result = {}\n    for _, number\
    \ in ipairs(numbers) do\n        table.insert(result, (number - min) / (max -\
    \ min))\n    end\n    return result\nend", "    local min = numbers[1]\n    local\
    \ max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then\n\
    \            min = n\n        end\n        if n > max then\n            max =\
    \ n\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ i, number in ipairs(numbers) do\n        if number < min then\n            min\
    \ = number\n        end\n        if number > max then\n            max = number\n\
    \        end\n    end\n    local result = {}\n    for i, number in ipairs(numbers)\
    \ do\n        result[i] = (number - min) / (max - min)\n    end\n    return result\n\
    end", "    local min_number = numbers[1]\n    local max_number = numbers[1]\n\
    \    for i, number in ipairs(numbers) do\n        if number < min_number then\n\
    \            min_number = number\n        end\n        if number > max_number\
    \ then\n            max_number = number\n        end\n    end\n    local scale\
    \ = 1.0 / (max_number - min_number)\n    local result = {}\n    for i, number\
    \ in ipairs(numbers) do\n        result[i] = (number - min_number) * scale\n \
    \   end\n    return result\nend", "    local min = numbers[1]\n    local max =\
    \ numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then\n  \
    \          min = n\n        end\n        if n > max then\n            max = n\n\
    \        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        result[#result + 1] = (number - min_number) / (max_number - min_number)\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then\n\
    \            min = n\n        end\n        if n > max then\n            max =\
    \ n\n        end\n    end\n    local range = max - min\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ range)\n    end\n    return result\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local scale = max_number\
    \ - min_number\n    local rescaled_numbers = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled_numbers, (number - min_number) / scale)\n\
    \    end\n    return rescaled_numbers\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local scale = max_number\
    \ - min_number\n    local scaled_numbers = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(scaled_numbers, (number - min_number) / scale)\n  \
    \  end\n    return scaled_numbers\nend", "  local min = numbers[1]\n  local max\
    \ = numbers[1]\n  for _, number in ipairs(numbers) do\n    if number < min then\n\
    \      min = number\n    end\n    if number > max then\n      max = number\n \
    \   end\n  end\n  local result = {}\n  for _, number in ipairs(numbers) do\n \
    \   table.insert(result, (number - min) / (max - min))\n  end\n  return result\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / range)\n    end\n    return\
    \ rescaled\nend", "  local min = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n\
    \  local scale = max - min\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(result, (number - min) / scale)\n  end\n  return result\n\
    end", "    local min_value = math.min(unpack(numbers))\n    local max_value =\
    \ math.max(unpack(numbers))\n    local range = max_value - min_value\n    local\
    \ rescaled = {}\n    for i, v in ipairs(numbers) do\n        rescaled[i] = (v\
    \ - min_value) / range\n    end\n    return rescaled\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local range = max - min\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / range)\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for i = 2, #numbers do\n       \
    \ if numbers[i] < min then\n            min = numbers[i]\n        elseif numbers[i]\
    \ > max then\n            max = numbers[i]\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max\
    \ - min)\n    end\n    return result\nend", "    local min = numbers[1]\n    local\
    \ max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then\n\
    \            min = n\n        end\n        if n > max then\n            max =\
    \ n\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        result[#result + 1] = (n - min) / (max - min)\n    end\n    return\
    \ result\nend", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local range = max_number - min_number\n   \
    \ local rescaled_numbers = {}\n    for _, number in ipairs(numbers) do\n     \
    \   table.insert(rescaled_numbers, (number - min_number) / range)\n    end\n \
    \   return rescaled_numbers\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for i, number in ipairs(numbers) do\n        if number < min\
    \ then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ i, number in ipairs(numbers) do\n        result[i] = (number - min) / (max -\
    \ min)\n    end\n    return result\nend", "\tlocal min = numbers[1]\n\tlocal max\
    \ = numbers[1]\n\tfor i = 2, #numbers do\n\t\tif numbers[i] < min then\n\t\t\t\
    min = numbers[i]\n\t\telseif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\
    \tend\n\tend\n\tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tresult[i] = (numbers[i]\
    \ - min) / (max - min)\n\tend\n\treturn result\nend", "    local min_number =\
    \ math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local range = max_number - min_number\n    local rescaled_numbers = {}\n\
    \    for _, number in ipairs(numbers) do\n        table.insert(rescaled_numbers,\
    \ (number - min_number) / range)\n    end\n    return rescaled_numbers\nend",
  "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, number in ipairs(numbers) do\n        if number < min then\n            min\
    \ = number\n        end\n        if number > max then\n            max = number\n\
    \        end\n    end\n    local scale = 1.0 / (max - min)\n    local result =\
    \ {}\n    for _, number in ipairs(numbers) do\n        table.insert(result, (number\
    \ - min) * scale)\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min_number\
    \ = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local range = max_number - min_number\n    local rescaled_numbers = {}\n\
    \    for _, number in ipairs(numbers) do\n        table.insert(rescaled_numbers,\
    \ (number - min_number) / range)\n    end\n    return rescaled_numbers\nend",
  "    local min_number = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local scale = max_number - min_number\n    local scaled_numbers = {}\n  \
    \  for _, number in ipairs(numbers) do\n        table.insert(scaled_numbers, (number\
    \ - min_number) / scale)\n    end\n    return scaled_numbers\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        result[#result\
    \ + 1] = (number - min) / (max - min)\n    end\n    return result\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[1]\n  for _, number in ipairs(numbers)\
    \ do\n    if number < min then\n      min = number\n    end\n    if number > max\
    \ then\n      max = number\n    end\n  end\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(result, (number - min) / (max - min))\n\
    \  end\n  return result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] < min then\n            min\
    \ = numbers[i]\n        elseif numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n    end\n    local range = max - min\n    local result = {}\n  \
    \  for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / range\n  \
    \  end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ scale = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / scale)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, n in ipairs(numbers) do\n        if n < min then\n            min = n\n \
    \       end\n        if n > max then\n            max = n\n        end\n    end\n\
    \    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min_number\
    \ = numbers[1]\n    local max_number = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min_number then\n            min_number = number\n \
    \       end\n        if number > max_number then\n            max_number = number\n\
    \        end\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min_number) / (max_number - min_number))\n\
    \    end\n    return result\nend", "  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local scale = max - min\n  local result\
    \ = {}\n  for i, v in ipairs(numbers) do\n    result[i] = (v - min) / scale\n\
    \  end\n  return result\nend", "  local min = math.min(unpack(numbers))\n  local\
    \ max = math.max(unpack(numbers))\n  local range = max - min\n  local rescaled\
    \ = {}\n  for i, v in ipairs(numbers) do\n    rescaled[i] = (v - min) / range\n\
    \  end\n  return rescaled\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local range = max_number\
    \ - min_number\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        table.insert(result, (number - min_number) / range)\n    end\n    return\
    \ result\nend", "    local min_number = numbers[1]\n    local max_number = numbers[1]\n\
    \    for _, number in ipairs(numbers) do\n        if number < min_number then\n\
    \            min_number = number\n        end\n        if number > max_number\
    \ then\n            max_number = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min_number) / (max_number - min_number))\n    end\n    return result\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, number\
    \ in ipairs(numbers) do\n        if number < min then\n            min = number\n\
    \        end\n        if number > max then\n            max = number\n       \
    \ end\n    end\n    local range = max - min\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(result, (number - min) /\
    \ range)\n    end\n    return result\nend", "    local min = numbers[1]\n    local\
    \ max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then\n\
    \            min = n\n        end\n        if n > max then\n            max =\
    \ n\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local range = max_number - min_number\n   \
    \ local rescaled_numbers = {}\n    for _, number in ipairs(numbers) do\n     \
    \   table.insert(rescaled_numbers, (number - min_number) / range)\n    end\n \
    \   return rescaled_numbers\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then\n\
    \            min = n\n        end\n        if n > max then\n            max =\
    \ n\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local range = max_number - min_number\n   \
    \ local rescaled_numbers = {}\n    for _, number in ipairs(numbers) do\n     \
    \   table.insert(rescaled_numbers, (number - min_number) / range)\n    end\n \
    \   return rescaled_numbers\nend", "  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(result, (number - min) / (max - min))\n\
    \  end\n  return result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for _, n in ipairs(numbers) do\n        if n < min then\n            min\
    \ = n\n        end\n        if n > max then\n            max = n\n        end\n\
    \    end\n    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n\
    \        if n < min then\n            min = n\n        end\n        if n > max\
    \ then\n            max = n\n        end\n    end\n    local result = {}\n   \
    \ for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) / (max\
    \ - min))\n    end\n    return result\nend", "    local min_number = numbers[1]\n\
    \    local max_number = numbers[1]\n    for _, number in ipairs(numbers) do\n\
    \        if number < min_number then\n            min_number = number\n      \
    \  end\n        if number > max_number then\n            max_number = number\n\
    \        end\n    end\n    local range = max_number - min_number\n    local rescaled_numbers\
    \ = {}\n    for _, number in ipairs(numbers) do\n        local rescaled_number\
    \ = (number - min_number) / range\n        table.insert(rescaled_numbers, rescaled_number)\n\
    \    end\n    return rescaled_numbers\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        result[#result + 1] = (number - min) / range\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, n in ipairs(numbers) do\n        if n < min then\n            min = n\n \
    \       end\n        if n > max then\n            max = n\n        end\n    end\n\
    \    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ range = max - min\n    local result = {}\n    for _, v in ipairs(numbers) do\n\
    \        table.insert(result, (v - min) / range)\n    end\n    return result\n\
    end", "  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] < min then\n      min = numbers[i]\n    elseif numbers[i]\
    \ > max then\n      max = numbers[i]\n    end\n  end\n  local result = {}\n  for\
    \ i = 1, #numbers do\n    result[i] = (numbers[i] - min) / (max - min)\n  end\n\
    \  return result\nend", "    local min = math.min(unpack(numbers))\n    local\
    \ max = math.max(unpack(numbers))\n    local range = max - min\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ range = max - min\n    local result = {}\n    for _, v in ipairs(numbers) do\n\
    \        table.insert(result, (v - min) / range)\n    end\n    return result\n\
    end", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local range = max_number - min_number\n   \
    \ local rescaled_numbers = {}\n    for _, number in ipairs(numbers) do\n     \
    \   table.insert(rescaled_numbers, (number - min_number) / range)\n    end\n \
    \   return rescaled_numbers\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, v in ipairs(numbers) do\n        table.insert(result,\
    \ (v - min) / range)\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min_number\
    \ = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min_number) / (max_number - min_number))\n    end\n    return result\n\
    end", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local range = max_number - min_number\n   \
    \ return map(function(x) return (x - min_number) / range end, numbers)\nend",
  "    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < min then\n            min = numbers[i]\n       \
    \ elseif numbers[i] > max then\n            max = numbers[i]\n        end\n  \
    \  end\n    local range = max - min\n    local result = {}\n    for i = 1, #numbers\
    \ do\n        result[i] = (numbers[i] - min) / range\n    end\n    return result\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "  local min\
    \ = numbers[1]\n  local max = numbers[1]\n  for _, n in ipairs(numbers) do\n \
    \   if n < min then min = n end\n    if n > max then max = n end\n  end\n  local\
    \ scale = 1 / (max - min)\n  local result = {}\n  for _, n in ipairs(numbers)\
    \ do\n    table.insert(result, (n - min) * scale)\n  end\n  return result\nend",
  "    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < min then\n            min = numbers[i]\n       \
    \ elseif numbers[i] > max then\n            max = numbers[i]\n        end\n  \
    \  end\n    local result = {}\n    for i = 1, #numbers do\n        result[i] =\
    \ (numbers[i] - min) / (max - min)\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local range = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / range)\n    end\n    return\
    \ rescaled\nend", "    local min = numbers[1]\n    local max = numbers[1]\n  \
    \  for i = 2, #numbers do\n        if numbers[i] < min then\n            min =\
    \ numbers[i]\n        elseif numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #numbers do\n   \
    \     result[i] = (numbers[i] - min) / (max - min)\n    end\n    return result\n\
    end", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local range = max_number - min_number\n   \
    \ local rescaled_numbers = {}\n    for _, number in ipairs(numbers) do\n     \
    \   table.insert(rescaled_numbers, (number - min_number) / range)\n    end\n \
    \   return rescaled_numbers\nend", "  local min = numbers[1]\n  local max = numbers[1]\n\
    \  for _, number in ipairs(numbers) do\n    if number < min then\n      min =\
    \ number\n    end\n    if number > max then\n      max = number\n    end\n  end\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) / (max - min))\n  end\n  return result\nend", "  local min =\
    \ math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) / (max - min))\n  end\n  return result\nend", "    local min\
    \ = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min_value = math.min(unpack(numbers))\n\
    \    local max_value = math.max(unpack(numbers))\n    local range = max_value\
    \ - min_value\n    local rescaled = {}\n    for _, number in ipairs(numbers) do\n\
    \        table.insert(rescaled, (number - min_value) / range)\n    end\n    return\
    \ rescaled\nend", "    local min = math.min(unpack(numbers))\n    local max =\
    \ math.max(unpack(numbers))\n    local range = max - min\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        table.insert(result, (number\
    \ - min) / range)\n    end\n    return result\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local range = max_number\
    \ - min_number\n    local rescaled_numbers = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled_numbers, (number - min_number) / range)\n\
    \    end\n    return rescaled_numbers\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min\
    \ then\n            min = n\n        end\n        if n > max then\n          \
    \  max = n\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "  local min = numbers[1]\n  local max = numbers[1]\n  for _,\
    \ number in ipairs(numbers) do\n    if number < min then\n      min = number\n\
    \    end\n    if number > max then\n      max = number\n    end\n  end\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) / (max - min))\n  end\n  return result\nend", "    local min\
    \ = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n   \
    \ local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, n in ipairs(numbers) do\n        if n < min then\n            min = n\n \
    \       end\n        if n > max then\n            max = n\n        end\n    end\n\
    \    local range = max - min\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / range)\n    end\n    return result\n\
    end", "  local min_number = math.min(unpack(numbers))\n  local max_number = math.max(unpack(numbers))\n\
    \  local range = max_number - min_number\n  local rescaled_numbers = {}\n  for\
    \ _, number in ipairs(numbers) do\n    table.insert(rescaled_numbers, (number\
    \ - min_number) / range)\n  end\n  return rescaled_numbers\nend", "  local min_number\
    \ = numbers[1]\n  local max_number = numbers[1]\n  for i = 2, #numbers do\n  \
    \  if numbers[i] < min_number then\n      min_number = numbers[i]\n    end\n \
    \   if numbers[i] > max_number then\n      max_number = numbers[i]\n    end\n\
    \  end\n  local range = max_number - min_number\n  local result = {}\n  for i\
    \ = 1, #numbers do\n    result[i] = (numbers[i] - min_number) / range\n  end\n\
    \  return result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for _, n in ipairs(numbers) do\n        if n < min then\n            min\
    \ = n\n        end\n        if n > max then\n            max = n\n        end\n\
    \    end\n    local scale = max - min\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / scale)\n    end\n\
    \    return result\nend", "    local min = math.min(unpack(numbers))\n    local\
    \ max = math.max(unpack(numbers))\n    local range = max - min\n    local rescaled\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(rescaled,\
    \ (number - min) / range)\n    end\n    return rescaled\nend", "    local min\
    \ = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "  local min\
    \ = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n  local\
    \ result = {}\n  for i, v in ipairs(numbers) do\n    result[i] = (v - min) / (max\
    \ - min)\n  end\n  return result\nend", "  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local scale = max - min\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result, (number\
    \ - min) / scale)\n  end\n  return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ res = {}\n    for _, v in ipairs(numbers) do\n        table.insert(res, (v -\
    \ min) / range)\n    end\n    return res\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] < min then\n\
    \            min = numbers[i]\n        elseif numbers[i] > max then\n        \
    \    max = numbers[i]\n        end\n    end\n    local result = {}\n    for i\
    \ = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n   \
    \ end\n    return result\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local range = max_number\
    \ - min_number\n    local rescaled_numbers = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled_numbers, (number - min_number) / range)\n\
    \    end\n    return rescaled_numbers\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min\
    \ then\n            min = n\n        end\n        if n > max then\n          \
    \  max = n\n        end\n    end\n    local scale = 1 / (max - min)\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) * scale)\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / (max - min))\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number < min\
    \ then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        table.insert(result, (number - min)\
    \ / (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number < min\
    \ then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        table.insert(result, (number - min)\
    \ / (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / (max - min))\n\
    \    end\n    return result\nend", "  local min = numbers[1]\n  local max = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] < min then\n      min = numbers[i]\n\
    \    elseif numbers[i] > max then\n      max = numbers[i]\n    end\n  end\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = (numbers[i] - min) /\
    \ (max - min)\n  end\n  return result\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min\
    \ then\n            min = n\n        end\n        if n > max then\n          \
    \  max = n\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ i = 2, #numbers do\n        if numbers[i] < min then\n            min = numbers[i]\n\
    \        elseif numbers[i] > max then\n            max = numbers[i]\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #numbers do\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, num in ipairs(numbers)\
    \ do\n        if num < min then\n            min = num\n        end\n        if\
    \ num > max then\n            max = num\n        end\n    end\n    local range\
    \ = max - min\n    local result = {}\n    for _, num in ipairs(numbers) do\n \
    \       table.insert(result, (num - min) / range)\n    end\n    return result\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, n in\
    \ ipairs(numbers) do\n        if n < min then\n            min = n\n        end\n\
    \        if n > max then\n            max = n\n        end\n    end\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n\
    \        if n < min then\n            min = n\n        end\n        if n > max\
    \ then\n            max = n\n        end\n    end\n    local result = {}\n   \
    \ for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) / (max\
    \ - min))\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n\
    \        if n < min then\n            min = n\n        end\n        if n > max\
    \ then\n            max = n\n        end\n    end\n    local result = {}\n   \
    \ for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) / (max\
    \ - min))\n    end\n    return result\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for _, number in ipairs(numbers) do\n        if\
    \ number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local scale = 1.0 / (max - min)\n    local result = {}\n    for _, number\
    \ in ipairs(numbers) do\n        table.insert(result, (number - min) * scale)\n\
    \    end\n    return result\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local scale = max_number\
    \ - min_number\n    local scaled_numbers = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(scaled_numbers, (number - min_number) / scale)\n  \
    \  end\n    return scaled_numbers\nend", "    local min = numbers[1]\n    local\
    \ max = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number\
    \ < min then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        table.insert(result, (number - min)\
    \ / (max - min))\n    end\n    return result\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local range = max_number\
    \ - min_number\n    local rescaled_numbers = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled_numbers, (number - min_number) / range)\n\
    \    end\n    return rescaled_numbers\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min\
    \ then\n            min = n\n        end\n        if n > max then\n          \
    \  max = n\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, v in ipairs(numbers) do\n        table.insert(result,\
    \ (v - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local scale = 1 / (max - min)\n    local result = {}\n    for _, number in\
    \ ipairs(numbers) do\n        table.insert(result, (number - min) * scale)\n \
    \   end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(result, (number - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n    local range = max - min\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        table.insert(result, (number\
    \ - min) / range)\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(result, (number - min) /\
    \ (max - min))\n    end\n    return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for _, n in ipairs(numbers) do\n    if n < min then\
    \ min = n end\n    if n > max then max = n end\n  end\n  local scale = 1.0 / (max\
    \ - min)\n  local result = {}\n  for _, n in ipairs(numbers) do\n    table.insert(result,\
    \ (n - min) * scale)\n  end\n  return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / (max - min))\n\
    \    end\n    return result\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local result = {}\n   \
    \ for i, number in ipairs(numbers) do\n        result[i] = (number - min_number)\
    \ / (max_number - min_number)\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
