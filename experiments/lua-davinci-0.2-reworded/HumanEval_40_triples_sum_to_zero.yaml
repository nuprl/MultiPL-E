name: HumanEval_40_triples_sum_to_zero
language: lua
prompt: "-- triples_sum_to_zero takes a table of integers as an input.\n-- it returns\
  \ true if there are three distinct elements in the table that\n-- sum to zero, and\
  \ false otherwise.\n-- >>> triples_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> triples_sum_to_zero({1,\
  \ 3, -2, 1})\n-- true\n-- >>> triples_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
  \ triples_sum_to_zero({2, 4, -5, 3, 9, 7})\n-- true\n-- >>> triples_sum_to_zero({1})\n\
  -- false\nlocal function triples_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local seen = {}\n  for i = 1, #l do\n    for j = i + 1, #l do\n \
    \     if seen[-l[i] - l[j]] then\n        return true\n      end\n      seen[l[j]]\
    \ = true\n    end\n    seen = {}\n  end\n  return false\nend", "    for i, a in\
    \ ipairs(l) do\n        for j, b in ipairs(l) do\n            for k, c in ipairs(l)\
    \ do\n                if i ~= j and i ~= k and j ~= k and a + b + c == 0 then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend", "    -- TODO: implement this function\n\
    \    -- Hint: use the function you wrote for the previous question\n    -- to\
    \ help you with this one.\n    -- Hint: you can use the table.sort function to\
    \ sort a table\n    -- in-place.\n    -- Hint: you can use the table.concat function\
    \ to concatenate\n    -- two tables together.\n    -- Hint: you can use the table.insert\
    \ function to insert an\n    -- element into a table.\n    -- Hint: you can use\
    \ the table.remove function to remove an\n    -- element from a table.\n    --\
    \ Hint: you can use the table.unpack function to unpack a\n    -- table into a\
    \ list of arguments.\n    -- Hint: you can use the table.pack function to pack\
    \ a list\n    -- of arguments into a table.\n    -- Hint: you can use the table.maxn\
    \ function to get the number\n    -- of elements in a table.\n    -- Hint: you\
    \ can use the table.getn function to get the number\n    -- of elements in a table.\n\
    \    -- Hint: you can use the table.foreach function to iterate\n    -- over the\
    \ elements of a table.\n    -- Hint: you can use the table.foreachi function to\
    \ iterate\n    -- over the elements of a table with their indices.\n    -- Hint:\
    \ you can use the table.insert function to insert an\n    -- element into a table.\n\
    \    -- Hint: you can use the table.remove function to remove an\n    -- element\
    \ from a table.\n    -- Hint: you can use the table.getn function to get the number\n\
    \    -- of elements in a table.\n    -- Hint: you can use the table.sort function\
    \ to sort a table\n    -- in-place.\n    -- Hint: you can use the table.concat\
    \ function to concatenate\n    -- two tables together.\n    -- Hint: you can use\
    \ the table.unpack function to unpack a\n    -- table into a list of arguments.\n\
    \    -- Hint: you can use the table.pack function to pack a list\n    -- of arguments\
    \ into a table.\n    -- Hint: you can use the table.maxn function to get the number\n\
    \   ", "    local n = #l\n    if n < 3 then\n        return false\n    end\n \
    \   for i = 1, n do\n        for j = i + 1, n do\n            for k = j + 1, n\
    \ do\n                if l[i] + l[j] + l[k] == 0 then\n                    return\
    \ true\n                end\n            end\n        end\n    end\n    return\
    \ false\nend", "    local t = {}\n    for i, v in ipairs(l) do\n        t[v] =\
    \ true\n    end\n    for i, v in ipairs(l) do\n        for j, w in ipairs(l) do\n\
    \            if i ~= j then\n                if t[-v-w] then\n               \
    \     return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "    -- TODO: implement this function\n    return false\n\
    end", "  local n = #l\n  if n < 3 then\n    return false\n  end\n  for i = 1,\
    \ n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if\
    \ l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "    local n = #l\n    if n < 3 then\n\
    \        return false\n    end\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if l[i] + l[j] +\
    \ l[k] == 0 then\n                    return true\n                end\n     \
    \       end\n        end\n    end\n    return false\nend", "  local n = #l\n \
    \ if n < 3 then\n    return false\n  end\n  for i = 1, n - 2 do\n    for j = i\
    \ + 1, n - 1 do\n      for k = j + 1, n do\n        if l[i] + l[j] + l[k] == 0\
    \ then\n          return true\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "    -- YOUR CODE HERE\n    for i = 1, #l do\n        for j = i\
    \ + 1, #l do\n            for k = j + 1, #l do\n                if l[i] + l[j]\
    \ + l[k] == 0 then\n                    return true\n                end\n   \
    \         end\n        end\n    end\n    return false\nend", "  for i = 1, #l\
    \ do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n        if l[i] +\
    \ l[j] + l[k] == 0 then\n          return true\n        end\n      end\n    end\n\
    \  end\n  return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n\
    \      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n       \
    \   return true\n        end\n      end\n    end\n  end\n  return false\nend",
  "  -- YOUR CODE HERE\n  local sum = 0\n  local count = 0\n  local i = 1\n  while\
    \ i <= #l do\n    sum = sum + l[i]\n    if sum == 0 then\n      count = count\
    \ + 1\n    end\n    i = i + 1\n  end\n  if count >= 3 then\n    return true\n\
    \  else\n    return false\n  end\nend", "  for i = 1, #l do\n    for j = i + 1,\
    \ #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "    local n = #l\n    if n < 3 then\n        return false\n    end\n  \
    \  for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j\
    \ + 1, n do\n                if l[i] + l[j] + l[k] == 0 then\n               \
    \     return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "    -- TODO: implement this function\n    return false\n\
    end", "  -- TODO: implement this function\n  -- Hint: you can use a helper function.\n\
    \  -- Hint: you can use the table.sort function.\n  -- Hint: you can use the table.concat\
    \ function.\n  -- Hint: you can use the table.insert function.\n  -- Hint: you\
    \ can use the table.remove function.\n  -- Hint: you can use the table.unpack\
    \ function.\n  -- Hint: you can use the table.pack function.\n  -- Hint: you can\
    \ use the table.move function.\n  -- Hint: you can use the table.maxn function.\n\
    \  -- Hint: you can use the table.getn function.\n  -- Hint: you can use the table.foreach\
    \ function.\n  -- Hint: you can use the table.foreachi function.\n  -- Hint: you\
    \ can use the table.sort function.\n  -- Hint: you can use the table.sort function.\n\
    \  -- Hint: you can use the table.sort function.\n  -- Hint: you can use the table.sort\
    \ function.\n  -- Hint: you can use the table.sort function.\n  -- Hint: you can\
    \ use the table.sort function.\n  -- Hint: you can use the table.sort function.\n\
    \  -- Hint: you can use the table.sort function.\n  -- Hint: you can use the table.sort\
    \ function.\n  -- Hint: you can use the table.sort function.\n  -- Hint: you can\
    \ use the table.sort function.\n  -- Hint: you can use the table.sort function.\n\
    \  -- Hint: you can use the table.sort function.\n  -- Hint: you can use the table.sort\
    \ function.\n  -- Hint: you can use the table.sort function.\n  -- Hint: you can\
    \ use the table.sort function.\n  -- Hint: you can use the table.sort function.\n\
    \  -- Hint: you can use the table.sort function.\n  -- Hint: you can use the table.sort\
    \ function.\n  -- Hint: you can use the table.sort function.\n  -- Hint: you can\
    \ use the table.sort function.\n  -- H", "    local n = #l\n    for i = 1, n do\n\
    \        for j = i + 1, n do\n            for k = j + 1, n do\n              \
    \  if l[i] + l[j] + l[k] == 0 then\n                    return true\n        \
    \        end\n            end\n        end\n    end\n    return false\nend", " \
    \   -- TODO: implement this function\n    -- Hint: you may want to use the function\
    \ `table.sort`\n    -- which sorts a table in place.\n    -- You can find more\
    \ information about this function here:\n    -- https://www.lua.org/manual/5.3/manual.html#pdf-table.sort\n\
    \    -- You can also use the function `table.concat` to turn a table\n    -- into\
    \ a string.\n    -- You can find more information about this function here:\n\
    \    -- https://www.lua.org/manual/5.3/manual.html#pdf-table.concat\n    -- You\
    \ can also use the function `table.insert` to insert an element\n    -- into a\
    \ table.\n    -- You can find more information about this function here:\n   \
    \ -- https://www.lua.org/manual/5.3/manual.html#pdf-table.insert\n    -- You can\
    \ also use the function `table.remove` to remove an element\n    -- from a table.\n\
    \    -- You can find more information about this function here:\n    -- https://www.lua.org/manual/5.3/manual.html#pdf-table.remove\n\
    \    -- You can also use the function `table.getn` to get the length of a table.\n\
    \    -- You can find more information about this function here:\n    -- https://www.lua.org/manual/5.3/manual.html#pdf-table.getn\n\
    \    -- You can also use the function `table.maxn` to get the length of a table.\n\
    \    -- You can find more information about this function here:\n    -- https://www.lua.org/manual/5.3/manual.html#pdf-table.maxn\n\
    \    -- You can also use the function `table.foreach` to iterate over a table.\n\
    \    -- You can find more information about this function here:\n    -- https://www.lua.org/manual/5.3/manual.html#pdf-table.foreach\n\
    \    -- You can also use the function `table.foreachi` to iterate over a table.\n\
    \    -- You can find more information about this function here:\n    -- https://",
  "    -- TODO: implement this function\n    for i = 1, #l do\n        for j = i +\
    \ 1, #l do\n            for k = j + 1, #l do\n                if l[i] + l[j] +\
    \ l[k] == 0 then\n                    return true\n                end\n     \
    \       end\n        end\n    end\n    return false\nend", "    for i = 1, #l\
    \ do\n        for j = i + 1, #l do\n            for k = j + 1, #l do\n       \
    \         if l[i] + l[j] + l[k] == 0 then\n                    return true\n \
    \               end\n            end\n        end\n    end\n    return false\n\
    end", "    local n = #l\n    if n < 3 then\n        return false\n    end\n  \
    \  for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j\
    \ + 1, n do\n                if l[i] + l[j] + l[k] == 0 then\n               \
    \     return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n\
    \            for k = j + 1, #l do\n                if l[i] + l[j] + l[k] == 0\
    \ then\n                    return true\n                end\n            end\n\
    \        end\n    end\n    return false\nend", "  local i = 1\n  local j = 1\n\
    \  local k = 1\n  while i <= #l do\n    while j <= #l do\n      while k <= #l\
    \ do\n        if i ~= j and i ~= k and j ~= k and l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n        k = k + 1\n      end\n      j = j\
    \ + 1\n    end\n    i = i + 1\n  end\n  return false\nend", "    for i = 1, #l\
    \ do\n        for j = i + 1, #l do\n            for k = j + 1, #l do\n       \
    \         if l[i] + l[j] + l[k] == 0 then\n                    return true\n \
    \               end\n            end\n        end\n    end\n    return false\n\
    end", "    local n = #l\n    if n < 3 then\n        return false\n    end\n  \
    \  for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j\
    \ + 1, n do\n                if l[i] + l[j] + l[k] == 0 then\n               \
    \     return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "    local n = #l\n    if n < 3 then\n        return\
    \ false\n    end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n \
    \           for k = j + 1, n do\n                if l[i] + l[j] + l[k] == 0 then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend", "  for i = 1, #l do\n    for j = i +\
    \ 1, #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k =\
    \ j + 1, #l do\n                if l[i] + l[j] + l[k] == 0 then\n            \
    \        return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "    for i, v in ipairs(l) do\n        for j, w in ipairs(l)\
    \ do\n            for k, x in ipairs(l) do\n                if v ~= w and w ~=\
    \ x and v ~= x and v + w + x == 0 then\n                    return true\n    \
    \            end\n            end\n        end\n    end\n    return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "    local t = {}\n    for _, v in ipairs(l) do\n     \
    \   t[v] = true\n    end\n    for _, v in ipairs(l) do\n        for _, v2 in ipairs(l)\
    \ do\n            if v ~= v2 and t[-v - v2] then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "    -- your code here\n  \
    \  for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "    -- TODO: implement this function\nend", "  local seen\
    \ = {}\n  for i = 1, #l do\n    for j = i + 1, #l do\n      if seen[-l[i] - l[j]]\
    \ then\n        return true\n      end\n      seen[l[j]] = true\n    end\n   \
    \ seen = {}\n  end\n  return false\nend", "    local n = #l\n    if n < 3 then\n\
    \        return false\n    end\n    for i = 1, n do\n        for j = i + 1, n\
    \ do\n            for k = j + 1, n do\n                if l[i] + l[j] + l[k] ==\
    \ 0 then\n                    return true\n                end\n            end\n\
    \        end\n    end\n    return false\nend", "  for i = 1, #l do\n    for j\
    \ = i + 1, #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] ==\
    \ 0 then\n          return true\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n      for k = j\
    \ + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return true\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "    -- TODO: implement\
    \ this function\n    return false\nend", "  for i = 1, #l do\n    for j = i +\
    \ 1, #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "    local sum = 0\n    for i = 1, #l do\n        for j = i + 1, #l do\n\
    \            for k = j + 1, #l do\n                sum = l[i] + l[j] + l[k]\n\
    \                if sum == 0 then\n                    return true\n         \
    \       end\n            end\n        end\n    end\n    return false\nend", " \
    \   for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "    local function helper(l, i, j, k)\n        if i >\
    \ #l then\n            return false\n        elseif j > #l then\n            return\
    \ helper(l, i + 1, i + 2, i + 3)\n        elseif k > #l then\n            return\
    \ helper(l, i, j + 1, j + 2)\n        elseif l[i] + l[j] + l[k] == 0 then\n  \
    \          return true\n        else\n            return helper(l, i, j, k + 1)\n\
    \        end\n    end\n    return helper(l, 1, 2, 3)\nend", "  local n = #l\n\
    \  if n < 3 then\n    return false\n  end\n  for i = 1, n - 2 do\n    for j =\
    \ i + 1, n - 1 do\n      for k = j + 1, n do\n        if l[i] + l[j] + l[k] ==\
    \ 0 then\n          return true\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n         \
    \   for k = j + 1, #l do\n                if l[i] + l[j] + l[k] == 0 then\n  \
    \                  return true\n                end\n            end\n       \
    \ end\n    end\n    return false\nend", "\tlocal i, j, k = 1, 1, 1\n\tlocal n\
    \ = #l\n\twhile i <= n do\n\t\tj = i + 1\n\t\twhile j <= n do\n\t\t\tk = j + 1\n\
    \t\t\twhile k <= n do\n\t\t\t\tif l[i] + l[j] + l[k] == 0 then\n\t\t\t\t\treturn\
    \ true\n\t\t\t\tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\
    \ti = i + 1\n\tend\n\treturn false\nend", "  for i = 1, #l do\n    for j = i +\
    \ 1, #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "  -- TODO: implement this function\n  return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "    for i = 1, #l do\n        for j =\
    \ i + 1, #l do\n            for k = j + 1, #l do\n                if l[i] + l[j]\
    \ + l[k] == 0 then\n                    return true\n                end\n   \
    \         end\n        end\n    end\n    return false\nend", "    local n = #l\n\
    \    if n < 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n \
    \       for j = i + 1, n - 1 do\n            for k = j + 1, n do\n           \
    \     if l[i] + l[j] + l[k] == 0 then\n                    return true\n     \
    \           end\n            end\n        end\n    end\n    return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n      for\
    \ k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "    --\
    \ TODO: implement this function\n    return false\nend", "  local n = #l\n  if\
    \ n < 3 then\n    return false\n  end\n  for i = 1, n - 2 do\n    for j = i +\
    \ 1, n - 1 do\n      for k = j + 1, n do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "  local n = #l\n  if n < 3 then\n    return false\n  end\n  for i = 1,\
    \ n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if\
    \ l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "  -- TODO: implement this function\n \
    \ return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n      for\
    \ k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "  for i\
    \ = 1, #l do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n        if\
    \ l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "  local n = #l\n  if n < 3 then\n    return\
    \ false\n  end\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for\
    \ k = j + 1, n do\n        if l[i] + l[j] + l[k] == 0 then\n          return true\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "    for i = 1, #l do\n        for j =\
    \ i + 1, #l do\n            for k = j + 1, #l do\n                if l[i] + l[j]\
    \ + l[k] == 0 then\n                    return true\n                end\n   \
    \         end\n        end\n    end\n    return false\nend", "  -- YOUR CODE HERE\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  while i <= #l do\n    while j\
    \ <= #l do\n      while k <= #l do\n        if i ~= j and i ~= k and j ~= k then\n\
    \          if l[i] + l[j] + l[k] == 0 then\n            return true\n        \
    \  end\n        end\n        k = k + 1\n      end\n      j = j + 1\n      k =\
    \ 1\n    end\n    i = i + 1\n    j = 1\n  end\n  return false\nend", "    local\
    \ function find_triple(l)\n        for i, a in ipairs(l) do\n            for j,\
    \ b in ipairs(l) do\n                for k, c in ipairs(l) do\n              \
    \      if i ~= j and i ~= k and j ~= k then\n                        if a + b\
    \ + c == 0 then\n                            return true\n                   \
    \     end\n                    end\n                end\n            end\n   \
    \     end\n        return false\n    end\n    return find_triple(l)\nend", " \
    \   -- TODO: implement this function\n    return false\nend", "    -- TODO: implement\
    \ this function\n    return false\nend", "    local n = #l\n    for i = 1, n -\
    \ 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n   \
    \             if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  -- YOUR CODE HERE\n  local t = {}\n  for i = 1, #l do\n    for j = i\
    \ + 1, #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "    -- YOUR CODE HERE\n    for i = 1, #l do\n        for j = i + 1, #l\
    \ do\n            for k = j + 1, #l do\n                if l[i] + l[j] + l[k]\
    \ == 0 then\n                    return true\n                end\n          \
    \  end\n        end\n    end\n    return false\nend", "  -- YOUR CODE HERE\n \
    \ local count = 0\n  for i = 1, #l do\n    for j = i+1, #l do\n      for k = j+1,\
    \ #l do\n        if l[i] + l[j] + l[k] == 0 then\n          count = count + 1\n\
    \        end\n      end\n    end\n  end\n  if count > 0 then\n    return true\n\
    \  else\n    return false\n  end\nend", "  for i = 1, #l do\n    for j = i + 1,\
    \ #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "    local n = #l\n    for i = 1, n do\n        for j = i + 1, n do\n  \
    \          for k = j + 1, n do\n                if l[i] + l[j] + l[k] == 0 then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend", "    for i = 1, #l do\n        for j\
    \ = i + 1, #l do\n            for k = j + 1, #l do\n                if l[i] +\
    \ l[j] + l[k] == 0 then\n                    return true\n                end\n\
    \            end\n        end\n    end\n    return false\nend", "    for i = 1,\
    \ #l do\n        for j = i + 1, #l do\n            for k = j + 1, #l do\n    \
    \            if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  local n = #l\n  if n < 3 then\n    return false\n  end\n  for i = 1,\
    \ n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if\
    \ l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "  -- TODO: implement this function.\n\
    \  -- You may want to use the function `sort_table` defined above.\n  local sorted\
    \ = sort_table(l)\n  local i = 1\n  local j = 1\n  local k = 1\n  while i <= #sorted\
    \ do\n    j = i + 1\n    k = #sorted\n    while j < k do\n      if sorted[i] +\
    \ sorted[j] + sorted[k] == 0 then\n        return true\n      elseif sorted[i]\
    \ + sorted[j] + sorted[k] > 0 then\n        k = k - 1\n      else\n        j =\
    \ j + 1\n      end\n    end\n    i = i + 1\n  end\n  return false\nend", "   \
    \ local n = #l\n    if n < 3 then\n        return false\n    end\n    for i =\
    \ 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n\
    \                if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  -- TODO: implement this function\n  return false\nend", "  -- TODO: implement\
    \ this function\n  -- Hint: you may want to use the function `sort`\n  -- which\
    \ is defined above.\n  -- Hint: you may want to use the function `binary_search`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_2`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_3`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_4`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_5`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_6`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_7`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_8`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_9`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_10`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_11`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_helper_12`\n\
    \  -- which is defined above.\n  -- Hint: you may want to use the function `triples_sum_to_zero_",
  "    local n = #l\n    if n < 3 then\n        return false\n    end\n    for i =\
    \ 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n\
    \                if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  -- TODO: implement this function\n  return false\nend", "  -- TODO: implement\
    \ this function\n  -- Hint: use the function you wrote in the previous exercise\n\
    \  -- to help you implement this one.\n  -- Hint: you may want to use a helper\
    \ function.\n  -- Hint: you may want to use a table to keep track of\n  -- which\
    \ numbers you've seen.\n  -- Hint: you may want to use a table to keep track of\n\
    \  -- which pairs of numbers you've seen.\n  -- Hint: you may want to use a table\
    \ to keep track of\n  -- which triples of numbers you've seen.\n  -- Hint: you\
    \ may want to use a table to keep track of\n  -- which numbers you've seen.\n\
    \  -- Hint: you may want to use a table to keep track of\n  -- which pairs of\
    \ numbers you've seen.\n  -- Hint: you may want to use a table to keep track of\n\
    \  -- which triples of numbers you've seen.\n  -- Hint: you may want to use a\
    \ table to keep track of\n  -- which numbers you've seen.\n  -- Hint: you may\
    \ want to use a table to keep track of\n  -- which pairs of numbers you've seen.\n\
    \  -- Hint: you may want to use a table to keep track of\n  -- which triples of\
    \ numbers you've seen.\n  -- Hint: you may want to use a table to keep track of\n\
    \  -- which numbers you've seen.\n  -- Hint: you may want to use a table to keep\
    \ track of\n  -- which pairs of numbers you've seen.\n  -- Hint: you may want\
    \ to use a table to keep track of\n  -- which triples of numbers you've seen.\n\
    \  -- Hint: you may want to use a table to keep track of\n  -- which numbers you've\
    \ seen.\n  -- Hint: you may want to use a table to keep track of\n  -- which pairs\
    \ of numbers you've seen.\n  -- Hint: you may want to use a table to keep track\
    \ of\n  -- which triples of numbers you've seen.\n  -- Hint: you may want to use\
    \ a table to keep track of\n  -- which numbers you've seen.\n  -- Hint: you may\
    \ want to use a table to keep track of\n  -- which pairs", "    local n = #l\n\
    \    if n < 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n \
    \       for j = i + 1, n - 1 do\n            for k = j + 1, n do\n           \
    \     if l[i] + l[j] + l[k] == 0 then\n                    return true\n     \
    \           end\n            end\n        end\n    end\n    return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n \
    \           for k = j + 1, #l do\n                if l[i] + l[j] + l[k] == 0 then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend", "  local n = #l\n  for i = 1, n do\n\
    \    for j = i + 1, n do\n      for k = j + 1, n do\n        if l[i] + l[j] +\
    \ l[k] == 0 then\n          return true\n        end\n      end\n    end\n  end\n\
    \  return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n \
    \           for k = j + 1, #l do\n                if l[i] + l[j] + l[k] == 0 then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend", "    -- TODO: implement this function\n\
    \    return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n\
    \            for k = j + 1, #l do\n                if l[i] + l[j] + l[k] == 0\
    \ then\n                    return true\n                end\n            end\n\
    \        end\n    end\n    return false\nend", "    -- check if there are at least\
    \ three elements in the list\n    if #l < 3 then\n        return false\n    end",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "    local n = #l\n    for i = 1, n do\n        for j =\
    \ i + 1, n do\n            for k = j + 1, n do\n                if l[i] + l[j]\
    \ + l[k] == 0 then\n                    return true\n                end\n   \
    \         end\n        end\n    end\n    return false\nend", "    local n = #l\n\
    \    if n < 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n \
    \       for j = i + 1, n - 1 do\n            for k = j + 1, n do\n           \
    \     if l[i] + l[j] + l[k] == 0 then\n                    return true\n     \
    \           end\n            end\n        end\n    end\n    return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n      for\
    \ k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1, #l do\n\
    \                if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  local t = {}\n  for i, v in ipairs(l) do\n    t[v] = true\n  end\n  for\
    \ i, v in ipairs(l) do\n    for j, w in ipairs(l) do\n      if i ~= j then\n \
    \       if t[-v-w] then\n          return true\n        end\n      end\n    end\n\
    \  end\n  return false\nend", "  -- YOUR CODE HERE\n  -- hint: use the function\
    \ you wrote above\n  for i = 1, #l do\n    for j = i + 1, #l do\n      for k =\
    \ j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return true\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "  local n = #l\n\
    \  if n < 3 then\n    return false\n  end\n  for i = 1, n - 2 do\n    for j =\
    \ i + 1, n - 1 do\n      for k = j + 1, n do\n        if l[i] + l[j] + l[k] ==\
    \ 0 then\n          return true\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n         \
    \   for k = j + 1, #l do\n                if l[i] + l[j] + l[k] == 0 then\n  \
    \                  return true\n                end\n            end\n       \
    \ end\n    end\n    return false\nend", "    for i = 1, #l do\n        for j =\
    \ i + 1, #l do\n            for k = j + 1, #l do\n                if l[i] + l[j]\
    \ + l[k] == 0 then\n                    return true\n                end\n   \
    \         end\n        end\n    end\n    return false\nend", "    local n = #l\n\
    \    if n < 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n \
    \       for j = i + 1, n - 1 do\n            for k = j + 1, n do\n           \
    \     if l[i] + l[j] + l[k] == 0 then\n                    return true\n     \
    \           end\n            end\n        end\n    end\n    return false\nend",
  "    -- TODO: implement this function\n    return false\nend", "    local n = #l\n\
    \    if n < 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n \
    \       for j = i + 1, n - 1 do\n            for k = j + 1, n do\n           \
    \     if l[i] + l[j] + l[k] == 0 then\n                    return true\n     \
    \           end\n            end\n        end\n    end\n    return false\nend",
  "    -- your code here\n    return false\nend", "    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            for k = j + 1, #l do\n                if l[i]\
    \ + l[j] + l[k] == 0 then\n                    return true\n                end\n\
    \            end\n        end\n    end\n    return false\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "    local seen = {}\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            local sum = l[i] + l[j]\n\
    \            if seen[-sum] then\n                return true\n            end\n\
    \            seen[l[j]] = true\n        end\n    end\n    return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n \
    \           for k = j + 1, #l do\n                if l[i] + l[j] + l[k] == 0 then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend", "    local n = #l\n    if n < 3 then\n\
    \        return false\n    end\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if l[i] + l[j] +\
    \ l[k] == 0 then\n                    return true\n                end\n     \
    \       end\n        end\n    end\n    return false\nend", "    for i = 1, #l\
    \ do\n        for j = i + 1, #l do\n            for k = j + 1, #l do\n       \
    \         if l[i] + l[j] + l[k] == 0 then\n                    return true\n \
    \               end\n            end\n        end\n    end\n    return false\n\
    end", "  for i = 1, #l do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n\
    \        if l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n\
    \      end\n    end\n  end\n  return false\nend", "  local n = #l\n  if n < 3\
    \ then\n    return false\n  end\n  for i = 1, n - 2 do\n    for j = i + 1, n -\
    \ 1 do\n      for k = j + 1, n do\n        if l[i] + l[j] + l[k] == 0 then\n \
    \         return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "  -- YOUR CODE HERE\n  local t = {}\n  for i = 1, #l do\n    for j = i\
    \ + 1, #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "\tfor i, v in ipairs(l) do\n\t\tfor j, w in ipairs(l) do\n\t\t\tfor k,\
    \ x in ipairs(l) do\n\t\t\t\tif i ~= j and i ~= k and j ~= k then\n\t\t\t\t\t\
    if v + w + x == 0 then\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn false\nend", "    for i = 1, #l do\n       \
    \ for j = i + 1, #l do\n            for k = j + 1, #l do\n                if l[i]\
    \ + l[j] + l[k] == 0 then\n                    return true\n                end\n\
    \            end\n        end\n    end\n    return false\nend", "    local function\
    \ helper(l, i, j, k)\n        if i > #l then\n            return false\n     \
    \   elseif j > #l then\n            return helper(l, i + 1, i + 2, i + 3)\n  \
    \      elseif k > #l then\n            return helper(l, i, j + 1, j + 2)\n   \
    \     elseif l[i] + l[j] + l[k] == 0 then\n            return true\n        else\n\
    \            return helper(l, i, j, k + 1)\n        end\n    end\n    return helper(l,\
    \ 1, 2, 3)\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n      \
    \      for k = j + 1, #l do\n                if l[i] + l[j] + l[k] == 0 then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend", "  local t = {}\n  for i, v in ipairs(l)\
    \ do\n    t[v] = true\n  end\n  for i, v in ipairs(l) do\n    for j, w in ipairs(l)\
    \ do\n      if i ~= j then\n        if t[-v-w] then\n          return true\n \
    \       end\n      end\n    end\n  end\n  return false\nend", "    -- YOUR CODE\
    \ HERE\n    for i, v in ipairs(l) do\n        for j, w in ipairs(l) do\n     \
    \       for k, x in ipairs(l) do\n                if v + w + x == 0 and i ~= j\
    \ and i ~= k and j ~= k then\n                    return true\n              \
    \  end\n            end\n        end\n    end\n    return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "    for i = 1, #l do\n     \
    \   for j = i + 1, #l do\n            for k = j + 1, #l do\n                if\
    \ l[i] + l[j] + l[k] == 0 then\n                    return true\n            \
    \    end\n            end\n        end\n    end\n    return false\nend", "  local\
    \ n = #l\n  if n < 3 then\n    return false\n  end\n  for i = 1, n - 2 do\n  \
    \  for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if l[i] + l[j]\
    \ + l[k] == 0 then\n          return true\n        end\n      end\n    end\n \
    \ end\n  return false\nend", "  -- YOUR CODE HERE\n  for i, v in ipairs(l) do\n\
    \    for j, w in ipairs(l) do\n      for k, x in ipairs(l) do\n        if v +\
    \ w + x == 0 and i ~= j and i ~= k and j ~= k then\n          return true\n  \
    \      end\n      end\n    end\n  end\n  return false\nend", "    -- TODO: implement\
    \ this function\n    -- Hint: you may want to use the function `table.sort`\n\
    \    -- Hint: you may want to use the function `table.concat`\n    -- Hint: you\
    \ may want to use the function `table.remove`\n    -- Hint: you may want to use\
    \ the function `table.insert`\n    -- Hint: you may want to use the function `table.unpack`\n\
    \    -- Hint: you may want to use the function `table.pack`\n    -- Hint: you\
    \ may want to use the function `table.concat`\n    -- Hint: you may want to use\
    \ the function `table.remove`\n    -- Hint: you may want to use the function `table.insert`\n\
    \    -- Hint: you may want to use the function `table.unpack`\n    -- Hint: you\
    \ may want to use the function `table.pack`\n    -- Hint: you may want to use\
    \ the function `table.concat`\n    -- Hint: you may want to use the function `table.remove`\n\
    \    -- Hint: you may want to use the function `table.insert`\n    -- Hint: you\
    \ may want to use the function `table.unpack`\n    -- Hint: you may want to use\
    \ the function `table.pack`\n    -- Hint: you may want to use the function `table.concat`\n\
    \    -- Hint: you may want to use the function `table.remove`\n    -- Hint: you\
    \ may want to use the function `table.insert`\n    -- Hint: you may want to use\
    \ the function `table.unpack`\n    -- Hint: you may want to use the function `table.pack`\n\
    \    -- Hint: you may want to use the function `table.concat`\n    -- Hint: you\
    \ may want to use the function `table.remove`\n    -- Hint: you may want to use\
    \ the function `table.insert`\n    -- Hint: you may want to use the function `table.unpack`\n\
    \    -- Hint: you may want to use the function `table.pack`\n    -- Hint: you\
    \ may want to use the function `table.concat`\n    -- Hint:", "    -- YOUR CODE\
    \ HERE\n    return false\nend", "  -- TODO: implement this function\n  local result\
    \ = false\n  for i = 1, #l do\n    for j = i + 1, #l do\n      for k = j + 1,\
    \ #l do\n        if l[i] + l[j] + l[k] == 0 then\n          result = true\n  \
    \      end\n      end\n    end\n  end\n  return result\nend", "    -- YOUR CODE\
    \ HERE\n    return false\nend", "  -- your code here\n  local n = #l\n  for i\
    \ = 1, n do\n    for j = i + 1, n do\n      for k = j + 1, n do\n        if l[i]\
    \ + l[j] + l[k] == 0 then\n          return true\n        end\n      end\n   \
    \ end\n  end\n  return false\nend", "    local n = #l\n    if n < 3 then\n   \
    \     return false\n    end\n    local i = 1\n    while i <= n do\n        local\
    \ j = i + 1\n        while j <= n do\n            local k = j + 1\n          \
    \  while k <= n do\n                if l[i] + l[j] + l[k] == 0 then\n        \
    \            return true\n                end\n                k = k + 1\n   \
    \         end\n            j = j + 1\n        end\n        i = i + 1\n    end\n\
    \    return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n     \
    \ for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "    local\
    \ n = #l\n    if n < 3 then\n        return false\n    end\n    local i = 1\n\
    \    while i <= n do\n        local j = i + 1\n        while j <= n do\n     \
    \       local k = j + 1\n            while k <= n do\n                if l[i]\
    \ + l[j] + l[k] == 0 then\n                    return true\n                end\n\
    \                k = k + 1\n            end\n            j = j + 1\n        end\n\
    \        i = i + 1\n    end\n    return false\nend", "    local n = #l\n    if\
    \ n < 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n       \
    \ for j = i + 1, n - 1 do\n            for k = j + 1, n do\n                if\
    \ l[i] + l[j] + l[k] == 0 then\n                    return true\n            \
    \    end\n            end\n        end\n    end\n    return false\nend", "  --\
    \ YOUR CODE HERE\n  --[[\n  for i = 1, #l do\n    for j = i + 1, #l do\n     \
    \ for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\n  ]]\n  for i\
    \ = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == -l[i] - l[j] then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1, #l do\n\
    \                if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k =\
    \ j + 1, #l do\n                if l[i] + l[j] + l[k] == 0 then\n            \
    \        return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n\
    \            for k = j + 1, #l do\n                if l[i] + l[j] + l[k] == 0\
    \ then\n                    return true\n                end\n            end\n\
    \        end\n    end\n    return false\nend", "    local n = #l\n    if n < 3\
    \ then\n        return false\n    end\n    for i = 1, n - 2 do\n        for j\
    \ = i + 1, n - 1 do\n            for k = j + 1, n do\n                if l[i]\
    \ + l[j] + l[k] == 0 then\n                    return true\n                end\n\
    \            end\n        end\n    end\n    return false\nend", "    for i = 1,\
    \ #l do\n        for j = i + 1, #l do\n            for k = j + 1, #l do\n    \
    \            if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "    -- your code here\n    local sum = 0\n    local count = 0\n    for\
    \ i, v in ipairs(l) do\n        for j, w in ipairs(l) do\n            for k, x\
    \ in ipairs(l) do\n                if i ~= j and i ~= k and j ~= k then\n    \
    \                sum = v + w + x\n                    if sum == 0 then\n     \
    \                   count = count + 1\n                    end\n             \
    \   end\n            end\n        end\n    end\n    if count > 0 then\n      \
    \  return true\n    else\n        return false\n    end\nend", "  for i = 1, #l\
    \ do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n        if l[i] +\
    \ l[j] + l[k] == 0 then\n          return true\n        end\n      end\n    end\n\
    \  end\n  return false\nend", "  local n = #l\n  if n < 3 then\n    return false\n\
    \  end\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j +\
    \ 1, n do\n        if l[i] + l[j] + l[k] == 0 then\n          return true\n  \
    \      end\n      end\n    end\n  end\n  return false\nend", "  local seen = {}\n\
    \  for i, v in ipairs(l) do\n    seen[v] = true\n  end\n  for i, v in ipairs(l)\
    \ do\n    for j, w in ipairs(l) do\n      if i ~= j then\n        local x = -(v\
    \ + w)\n        if seen[x] then\n          return true\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "    for i = 1, #l do\n        for j =\
    \ i + 1, #l do\n            for k = j + 1, #l do\n                if l[i] + l[j]\
    \ + l[k] == 0 then\n                    return true\n                end\n   \
    \         end\n        end\n    end\n    return false\nend", "    local t = {}\n\
    \    for i, v in ipairs(l) do\n        t[v] = i\n    end\n    for i, v in ipairs(l)\
    \ do\n        for j, w in ipairs(l) do\n            if i ~= j then\n         \
    \       local k = -(v + w)\n                if t[k] and t[k] ~= i and t[k] ~=\
    \ j then\n                    return true\n                end\n            end\n\
    \        end\n    end\n    return false\nend", "    local n = #l\n    if n < 3\
    \ then\n        return false\n    end\n    for i = 1, n - 2 do\n        for j\
    \ = i + 1, n - 1 do\n            for k = j + 1, n do\n                if l[i]\
    \ + l[j] + l[k] == 0 then\n                    return true\n                end\n\
    \            end\n        end\n    end\n    return false\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "    for i = 1, #l do\n   \
    \     for j = i + 1, #l do\n            for k = j + 1, #l do\n               \
    \ if l[i] + l[j] + l[k] == 0 then\n                    return true\n         \
    \       end\n            end\n        end\n    end\n    return false\nend", " \
    \   for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n      for\
    \ k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "  local\
    \ t = {}\n  for i, v in ipairs(l) do\n    t[v] = true\n  end\n  for i, v in ipairs(l)\
    \ do\n    for j, w in ipairs(l) do\n      if i ~= j then\n        if t[-v-w] then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k =\
    \ j + 1, #l do\n                if l[i] + l[j] + l[k] == 0 then\n            \
    \        return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n     \
    \ for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "  for i\
    \ = 1, #l do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n        if\
    \ l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "    local n = #l\n    if n < 3 then\n\
    \        return false\n    end\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if l[i] + l[j] +\
    \ l[k] == 0 then\n                    return true\n                end\n     \
    \       end\n        end\n    end\n    return false\nend", "  -- YOUR CODE HERE\n\
    \  local t = {}\n  for i = 1, #l do\n    for j = i + 1, #l do\n      for k = j\
    \ + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return true\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "  for i = 1, #l\
    \ do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n        if l[i] +\
    \ l[j] + l[k] == 0 then\n          return true\n        end\n      end\n    end\n\
    \  end\n  return false\nend", "  local n = #l\n  if n < 3 then\n    return false\n\
    \  end\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j +\
    \ 1, n do\n        if l[i] + l[j] + l[k] == 0 then\n          return true\n  \
    \      end\n      end\n    end\n  end\n  return false\nend", "    local n = #l\n\
    \    if n < 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n \
    \       for j = i + 1, n - 1 do\n            for k = j + 1, n do\n           \
    \     if l[i] + l[j] + l[k] == 0 then\n                    return true\n     \
    \           end\n            end\n        end\n    end\n    return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "  local n = #l\n  if n < 3 then\n    return false\n  end\n\
    \  for i = 1, n do\n    for j = i + 1, n do\n      for k = j + 1, n do\n     \
    \   if l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n    \
    \  end\n    end\n  end\n  return false\nend", "  -- TODO: implement this function\n\
    \  -- Hint: use the function you wrote in the previous exercise\n  -- to check\
    \ if there are two elements that sum to zero.\n  -- If there are, then you can\
    \ return true.\n  -- If there are not, then you can return false.\n  -- You can\
    \ use a for loop to iterate over the elements of the table.\n  -- You can use\
    \ the function pairs to iterate over the elements of the table.\n  -- You can\
    \ use the function ipairs to iterate over the elements of the table.\n  -- You\
    \ can use the function table.sort to sort the elements of the table.\n  -- You\
    \ can use the function table.concat to concatenate the elements of the table.\n\
    \  -- You can use the function table.insert to insert an element into the table.\n\
    \  -- You can use the function table.remove to remove an element from the table.\n\
    \  -- You can use the function table.unpack to unpack the elements of the table.\n\
    \  -- You can use the function table.pack to pack the elements of the table.\n\
    \  -- You can use the function table.maxn to find the maximum number of elements\
    \ in the table.\n  -- You can use the function table.getn to find the number of\
    \ elements in the table.\n  -- You can use the function table.setn to set the\
    \ number of elements in the table.\n  -- You can use the function table.foreach\
    \ to iterate over the elements of the table.\n  -- You can use the function table.foreachi\
    \ to iterate over the elements of the table.\n  -- You can use the function table.move\
    \ to move the elements of the table.\n  -- You can use the function table.sort\
    \ to sort the elements of the table.\n  -- You can use the function table.insert\
    \ to insert an element into the table.\n  -- You can use the function table.remove\
    \ to remove an element from the table.\n  -- You can use the function table.concat\
    \ to concatenate the elements of the table.\n  -- You can use the function table.maxn\
    \ to find the maximum number of elements in the table.\n  -- You can use the function\
    \ table.getn to find the number of elements in the table.\n  -- You can use the\
    \ function table.setn to set the", "    -- TODO: implement this function\n   \
    \ return false\nend", "    local t = {}\n    for i, v in ipairs(l) do\n      \
    \  t[v] = true\n    end\n    for i, v in ipairs(l) do\n        for j, w in ipairs(l)\
    \ do\n            if i ~= j then\n                if t[-v-w] then\n          \
    \          return true\n                end\n            end\n        end\n  \
    \  end\n    return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n\
    \      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n       \
    \   return true\n        end\n      end\n    end\n  end\n  return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            for k = j + 1,\
    \ #l do\n                if l[i] + l[j] + l[k] == 0 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend", "    -- TODO: implement this function\n    return false\n\
    end", "    -- TODO: implement this function\n    return false\nend", "    local\
    \ n = #l\n    if n < 3 then\n        return false\n    end\n    for i = 1, n -\
    \ 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n   \
    \             if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "    local n = #l\n    if n < 3 then\n        return false\n    end\n  \
    \  for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j\
    \ + 1, n do\n                if l[i] + l[j] + l[k] == 0 then\n               \
    \     return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n     \
    \ for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "  for i\
    \ = 1, #l do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n        if\
    \ l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "  for i = 1, #l do\n    for j = i + 1,\
    \ #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "  -- YOUR CODE HERE\n  local n = #l\n  if n < 3 then\n    return false\n\
    \  end\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j +\
    \ 1, n do\n        if l[i] + l[j] + l[k] == 0 then\n          return true\n  \
    \      end\n      end\n    end\n  end\n  return false\nend", "  local n = #l\n\
    \  if n < 3 then\n    return false\n  end\n  for i = 1, n - 2 do\n    for j =\
    \ i + 1, n - 1 do\n      for k = j + 1, n do\n        if l[i] + l[j] + l[k] ==\
    \ 0 then\n          return true\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "  for i, a in ipairs(l) do\n    for j, b in ipairs(l) do\n   \
    \   for k, c in ipairs(l) do\n        if i ~= j and i ~= k and j ~= k and a +\
    \ b + c == 0 then\n          return true\n        end\n      end\n    end\n  end\n\
    \  return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n      for\
    \ k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "    local\
    \ n = #l\n    if n < 3 then\n        return false\n    end\n    for i = 1, n -\
    \ 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n   \
    \             if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  -- TODO: implement this function\n  -- Hint: use the function you wrote\
    \ for the previous question\n  -- to check if a table contains a given value.\n\
    \  -- Hint: you can use the pairs function to iterate over the elements\n  --\
    \ of a table.\n  -- Hint: you can use the table.sort function to sort a table.\n\
    \  -- Hint: you can use the table.concat function to concatenate\n  -- a table\
    \ into a string.\n  -- Hint: you can use the string.format function to format\
    \ a string.\n  -- Hint: you can use the string.sub function to get a substring.\n\
    \  -- Hint: you can use the string.len function to get the length of a string.\n\
    \  -- Hint: you can use the string.byte function to get the ASCII value of a character.\n\
    \  -- Hint: you can use the string.char function to get the character corresponding\
    \ to an ASCII value.\n  -- Hint: you can use the string.gsub function to replace\
    \ all occurrences of a pattern in a string.\n  -- Hint: you can use the string.gmatch\
    \ function to iterate over all occurrences of a pattern in a string.\n  -- Hint:\
    \ you can use the string.match function to get the first occurrence of a pattern\
    \ in a string.\n  -- Hint: you can use the string.reverse function to reverse\
    \ a string.\n  -- Hint: you can use the string.upper function to convert a string\
    \ to uppercase.\n  -- Hint: you can use the string.lower function to convert a\
    \ string to lowercase.\n  -- Hint: you can use the string.find function to find\
    \ the first occurrence of a pattern in a string.\n  -- Hint: you can use the string.gfind\
    \ function to iterate over all occurrences of a pattern in a string.\n  -- Hint:\
    \ you can use the string.gsub function to replace all occurrences of a pattern\
    \ in a string.\n  -- Hint: you can use the string.match function to get the first\
    \ occurrence of a pattern in a string.\n  -- Hint: you can use the string.rep\
    \ function to repeat a string.\n  -- Hint: you can use the string.sub function\
    \ to get a substring.\n  -- Hint:", "    for i = 1, #l do\n        for j = i +\
    \ 1, #l do\n            for k = j + 1, #l do\n                if l[i] + l[j] +\
    \ l[k] == 0 then\n                    return true\n                end\n     \
    \       end\n        end\n    end\n    return false\nend", "  local n = #l\n \
    \ if n < 3 then\n    return false\n  end\n  for i = 1, n - 2 do\n    for j = i\
    \ + 1, n - 1 do\n      for k = j + 1, n do\n        if l[i] + l[j] + l[k] == 0\
    \ then\n          return true\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "    -- YOUR CODE HERE\n    return false\nend", "    for i = 1,\
    \ #l do\n        for j = i + 1, #l do\n            for k = j + 1, #l do\n    \
    \            if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  for i = 1, #l do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n\
    \        if l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n\
    \      end\n    end\n  end\n  return false\nend", "    for i = 1, #l do\n    \
    \    for j = i + 1, #l do\n            for k = j + 1, #l do\n                if\
    \ l[i] + l[j] + l[k] == 0 then\n                    return true\n            \
    \    end\n            end\n        end\n    end\n    return false\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  for _, v in ipairs(l)\
    \ do\n    for _, w in ipairs(l) do\n      if v ~= w and t[-v-w] then\n       \
    \ return true\n      end\n    end\n  end\n  return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "    local n = #l\n    if n < 3 then\n\
    \        return false\n    end\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if l[i] + l[j] +\
    \ l[k] == 0 then\n                    return true\n                end\n     \
    \       end\n        end\n    end\n    return false\nend", "    local n = #l\n\
    \    if n < 3 then\n        return false\n    end\n    for i = 1, n do\n     \
    \   for j = i + 1, n do\n            for k = j + 1, n do\n                if l[i]\
    \ + l[j] + l[k] == 0 then\n                    return true\n                end\n\
    \            end\n        end\n    end\n    return false\nend", "    local n =\
    \ #l\n    if n < 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n\
    \        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n          \
    \      if l[i] + l[j] + l[k] == 0 then\n                    return true\n    \
    \            end\n            end\n        end\n    end\n    return false\nend",
  "    local n = #l\n    if n < 3 then\n        return false\n    end\n    for i =\
    \ 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n\
    \                if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "    -- TODO: implement this function\n    return false\nend", "    local\
    \ n = #l\n    if n < 3 then\n        return false\n    end\n    for i = 1, n -\
    \ 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n   \
    \             if l[i] + l[j] + l[k] == 0 then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  for i = 1, #l do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n\
    \        if l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n\
    \      end\n    end\n  end\n  return false\nend", "    local n = #l\n    if n\
    \ < 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n        for\
    \ j = i + 1, n - 1 do\n            for k = j + 1, n do\n                if l[i]\
    \ + l[j] + l[k] == 0 then\n                    return true\n                end\n\
    \            end\n        end\n    end\n    return false\nend", "  local n = #l\n\
    \  if n < 3 then\n    return false\n  end\n  for i = 1, n do\n    for j = i +\
    \ 1, n do\n      for k = j + 1, n do\n        if l[i] + l[j] + l[k] == 0 then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "    local n = #l\n    if n < 3 then\n        return false\n    end\n  \
    \  for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j\
    \ + 1, n do\n                if l[i] + l[j] + l[k] == 0 then\n               \
    \     return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n     \
    \ for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
