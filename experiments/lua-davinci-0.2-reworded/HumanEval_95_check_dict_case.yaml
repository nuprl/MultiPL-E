name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a table, return true if all keys are strings in lower \n-- case\
  \ or all keys are strings in upper case, else return false.\n-- The function should\
  \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
  \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
  \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
  \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
  \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana',\
  \ ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local lower_case = true\n    local upper_case = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) == 'string' then\n            if k:match('%u')\
    \ then\n                lower_case = false\n            else\n               \
    \ upper_case = false\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower_case or upper_case\nend", "    -- TODO:\
    \ Implement this function\n    return false\nend", "    local lower = true\n \
    \   local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if lower and k ~= k:lower() then\n              \
    \  lower = false\n            end\n            if upper and k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend", "    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k ~= k:lower() then\n                lower\
    \ = false\n            end\n            if k ~= k:upper() then\n             \
    \   upper = false\n            end\n        else\n            return false\n \
    \       end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:lower() ~= k then\n                lower = false\n\
    \            end\n            if k:upper() ~= k then\n                upper =\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower or upper\nend", "    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if lower and not k:lower() == k then\n                lower\
    \ = false\n            end\n            if upper and not k:upper() == k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend", "    local lower\
    \ = true\n    local upper = true\n    for key, value in pairs(dict) do\n     \
    \   if type(key) == 'string' then\n            if key:lower() ~= key then\n  \
    \              lower = false\n            end\n            if key:upper() ~= key\
    \ then\n                upper = false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return lower or upper\nend", " \
    \   local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend", "    local lower_case\
    \ = true\n    local upper_case = true\n    for k, v in pairs(dict) do\n      \
    \  if type(k) == 'string' then\n            if k:lower() ~= k then\n         \
    \       lower_case = false\n            end\n            if k:upper() ~= k then\n\
    \                upper_case = false\n            end\n        else\n         \
    \   return false\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    local lower_case = true\n    local upper_case = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == 'string' then\n            if k:lower()\
    \ ~= k then\n                lower_case = false\n            end\n           \
    \ if k:upper() ~= k then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend", "    if #dict == 0 then\n        return false\n    end\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend", "    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n       \
    \     lower = lower and k == string.lower(k)\n            upper = upper and k\
    \ == string.upper(k)\n        else\n            return false\n        end\n  \
    \  end\n    return lower or upper\nend", "    local lower_case = true\n    local\
    \ upper_case = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if k:lower() ~= k then\n                lower_case = false\n\
    \            end\n            if k:upper() ~= k then\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend", "    local lower_case = true\n\
    \    local upper_case = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if lower_case then\n                lower_case\
    \ = lower_case and k == string.lower(k)\n            end\n            if upper_case\
    \ then\n                upper_case = upper_case and k == string.upper(k)\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend", "    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if k:lower() ~= k then\n                lower = false\n  \
    \          end\n            if k:upper() ~= k then\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend", "    -- TODO: Implement this function\nend",
  "    if #dict == 0 then\n        return false\n    end\n    local lowercase = true\n\
    \    local uppercase = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lowercase\
    \ then\n            lowercase = k == k:lower()\n        end\n        if uppercase\
    \ then\n            uppercase = k == k:upper()\n        end\n    end\n    return\
    \ lowercase or uppercase\nend", "    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if lower_case then\n                lower_case = k == string.lower(k)\n\
    \            end\n            if upper_case then\n                upper_case =\
    \ k == string.upper(k)\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower_case or upper_case\nend", "    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k:lower() ~= k then\n                lower\
    \ = false\n            end\n            if k:upper() ~= k then\n             \
    \   upper = false\n            end\n        else\n            return false\n \
    \       end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:lower() ~= k then\n                lower = false\n\
    \            end\n            if k:upper() ~= k then\n                upper =\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower or upper\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
