---
name: HumanEval_26_remove_duplicates
language: lua
prompt: |
  -- From a table of integers, remove all elements that occur more than once.
  -- Keep order of elements left the same as in the input.
  -- >>> remove_duplicates({1, 2, 3, 2, 4})
  -- {1, 3, 4}
  local function remove_duplicates(numbers)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = remove_duplicates
      lu.assertEquals(candidate({}), {})
      lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
      lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1, 4, 5})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        seen[number] = true
        table.insert(result, number)
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, n in ipairs(numbers) do
          if not seen[n] then
              table.insert(result, n)
              seen[n] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- "\tlocal seen = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif
  not seen[number] then\n\t\t\tresult[#result + 1] = number\n\t\t\tseen[number] =
  true\n\t\tend\n\tend\n\treturn result\nend"
- |2-
    local result = {}
    local seen = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              result[#result + 1] = number
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local unique = {}
    for _, number in ipairs(numbers) do
      unique[number] = true
    end
    local result = {}
    for _, number in ipairs(numbers) do
      if unique[number] then
        table.insert(result, number)
        unique[number] = false
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, n in ipairs(numbers) do
          if not seen[n] then
              table.insert(result, n)
              seen[n] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- "\tlocal seen = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif
  not seen[number] then\n\t\t\ttable.insert(result, number)\n\t\t\tseen[number] =
  true\n\t\tend\n\tend\n\treturn result\nend"
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, number in ipairs(numbers) do
          if not unique[number] then
              unique[number] = true
              table.insert(unique, number)
          end
      end
      return unique
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        seen[number] = true
        table.insert(result, number)
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              result[#result + 1] = number
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local result = {}
    local seen = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local result = {}
    local seen = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, number in ipairs(numbers) do
          if not unique[number] then
              unique[number] = true
              table.insert(unique, number)
          end
      end
      return unique
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        seen[number] = true
        table.insert(result, number)
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, n in ipairs(numbers) do
          if not seen[n] then
              seen[n] = true
              table.insert(result, n)
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, n in ipairs(numbers) do
          unique[n] = true
      end
      local result = {}
      for _, n in ipairs(numbers) do
          if unique[n] then
              table.insert(result, n)
              unique[n] = false
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, v in ipairs(numbers) do
          if not seen[v] then
              table.insert(result, v)
              seen[v] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local result = {}
    local seen = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, number in ipairs(numbers) do
          unique[number] = true
      end
      local result = {}
      for number, _ in pairs(unique) do
          table.insert(result, number)
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local unique = {}
    for _, number in ipairs(numbers) do
      unique[number] = true
    end
    local result = {}
    for _, number in ipairs(numbers) do
      if unique[number] then
        table.insert(result, number)
        unique[number] = false
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
    local unique = {}
    for _, number in ipairs(numbers) do
      unique[number] = true
    end
    local result = {}
    for _, number in ipairs(numbers) do
      if unique[number] then
        table.insert(result, number)
        unique[number] = false
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              result[#result + 1] = number
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, n in ipairs(numbers) do
          if not seen[n] then
              table.insert(result, n)
              seen[n] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, v in ipairs(numbers) do
          if not seen[v] then
              table.insert(result, v)
              seen[v] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, number in ipairs(numbers) do
          if not unique[number] then
              unique[number] = true
              table.insert(unique, number)
          end
      end
      return unique
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- "\tlocal seen = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif
  not seen[number] then\n\t\t\ttable.insert(result, number)\n\t\t\tseen[number] =
  true\n\t\tend\n\tend\n\treturn result\nend"
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        seen[number] = true
        table.insert(result, number)
      end
    end
    return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        seen[number] = true
        table.insert(result, number)
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, number in ipairs(numbers) do
          unique[number] = true
      end
      local result = {}
      for _, number in ipairs(numbers) do
          if unique[number] then
              table.insert(result, number)
              unique[number] = false
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, number in ipairs(numbers) do
          unique[number] = true
      end
      local result = {}
      for number, _ in pairs(unique) do
          table.insert(result, number)
      end
      return result
  end
- |2-
      local result = {}
      local seen = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, number in ipairs(numbers) do
          if not unique[number] then
              unique[number] = true
              table.insert(unique, number)
          end
      end
      return unique
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, number in ipairs(numbers) do
          if not unique[number] then
              unique[number] = true
              table.insert(unique, number)
          end
      end
      return unique
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              seen[number] = true
              table.insert(result, number)
          end
      end
      return result
  end
- |2-
      local unique = {}
      for _, number in ipairs(numbers) do
          if not unique[number] then
              unique[number] = true
              table.insert(unique, number)
          end
      end
      return unique
  end
- |2-
    local seen = {}
    local result = {}
    for _, number in ipairs(numbers) do
      if not seen[number] then
        table.insert(result, number)
        seen[number] = true
      end
    end
    return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
- |2-
      local seen = {}
      local result = {}
      for _, number in ipairs(numbers) do
          if not seen[number] then
              table.insert(result, number)
              seen[number] = true
          end
      end
      return result
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
