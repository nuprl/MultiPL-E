---
name: HumanEval_19_sort_numbers
language: lua
results:
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        local num_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        for num in numbers:gmatch('%w+') do
            table.insert(num_list, num_map[num])
        end
        table.sort(num_list)
        local num_str = ''
        for _, num in ipairs(num_list) do
            for k, v in pairs(num_map) do
                if v == num then
                    num_str = num_str .. ' ' .. k
                end
            end
        end
        return num_str:sub(2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = numeral_map[num]
        end
        table.sort(nums)
        local sorted_numbers = {}
        for i, num in ipairs(nums) do
            for numeral, value in pairs(numeral_map) do
                if value == num then
                    sorted_numbers[i] = numeral
                end
            end
        end
        return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm70hy3y3.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpm70hy3y3.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local number_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local numbers_list = {}
        for number in numbers:gmatch('%a+') do
            table.insert(numbers_list, number_map[number])
        end
        table.sort(numbers_list)
        local sorted_numbers = {}
        for _, number in ipairs(numbers_list) do
            for k, v in pairs(number_map) do
                if v == number then
                    table.insert(sorted_numbers, k)
                end
            end
        end
        return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch("%S+") do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj6y5d41.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmphj6y5d41.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2wgylm4.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpf2wgylm4.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%w+') do
            table.insert(nums, numeral_map[num])
        end
        table.sort(nums)
        local num_str = ''
        for _, num in ipairs(nums) do
            for numeral, numeral_num in pairs(numeral_map) do
                if num == numeral_num then
                    num_str = num_str .. numeral .. ' '
                end
            end
        end
        return num_str:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_oc2daa.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpe_oc2daa.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        local num_str = ''
        for num in numbers:gmatch('%S+') do
            table.insert(nums, tonumber(num_to_numeral[num]))
        end
        table.sort(nums)
        for _, num in ipairs(nums) do
            num_str = num_str .. ' ' .. numeral_to_num[num]
        end
        return num_str:sub(2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1b73zo4.lua:10:
    attempt to index a nil value (global 'num_to_numeral')\nstack traceback:\n\t/tmp/tmpc1b73zo4.lua:10:
    in local 'candidate'\n\t/tmp/tmpc1b73zo4.lua:23: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9nt80_f.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpz9nt80_f.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3odw5dq2.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp3odw5dq2.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ayuw9kl.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp3ayuw9kl.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfqbcb_g.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpqfqbcb_g.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch("%S+") do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4drexq.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp__4drexq.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%S+') do
            local n = numeral_map[num]
            if n then
                table.insert(nums, n)
            end
        end
        table.sort(nums)
        local result = {}
        for _, n in ipairs(nums) do
            for num, numeral in pairs(numeral_map) do
                if numeral == n then
                    table.insert(result, num)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw69qy8dk.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpw69qy8dk.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            ['zero'] = 0,
            ['one'] = 1,
            ['two'] = 2,
            ['three'] = 3,
            ['four'] = 4,
            ['five'] = 5,
            ['six'] = 6,
            ['seven'] = 7,
            ['eight'] = 8,
            ['nine'] = 9,
        }
        local nums = {}
        for num in numbers:gmatch('%w+') do
            table.insert(nums, numeral_map[num])
        end
        table.sort(nums)
        local result = {}
        for _, num in ipairs(nums) do
            for numeral, value in pairs(numeral_map) do
                if value == num then
                    table.insert(result, numeral)
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao0os4s.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp9ao0os4s.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, numeral_map[num])
        end
        table.sort(nums)
        local result = {}
        for _, num in ipairs(nums) do
            table.insert(result, num)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n9e48sb.lua:35:
    expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp3n9e48sb.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ykya9x_.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp6ykya9x_.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num_map[num])
        end
        table.sort(nums)
        local sorted = {}
        for _, num in ipairs(nums) do
            for k, v in pairs(num_map) do
                if v == num then
                    table.insert(sorted, k)
                end
            end
        end
        return table.concat(sorted, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_list = {}
      for num in numbers:gmatch('%S+') do
        table.insert(num_list, num)
      end
      table.sort(num_list)
      return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72463c8l.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp72463c8l.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf6tdpmd.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpsf6tdpmd.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0g9bp2k.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpb0g9bp2k.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            table.insert(nums, num)
        end
        table.sort(nums, function(a, b)
            return tonumber(a) < tonumber(b)
        end)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw4qu74cn.lua:12:
    attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpw4qu74cn.lua:12:
    in function </tmp/tmpw4qu74cn.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpw4qu74cn.lua:11:
    in local 'candidate'\n\t/tmp/tmpw4qu74cn.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42vxt3df.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp42vxt3df.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6eayw3fl.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp6eayw3fl.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_map = {
        ['zero'] = 0,
        ['one'] = 1,
        ['two'] = 2,
        ['three'] = 3,
        ['four'] = 4,
        ['five'] = 5,
        ['six'] = 6,
        ['seven'] = 7,
        ['eight'] = 8,
        ['nine'] = 9
      }
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num_map[num])
      end
      table.sort(nums)
      local result = {}
      for _, num in ipairs(nums) do
        for word, value in pairs(num_map) do
          if value == num then
            table.insert(result, word)
          end
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fiu4_tl.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp_fiu4_tl.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, numeral_map[num])
        end
        table.sort(nums)
        local numeral_map_inv = {}
        for k, v in pairs(numeral_map) do
            numeral_map_inv[v] = k
        end
        local result = {}
        for _, num in ipairs(nums) do
            table.insert(result, numeral_map_inv[num])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkegg4o5.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpnkegg4o5.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vigpclw.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp9vigpclw.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch("%S+") do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfulln23x.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpfulln23x.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            num_list[#num_list + 1] = num
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvsxtelx.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpwvsxtelx.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%w+') do
        local n = tonumber(num)
        if n then
          table.insert(nums, n)
        end
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y7nug2e.lua:22:
    expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3y7nug2e.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%a+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8yuwqjw.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpc8yuwqjw.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44wdrpsm.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp44wdrpsm.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_list = {}
      for num in numbers:gmatch('%S+') do
        num_list[#num_list + 1] = num
      end
      table.sort(num_list)
      return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq112q5cd.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpq112q5cd.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk3mx713.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpfk3mx713.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numbers_table = {}
        for number in numbers:gmatch('%S+') do
            table.insert(numbers_table, number)
        end
        table.sort(numbers_table)
        return table.concat(numbers_table, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktqo8e1h.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpktqo8e1h.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5usw4zdy.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp5usw4zdy.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local numeral_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
      }
      local nums = {}
      for num in numbers:gmatch('%w+') do
        table.insert(nums, numeral_map[num])
      end
      table.sort(nums)
      local sorted_numbers = {}
      for _, num in ipairs(nums) do
        for k, v in pairs(numeral_map) do
          if v == num then
            table.insert(sorted_numbers, k)
          end
        end
      end
      return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkwmhfjr.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpkkwmhfjr.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2q2mziq.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpl2q2mziq.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local numeral_map = {
        ['zero'] = 0,
        ['one'] = 1,
        ['two'] = 2,
        ['three'] = 3,
        ['four'] = 4,
        ['five'] = 5,
        ['six'] = 6,
        ['seven'] = 7,
        ['eight'] = 8,
        ['nine'] = 9
      }
      local nums = {}
      for num in numbers:gmatch('%w+') do
        table.insert(nums, numeral_map[num])
      end
      table.sort(nums)
      local sorted_numbers = {}
      for _, num in ipairs(nums) do
        for numeral, value in pairs(numeral_map) do
          if value == num then
            table.insert(sorted_numbers, numeral)
          end
        end
      end
      return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = num
        end
        table.sort(nums, function(a, b)
            return number_to_numeral[a] < number_to_numeral[b]
        end)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxizin3p.lua:12:
    attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\t/tmp/tmpyxizin3p.lua:12:
    in function </tmp/tmpyxizin3p.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpyxizin3p.lua:11:
    in local 'candidate'\n\t/tmp/tmpyxizin3p.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_g45hbb.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp8_g45hbb.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphupdmqd3.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmphupdmqd3.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            num_list[#num_list + 1] = num
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n880vnz.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp8n880vnz.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkjsuo4t.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpgkjsuo4t.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%w+') do
        nums[#nums+1] = num
      end
      table.sort(nums, function(a, b)
        return numbers_to_digits[a] < numbers_to_digits[b]
      end)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsknw9v8q.lua:12:
    attempt to index a nil value (global 'numbers_to_digits')\nstack traceback:\n\t/tmp/tmpsknw9v8q.lua:12:
    in function </tmp/tmpsknw9v8q.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpsknw9v8q.lua:11:
    in local 'candidate'\n\t/tmp/tmpsknw9v8q.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8ezj4gv.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpa8ezj4gv.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps56tvjn1.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmps56tvjn1.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch("%w+") do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe50i1mg1.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpe50i1mg1.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82l7pc4a.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp82l7pc4a.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rvmfowt.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp0rvmfowt.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3_og39j.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpv3_og39j.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = num
        end
        table.sort(nums, function(a, b)
            return number_to_numeral[a] < number_to_numeral[b]
        end)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60lylgae.lua:12:
    attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\t/tmp/tmp60lylgae.lua:12:
    in function </tmp/tmp60lylgae.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp60lylgae.lua:11:
    in local 'candidate'\n\t/tmp/tmp60lylgae.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local numbers_table = {}
      for num in numbers:gmatch('%S+') do
        table.insert(numbers_table, num)
      end
      table.sort(numbers_table)
      return table.concat(numbers_table, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3la_5x_3.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp3la_5x_3.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv5uhokb.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpsv5uhokb.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_map = {
            ['zero'] = 0,
            ['one'] = 1,
            ['two'] = 2,
            ['three'] = 3,
            ['four'] = 4,
            ['five'] = 5,
            ['six'] = 6,
            ['seven'] = 7,
            ['eight'] = 8,
            ['nine'] = 9,
        }
        local num_list = {}
        for num in numbers:gmatch('%w+') do
            table.insert(num_list, num_map[num])
        end
        table.sort(num_list)
        local result = {}
        for _, num in ipairs(num_list) do
            for k, v in pairs(num_map) do
                if v == num then
                    table.insert(result, k)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            local n = tonumber(num)
            if n then
                nums[#nums + 1] = n
            else
                local n = num_map[num]
                if n then
                    nums[#nums + 1] = n
                end
            end
        end
        table.sort(nums)
        local result = {}
        for i = 1, #nums do
            result[i] = tostring(nums[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqu26ly0r.lua:13:
    attempt to index a nil value (global 'num_map')\nstack traceback:\n\t/tmp/tmpqu26ly0r.lua:13:
    in local 'candidate'\n\t/tmp/tmpqu26ly0r.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_to_number = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9,
        }
        local numbers_list = {}
        for number in numbers:gmatch('%S+') do
            table.insert(numbers_list, numeral_to_number[number])
        end
        table.sort(numbers_list)
        local result = {}
        for _, number in ipairs(numbers_list) do
            for numeral, numeral_number in pairs(numeral_to_number) do
                if numeral_number == number then
                    table.insert(result, numeral)
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            local num_val = num_to_numeral[num]
            if num_val then
                table.insert(num_list, num_val)
            end
        end
        table.sort(num_list)
        local sorted_numbers = {}
        for _, num_val in ipairs(num_list) do
            table.insert(sorted_numbers, numeral_to_num[num_val])
        end
        return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxkw33k41.lua:9:
    attempt to index a nil value (global 'num_to_numeral')\nstack traceback:\n\t/tmp/tmpxkw33k41.lua:9:
    in local 'candidate'\n\t/tmp/tmpxkw33k41.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdn__lig.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpmdn__lig.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_table = {}
        for num in numbers:gmatch("%S+") do
            table.insert(num_table, num)
        end
        table.sort(num_table)
        return table.concat(num_table, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthl5sitj.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpthl5sitj.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local numeral_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
      }
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, numeral_map[num])
      end
      table.sort(nums)
      local numeral_map_inv = {}
      for k, v in pairs(numeral_map) do
        numeral_map_inv[v] = k
      end
      local result = {}
      for _, num in ipairs(nums) do
        table.insert(result, numeral_map_inv[num])
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmiwh0y85.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpmiwh0y85.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdphaqqg.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpbdphaqqg.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local numeral_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
      }
      local nums = {}
      for num in numbers:gmatch('%w+') do
        table.insert(nums, numeral_map[num])
      end
      table.sort(nums)
      local num_str = ''
      for _, num in ipairs(nums) do
        for numeral, value in pairs(numeral_map) do
          if value == num then
            num_str = num_str .. numeral .. ' '
          end
        end
      end
      return num_str:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0aefegg.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpt0aefegg.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_map = {
        ['zero'] = 0,
        ['one'] = 1,
        ['two'] = 2,
        ['three'] = 3,
        ['four'] = 4,
        ['five'] = 5,
        ['six'] = 6,
        ['seven'] = 7,
        ['eight'] = 8,
        ['nine'] = 9
      }
      local nums = {}
      for num in numbers:gmatch('%w+') do
        table.insert(nums, num_map[num])
      end
      table.sort(nums)
      local result = {}
      for _, num in ipairs(nums) do
        for k, v in pairs(num_map) do
          if v == num then
            table.insert(result, k)
          end
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        local num_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num_map[num])
        end
        table.sort(num_list)
        local result = {}
        for _, num in ipairs(num_list) do
            for k, v in pairs(num_map) do
                if v == num then
                    table.insert(result, k)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch("%w+") do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hfxyv25.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp5hfxyv25.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2l4h970u.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp2l4h970u.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numbers_table = {}
        for number in numbers:gmatch('%S+') do
            table.insert(numbers_table, number)
        end
        table.sort(numbers_table)
        return table.concat(numbers_table, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4meadlzt.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp4meadlzt.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6sqlfyl.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpp6sqlfyl.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuorhakvg.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpuorhakvg.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_list = {}
      for num in numbers:gmatch('%S+') do
        num_list[#num_list + 1] = num
      end
      table.sort(num_list)
      return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3317rf_8.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp3317rf_8.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu02f4hda.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpu02f4hda.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n--
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',
    'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to
    largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function
    sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num in numbers:gmatch('%w+') do\n\t\tnums[#nums+1]
    = num\n\tend\n\ttable.sort(nums, function(a, b)\n\t\treturn tonumber(a) < tonumber(b)\n\tend)\n\treturn
    table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),
    'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n
    \   lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five
    seven eight nine')\n    lu.assertEquals(candidate('six five four three two one
    zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ityo7zo.lua:12:
    attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp0ityo7zo.lua:12:
    in function </tmp/tmp0ityo7zo.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp0ityo7zo.lua:11:
    in local 'candidate'\n\t/tmp/tmp0ityo7zo.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            num_list[#num_list + 1] = num
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0w5oij2.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpk0w5oij2.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55v79_v8.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp55v79_v8.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7xr3m4n.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpi7xr3m4n.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%w+') do
        nums[#nums+1] = num
      end
      table.sort(nums, function(a, b)
        return number_to_numeral[a] < number_to_numeral[b]
      end)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxsxrga0q.lua:12:
    attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\t/tmp/tmpxsxrga0q.lua:12:
    in function </tmp/tmpxsxrga0q.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpxsxrga0q.lua:11:
    in local 'candidate'\n\t/tmp/tmpxsxrga0q.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j12_ovc.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp0j12_ovc.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_table = {}
        for num in numbers:gmatch("%w+") do
            table.insert(num_table, num)
        end
        table.sort(num_table)
        return table.concat(num_table, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsktrn5g.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmprsktrn5g.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjxyqb6c.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmprjxyqb6c.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79yxhf9t.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp79yxhf9t.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%w+') do
        nums[#nums+1] = num
      end
      table.sort(nums, function(a, b)
        return numeral_to_number(a) < numeral_to_number(b)
      end)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7hklotm.lua:12:
    attempt to call a nil value (global 'numeral_to_number')\nstack traceback:\n\t/tmp/tmpk7hklotm.lua:12:
    in function </tmp/tmpk7hklotm.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpk7hklotm.lua:11:
    in local 'candidate'\n\t/tmp/tmpk7hklotm.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2utijxq.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpy2utijxq.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_table = {}
      for num in numbers:gmatch("%S+") do
        table.insert(num_table, num)
      end
      table.sort(num_table)
      return table.concat(num_table, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf4an8bb.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpdf4an8bb.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpids70e0n.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpids70e0n.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxm3f539.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmppxm3f539.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2xhk471.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpz2xhk471.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_list = {}
      for num in numbers:gmatch('%S+') do
        num_list[#num_list + 1] = num
      end
      table.sort(num_list)
      return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu29q0njf.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpu29q0njf.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszcaz5pq.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpszcaz5pq.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps62jgrvx.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmps62jgrvx.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_uiuvwu.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpv_uiuvwu.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%w+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt33n43a.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpzt33n43a.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numbers_table = {}
        for number in numbers:gmatch('%S+') do
            table.insert(numbers_table, number)
        end
        table.sort(numbers_table)
        return table.concat(numbers_table, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvc7xfb7q.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpvc7xfb7q.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jf2vyoh.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp7jf2vyoh.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xeo7ik4.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp3xeo7ik4.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num_map[num])
        end
        table.sort(nums)
        local result = {}
        for _, num in ipairs(nums) do
            for k, v in pairs(num_map) do
                if v == num then
                    table.insert(result, k)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%w+') do
        nums[#nums+1] = num
      end
      table.sort(nums, function(a, b)
        return num_to_int(a) < num_to_int(b)
      end)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ydmu7zx.lua:12:
    attempt to call a nil value (global 'num_to_int')\nstack traceback:\n\t/tmp/tmp0ydmu7zx.lua:12:
    in function </tmp/tmp0ydmu7zx.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp0ydmu7zx.lua:11:
    in local 'candidate'\n\t/tmp/tmp0ydmu7zx.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch("%S+") do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohzrzz04.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpohzrzz04.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch("%S+") do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mh0slfj.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp3mh0slfj.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzknn8ac5.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpzknn8ac5.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd67wo1f1.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpd67wo1f1.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx6j0xww.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpbx6j0xww.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxp79ixfz.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpxp79ixfz.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcykbbgkd.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpcykbbgkd.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            num_list[#num_list + 1] = num
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3apshrh.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmps3apshrh.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%w+') do
            num_list[#num_list + 1] = num
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprf3yse6o.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmprf3yse6o.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitj1egvs.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpitj1egvs.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in string.gmatch(numbers, "%S+") do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0u8ouqm.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpt0u8ouqm.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuj1u2c3s.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpuj1u2c3s.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%w+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pmbvwia.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp_pmbvwia.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kx5ctry.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp5kx5ctry.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_list = {}
      for num in numbers:gmatch('%S+') do
        table.insert(num_list, num)
      end
      table.sort(num_list)
      return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yf3h51k.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp9yf3h51k.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = num
        end
        table.sort(nums, function(a, b)
            return num_to_numeral[a] < num_to_numeral[b]
        end)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm3s3i09k.lua:12:
    attempt to index a nil value (global 'num_to_numeral')\nstack traceback:\n\t/tmp/tmpm3s3i09k.lua:12:
    in function </tmp/tmpm3s3i09k.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpm3s3i09k.lua:11:
    in local 'candidate'\n\t/tmp/tmpm3s3i09k.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvr3iq48k.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpvr3iq48k.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2g86j32t.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp2g86j32t.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num_map[num])
        end
        table.sort(nums)
        local result = {}
        for _, num in ipairs(nums) do
            for k, v in pairs(num_map) do
                if v == num then
                    table.insert(result, k)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpus_evhal.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpus_evhal.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbuzyqod.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmphbuzyqod.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%w+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd27hgy9k.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpd27hgy9k.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n--
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',
    'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to
    largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function
    sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num in numbers:gmatch('%S+') do\n\t\ttable.insert(nums,
    num)\n\tend\n\ttable.sort(nums, function(a, b)\n\t\treturn number_to_numeral[a]
    < number_to_numeral[b]\n\tend)\n\treturn table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),
    '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three
    five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four
    seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six
    five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgt0xh2pu.lua:12:
    attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\t/tmp/tmpgt0xh2pu.lua:12:
    in function </tmp/tmpgt0xh2pu.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpgt0xh2pu.lua:11:
    in local 'candidate'\n\t/tmp/tmpgt0xh2pu.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local numeral_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
      }
      local numbers_table = {}
      for number in numbers:gmatch('%S+') do
        table.insert(numbers_table, numeral_map[number])
      end
      table.sort(numbers_table)
      local sorted_numbers = {}
      for _, number in ipairs(numbers_table) do
        for numeral, numeral_number in pairs(numeral_map) do
          if number == numeral_number then
            table.insert(sorted_numbers, numeral)
          end
        end
      end
      return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch("%S+") do
            local n = tonumber(num)
            if n then
                nums[#nums + 1] = n
            else
                local n = number_to_numeral[num]
                if n then
                    nums[#nums + 1] = n
                else
                    return nil, "invalid number: " .. num
                end
            end
        end
        table.sort(nums)
        local sorted = {}
        for i, n in ipairs(nums) do
            sorted[i] = numeral_to_number[n]
        end
        return table.concat(sorted, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu2_d_s5c.lua:13:
    attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\t/tmp/tmpu2_d_s5c.lua:13:
    in local 'candidate'\n\t/tmp/tmpu2_d_s5c.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%w+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1odvi5r.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpa1odvi5r.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num)
      end
      table.sort(nums, function(a, b)
        return numeral_to_number(a) < numeral_to_number(b)
      end)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphydzo86o.lua:12:
    attempt to call a nil value (global 'numeral_to_number')\nstack traceback:\n\t/tmp/tmphydzo86o.lua:12:
    in function </tmp/tmphydzo86o.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmphydzo86o.lua:11:
    in local 'candidate'\n\t/tmp/tmphydzo86o.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numbers_table = {}
        local numbers_sorted = {}
        local numbers_sorted_string = ''
        local number_map = {
            ['zero'] = 0,
            ['one'] = 1,
            ['two'] = 2,
            ['three'] = 3,
            ['four'] = 4,
            ['five'] = 5,
            ['six'] = 6,
            ['seven'] = 7,
            ['eight'] = 8,
            ['nine'] = 9
        }
        for number in numbers:gmatch('%w+') do
            table.insert(numbers_table, number_map[number])
        end
        table.sort(numbers_table)
        for _, number in ipairs(numbers_table) do
            table.insert(numbers_sorted, number)
        end
        for _, number in ipairs(numbers_sorted) do
            for number_string, number_value in pairs(number_map) do
                if number == number_value then
                    numbers_sorted_string = numbers_sorted_string .. number_string .. ' '
                end
            end
        end
        return numbers_sorted_string:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmrcjtwu.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpbmrcjtwu.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%a+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68_bnmjl.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp68_bnmjl.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            local n = tonumber(num)
            if n then
                table.insert(nums, n)
            end
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihwd47re.lua:22:
    expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpihwd47re.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%w+') do
        nums[#nums+1] = num
      end
      table.sort(nums, function(a, b)
        return num_to_int(a) < num_to_int(b)
      end)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp32kztw6.lua:12:
    attempt to call a nil value (global 'num_to_int')\nstack traceback:\n\t/tmp/tmpp32kztw6.lua:12:
    in function </tmp/tmpp32kztw6.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpp32kztw6.lua:11:
    in local 'candidate'\n\t/tmp/tmpp32kztw6.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%a+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprns1xt5m.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmprns1xt5m.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_table = {}
        local num_string = ""
        local num_list = {}
        local num_list_sorted = {}
        local num_list_sorted_string = ""
        local num_list_sorted_string_final = ""
        local num_list_sorted_string_final_final = ""
        local num_list_sorted_string_final_final_final = ""
        local num_list_sorted_string_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final_final_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final = ""
        local num_list_sorted_string_final_final_final_final_final_final_final_final_final
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp2kauvqyr.lua:39: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_list = {}
      for num in numbers:gmatch('%w+') do
        table.insert(num_list, num)
      end
      table.sort(num_list)
      return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqcgraef.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpyqcgraef.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_to_number = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9,
        }
        local numbers_list = {}
        for number in numbers:gmatch('%S+') do
            table.insert(numbers_list, numeral_to_number[number])
        end
        table.sort(numbers_list)
        local sorted_numbers = {}
        for _, number in ipairs(numbers_list) do
            table.insert(sorted_numbers, number)
        end
        return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ftwaxyq.lua:35:
    expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp4ftwaxyq.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65lkas2y.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp65lkas2y.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%w+') do
        nums[#nums+1] = num
      end
      table.sort(nums, function(a, b)
        return number_to_numeral[a] < number_to_numeral[b]
      end)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppf8oybgp.lua:12:
    attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\t/tmp/tmppf8oybgp.lua:12:
    in function </tmp/tmppf8oybgp.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmppf8oybgp.lua:11:
    in local 'candidate'\n\t/tmp/tmppf8oybgp.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuy6esn_y.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpuy6esn_y.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_list = {}
      for num in numbers:gmatch('%S+') do
        table.insert(num_list, num)
      end
      table.sort(num_list)
      return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_cyef2n.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpw_cyef2n.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%w+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ad22903.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp5ad22903.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            num_list[#num_list + 1] = num
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkel_ugau.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpkel_ugau.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_table = {}
      for num in numbers:gmatch("%w+") do
        table.insert(num_table, num)
      end
      table.sort(num_table)
      return table.concat(num_table, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ao2ebqf.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp5ao2ebqf.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_list = {}
      for num in numbers:gmatch('%w+') do
        table.insert(num_list, num)
      end
      table.sort(num_list)
      return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ymw7red.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp4ymw7red.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3a5wk59.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpp3a5wk59.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = num
        end
        table.sort(nums, function(a, b)
            return num_to_int(a) < num_to_int(b)
        end)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsyropa2j.lua:12:
    attempt to call a nil value (global 'num_to_int')\nstack traceback:\n\t/tmp/tmpsyropa2j.lua:12:
    in function </tmp/tmpsyropa2j.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpsyropa2j.lua:11:
    in local 'candidate'\n\t/tmp/tmpsyropa2j.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1y7jfbca.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp1y7jfbca.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            num_list[#num_list + 1] = num
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6ybyhvm.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpw6ybyhvm.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfc31t2lf.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpfc31t2lf.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x4j85vx.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp_x4j85vx.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhbnu9qx.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpnhbnu9qx.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqc7p7mp.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpsqc7p7mp.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_table = {}
      for num in numbers:gmatch("%S+") do
        table.insert(num_table, num)
      end
      table.sort(num_table)
      return table.concat(num_table, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_omeelml.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp_omeelml.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch("%S+") do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0ir4240.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpp0ir4240.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, numeral_map[num])
        end
        table.sort(nums)
        local result = {}
        for _, num in ipairs(nums) do
            for numeral, value in pairs(numeral_map) do
                if value == num then
                    table.insert(result, numeral)
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigr07fep.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpigr07fep.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%a+') do
            table.insert(nums, numeral_map[num])
        end
        table.sort(nums)
        local result = {}
        for _, num in ipairs(nums) do
            for k, v in pairs(numeral_map) do
                if v == num then
                    table.insert(result, k)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local numeral_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
      }
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, numeral_map[num])
      end
      table.sort(nums)
      local result = {}
      for _, num in ipairs(nums) do
        for numeral, value in pairs(numeral_map) do
          if value == num then
            table.insert(result, numeral)
          end
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputu_dyn_.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmputu_dyn_.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local sorted = {}
      for number in numbers:gmatch('%S+') do
        table.insert(sorted, number)
      end
      table.sort(sorted, function(a, b)
        return number_to_numeral[a] < number_to_numeral[b]
      end)
      return table.concat(sorted, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuduvjr5x.lua:12:
    attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\t/tmp/tmpuduvjr5x.lua:12:
    in function </tmp/tmpuduvjr5x.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpuduvjr5x.lua:11:
    in local 'candidate'\n\t/tmp/tmpuduvjr5x.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatruxwqk.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpatruxwqk.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j02b6sp.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp_j02b6sp.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3z5_19q6.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp3z5_19q6.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdl_owin.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpwdl_owin.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp297l8cpf.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp297l8cpf.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_map = {
            ['zero'] = 0,
            ['one'] = 1,
            ['two'] = 2,
            ['three'] = 3,
            ['four'] = 4,
            ['five'] = 5,
            ['six'] = 6,
            ['seven'] = 7,
            ['eight'] = 8,
            ['nine'] = 9,
        }
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num_map[num])
        end
        table.sort(num_list)
        local num_str = ''
        for _, num in ipairs(num_list) do
            for k, v in pairs(num_map) do
                if v == num then
                    num_str = num_str .. k .. ' '
                end
            end
        end
        return num_str:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            ['zero'] = 0,
            ['one'] = 1,
            ['two'] = 2,
            ['three'] = 3,
            ['four'] = 4,
            ['five'] = 5,
            ['six'] = 6,
            ['seven'] = 7,
            ['eight'] = 8,
            ['nine'] = 9,
        }
        local nums = {}
        for num in numbers:gmatch('%w+') do
            table.insert(nums, numeral_map[num])
        end
        table.sort(nums)
        local numeral_map_reverse = {}
        for k, v in pairs(numeral_map) do
            numeral_map_reverse[v] = k
        end
        local result = {}
        for _, v in ipairs(nums) do
            table.insert(result, numeral_map_reverse[v])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_1d7xqy.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp4_1d7xqy.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_to_number = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9,
        }
        local numbers_list = {}
        for number in numbers:gmatch('%S+') do
            table.insert(numbers_list, numeral_to_number[number])
        end
        table.sort(numbers_list)
        local sorted_numbers = {}
        for _, number in ipairs(numbers_list) do
            table.insert(sorted_numbers, number)
        end
        return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuu_2804_.lua:35:
    expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpuu_2804_.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pgawbqs.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp_pgawbqs.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q9jr2wh.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp8q9jr2wh.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwo_pf2.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpakwo_pf2.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnfujx0n.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpjnfujx0n.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n--
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',
    'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to
    largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function
    sort_numbers(numbers)\n\tlocal numbers_table = {}\n\tfor number in numbers:gmatch('%S+')
    do\n\t\ttable.insert(numbers_table, number)\n\tend\n\ttable.sort(numbers_table)\n\treturn
    table.concat(numbers_table, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),
    'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n
    \   lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five
    seven eight nine')\n    lu.assertEquals(candidate('six five four three two one
    zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqeurzhpu.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpqeurzhpu.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9
        }
        local nums = {}
        for num in numbers:gmatch('%a+') do
            table.insert(nums, numeral_map[num])
        end
        table.sort(nums)
        local result = {}
        for _, num in ipairs(nums) do
            for numeral, value in pairs(numeral_map) do
                if value == num then
                    table.insert(result, numeral)
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlgjymd_.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpnlgjymd_.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%a+') do
            table.insert(nums, num)
        end
        table.sort(nums, function(a, b)
            return num_to_int(a) < num_to_int(b)
        end)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjia0b4k.lua:12:
    attempt to call a nil value (global 'num_to_int')\nstack traceback:\n\t/tmp/tmpcjia0b4k.lua:12:
    in function </tmp/tmpcjia0b4k.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpcjia0b4k.lua:11:
    in local 'candidate'\n\t/tmp/tmpcjia0b4k.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_to_number = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9,
        }
        local numbers_table = {}
        for number in numbers:gmatch('%w+') do
            table.insert(numbers_table, numeral_to_number[number])
        end
        table.sort(numbers_table)
        local sorted_numbers = {}
        for _, number in ipairs(numbers_table) do
            for numeral, numeral_number in pairs(numeral_to_number) do
                if number == numeral_number then
                    table.insert(sorted_numbers, numeral)
                end
            end
        end
        return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            num_list[#num_list + 1] = num
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv73_5c0h.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpv73_5c0h.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local sorted = {}
        for num in numbers:gmatch('%S+') do
            table.insert(sorted, num)
        end
        table.sort(sorted, function(a, b)
            return number_to_numeral[a] < number_to_numeral[b]
        end)
        return table.concat(sorted, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6j10v4_2.lua:12:
    attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\t/tmp/tmp6j10v4_2.lua:12:
    in function </tmp/tmp6j10v4_2.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp6j10v4_2.lua:11:
    in local 'candidate'\n\t/tmp/tmp6j10v4_2.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q3yhjbj.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp6q3yhjbj.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rn2w9od.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp5rn2w9od.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_to_number = {
            zero = 0,
            one = 1,
            two = 2,
            three = 3,
            four = 4,
            five = 5,
            six = 6,
            seven = 7,
            eight = 8,
            nine = 9,
        }
        local numbers_list = {}
        for number in numbers:gmatch('%S+') do
            table.insert(numbers_list, numeral_to_number[number])
        end
        table.sort(numbers_list)
        local sorted_numbers = {}
        for _, number in ipairs(numbers_list) do
            for numeral, numeral_number in pairs(numeral_to_number) do
                if number == numeral_number then
                    table.insert(sorted_numbers, numeral)
                end
            end
        end
        return table.concat(sorted_numbers, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%w+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo92hz219.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpo92hz219.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numeral_map = {
            ['zero'] = 0,
            ['one'] = 1,
            ['two'] = 2,
            ['three'] = 3,
            ['four'] = 4,
            ['five'] = 5,
            ['six'] = 6,
            ['seven'] = 7,
            ['eight'] = 8,
            ['nine'] = 9,
        }
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, numeral_map[num])
        end
        table.sort(nums)
        local numeral_map_inv = {}
        for k, v in pairs(numeral_map) do
            numeral_map_inv[v] = k
        end
        local result = {}
        for _, num in ipairs(nums) do
            table.insert(result, numeral_map_inv[num])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            table.insert(nums, num)
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2abia280.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp2abia280.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local nums = {}
        for num in numbers:gmatch('%S+') do
            nums[#nums + 1] = num
        end
        table.sort(nums)
        return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkw56oc3.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmplkw56oc3.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqfjgngb.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmptqfjgngb.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local numbers_list = {}
        for number in numbers:gmatch('%S+') do
            table.insert(numbers_list, number)
        end
        table.sort(numbers_list)
        return table.concat(numbers_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpul4vjms3.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpul4vjms3.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ojsfwd2.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp5ojsfwd2.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        table.insert(nums, num)
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vcyc1qf.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp7vcyc1qf.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebafhn6a.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpebafhn6a.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local nums = {}
      for num in numbers:gmatch('%S+') do
        nums[#nums+1] = num
      end
      table.sort(nums)
      return table.concat(nums, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qapb_8u.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmp1qapb_8u.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
        local num_list = {}
        for num in numbers:gmatch('%S+') do
            table.insert(num_list, num)
        end
        table.sort(num_list)
        return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxejt5fd.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmppxejt5fd.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input is a space-delimited string of numberals from 'zero' to 'nine'.
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    -- Return the string with numbers sorted from smallest to largest
    -- >>> sort_numbers('three one five')
    -- 'one three five'
    local function sort_numbers(numbers)
      local num_list = {}
      for num in numbers:gmatch('%S+') do
        num_list[#num_list + 1] = num
      end
      table.sort(num_list)
      return table.concat(num_list, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_numbers
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('three'), 'three')
        lu.assertEquals(candidate('three five nine'), 'three five nine')
        lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
        lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3r_15zb.lua:20:
    expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\t/tmp/tmpv3r_15zb.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
