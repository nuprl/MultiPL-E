---
name: HumanEval_94_skjkasdkd
language: lua
results:
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + (max % 10)
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsfo4mqd4.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpsfo4mqd4.lua:19:
    in local 'candidate'\n\t/tmp/tmpsfo4mqd4.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpux8tsizf.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpux8tsizf.lua:19:
    in local 'candidate'\n\t/tmp/tmpux8tsizf.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > max then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqlrifhqg.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpqlrifhqg.lua:19:
    in local 'candidate'\n\t/tmp/tmpqlrifhqg.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5459zuqr.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmp5459zuqr.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkgdfter1.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkgdfter1.lua:19:
    in local 'candidate'\n\t/tmp/tmpkgdfter1.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function isPrime(n)
        if n < 2 then return false end
        for i = 2, n - 1 do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sumDigits(n)
        local s = 0
        while n > 0 do
          s = s + n % 10
          n = math.floor(n / 10)
        end
        return s
      end
      local maxPrime = 0
      for _, n in ipairs(lst) do
        if isPrime(n) and n > maxPrime then maxPrime = n end
      end
      return sumDigits(maxPrime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkpk5syre.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpkpk5syre.lua:19:
    in local 'candidate'\n\t/tmp/tmpkpk5syre.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if is_prime(lst[i]) then
          primes[#primes + 1] = lst[i]
        end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
        sum = sum + (max % 10)
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyl0t2sl.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpgyl0t2sl.lua:19:
    in local 'candidate'\n\t/tmp/tmpgyl0t2sl.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vaijue6.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmp_vaijue6.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1gysqxhx.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp1gysqxhx.lua:19:
    in local 'candidate'\n\t/tmp/tmp1gysqxhx.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function isPrime(n)
            if n < 2 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sumDigits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local maxPrime = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > maxPrime then
                maxPrime = v
            end
        end
        return sumDigits(maxPrime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and isPrime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3m9kx1o9.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp3m9kx1o9.lua:19:
    in local 'candidate'\n\t/tmp/tmp3m9kx1o9.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if isPrime(lst[i]) and lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7o7x1b1w.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp7o7x1b1w.lua:19:
    in local 'candidate'\n\t/tmp/tmp7o7x1b1w.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmo3peyq.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpxmo3peyq.lua:19:
    in local 'candidate'\n\t/tmp/tmpxmo3peyq.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza2f3z52.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpza2f3z52.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if isPrime(lst[i]) then
          primes[#primes + 1] = lst[i]
        end
      end
      local max = 0
      for i = 1, #primes do
        if primes[i] > max then
          max = primes[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprcv42_c7.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmprcv42_c7.lua:19:
    in local 'candidate'\n\t/tmp/tmprcv42_c7.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_39n3rdd.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmp_39n3rdd.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        if lst[i] > max then
          max = lst[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + (max % 10)
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh3jzlcp.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpyh3jzlcp.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max_prime = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max_prime then
                max_prime = v
            end
        end
        return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2qxqz6n1.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp2qxqz6n1.lua:19:
    in local 'candidate'\n\t/tmp/tmp2qxqz6n1.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaa_etfgm.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpaa_etfgm.lua:19:
    in local 'candidate'\n\t/tmp/tmpaa_etfgm.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3_df6nz.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpv3_df6nz.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if is_prime(lst[i]) then
          primes[#primes + 1] = lst[i]
        end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
        sum = sum + max_prime % 10
        max_prime = math.floor(max_prime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8hsrxkfx.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp8hsrxkfx.lua:19:
    in local 'candidate'\n\t/tmp/tmp8hsrxkfx.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpodt1cr7v.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpodt1cr7v.lua:19:
    in local 'candidate'\n\t/tmp/tmpodt1cr7v.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpky69_6fc.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpky69_6fc.lua:19:
    in local 'candidate'\n\t/tmp/tmpky69_6fc.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local prime = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > prime then
                prime = v
            end
        end
        local sum = 0
        while prime > 0 do
            sum = sum + prime % 10
            prime = math.floor(prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9bj90klj.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp9bj90klj.lua:19:
    in local 'candidate'\n\t/tmp/tmp9bj90klj.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                table.insert(primes, lst[i])
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaifvhlg7.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpaifvhlg7.lua:19:
    in local 'candidate'\n\t/tmp/tmpaifvhlg7.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if is_prime(v) and v > max then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmop17g1u.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmop17g1u.lua:19:
    in local 'candidate'\n\t/tmp/tmpmop17g1u.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for _, v in ipairs(lst) do
            if is_prime(v) then
                table.insert(primes, v)
            end
        end
        local max = math.max(unpack(primes))
        local sum = 0
        while max > 0 do
            sum = sum + (max % 10)
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_oi64n1.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpa_oi64n1.lua:19:
    in local 'candidate'\n\t/tmp/tmpa_oi64n1.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function isPrime(n)
            if n < 2 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sumDigits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local maxPrime = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > maxPrime then
                maxPrime = v
            end
        end
        return sumDigits(maxPrime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuhnvgbb2.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpuhnvgbb2.lua:19:
    in local 'candidate'\n\t/tmp/tmpuhnvgbb2.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function isPrime(n)
            if n < 2 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sumDigits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > max then
                max = v
            end
        end
        return sumDigits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        local n = lst[i]
        if n > 1 then
          local is_prime = true
          for j = 2, n - 1 do
            if n % j == 0 then
              is_prime = false
              break
            end
          end
          if is_prime then
            primes[#primes + 1] = n
          end
        end
      end
      local max_prime = 0
      for i = 1, #primes do
        if primes[i] > max_prime then
          max_prime = primes[i]
        end
      end
      local sum = 0
      while max_prime > 0 do
        sum = sum + max_prime % 10
        max_prime = math.floor(max_prime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if is_prime(v) and v > max then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe98bbz2h.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpe98bbz2h.lua:19:
    in local 'candidate'\n\t/tmp/tmpe98bbz2h.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = math.max(unpack(primes))
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0ausx7h.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpg0ausx7h.lua:19:
    in local 'candidate'\n\t/tmp/tmpg0ausx7h.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- You need to find the largest
    prime value and return the sum of its digits.\n-- Examples:\n-- >>> skjkasdkd({0,
    3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n-- 10\n--
    >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n--
    25\n-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30,
    1, 9, 3})\n-- 13\n-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,
    5, 6})\n-- 11\n-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})\n-- 3\n-- >>> skjkasdkd({0,
    8, 1, 2, 1, 7})\n-- 7\nlocal function skjkasdkd(lst)\n\tlocal primes = {}\n\tlocal
    max = 0\n\tfor i = 1, #lst do\n\t\tlocal n = lst[i]\n\t\tif n > 1 then\n\t\t\tlocal
    is_prime = true\n\t\t\tfor j = 2, n - 1 do\n\t\t\t\tif n % j == 0 then\n\t\t\t\t\tis_prime
    = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif is_prime then\n\t\t\t\tprimes[#primes
    + 1] = n\n\t\t\t\tif n > max then\n\t\t\t\t\tmax = n\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tlocal
    sum = 0\n\twhile max > 0 do\n\t\tsum = sum + max % 10\n\t\tmax = math.floor(max
    / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = skjkasdkd\n    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4,
    5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)\n    lu.assertEquals(candidate({1,
    0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)\n    lu.assertEquals(candidate({1,
    3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)\n    lu.assertEquals(candidate({0,
    724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)\n    lu.assertEquals(candidate({0,
    81, 12, 3, 1, 21}), 3)\n    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)\n
    \   lu.assertEquals(candidate({8191}), 19)\n    lu.assertEquals(candidate({8191,
    123456, 127, 7}), 19)\n    lu.assertEquals(candidate({127, 97, 8192}), 10)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n <= 1 then
                return false
            elseif n <= 3 then
                return true
            elseif n % 2 == 0 or n % 3 == 0 then
                return false
            end
            local i = 5
            while i * i <= n do
                if n % i == 0 or n % (i + 2) == 0 then
                    return false
                end
                i = i + 6
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max then
                max = v
            end
        end
        return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and isPrime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0o8vge7g.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp0o8vge7g.lua:19:
    in local 'candidate'\n\t/tmp/tmp0o8vge7g.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldox4az7.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpldox4az7.lua:19:
    in local 'candidate'\n\t/tmp/tmpldox4az7.lua:29: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpucep0o50.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpucep0o50.lua:19:
    in local 'candidate'\n\t/tmp/tmpucep0o50.lua:29: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        local n = lst[i]
        if n > max and is_prime(n) then
          max = n
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggy2ld7c.lua:20:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpggy2ld7c.lua:20:
    in local 'candidate'\n\t/tmp/tmpggy2ld7c.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max then
                max = v
            end
        end
        return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpooin7mx1.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpooin7mx1.lua:19:
    in local 'candidate'\n\t/tmp/tmpooin7mx1.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local largestPrime = 0
      for i = 1, #lst do
        if isPrime(lst[i]) and lst[i] > largestPrime then
          largestPrime = lst[i]
        end
      end
      local sum = 0
      while largestPrime > 0 do
        sum = sum + largestPrime % 10
        largestPrime = math.floor(largestPrime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3fzz4wy.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpa3fzz4wy.lua:19:
    in local 'candidate'\n\t/tmp/tmpa3fzz4wy.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local sum = 0
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9gzzknf.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpv9gzzknf.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function isPrime(n)
        if n < 2 then return false end
        if n == 2 then return true end
        if n % 2 == 0 then return false end
        for i = 3, math.sqrt(n), 2 do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sumDigits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local max = 0
      for i = 1, #lst do
        if isPrime(lst[i]) and lst[i] > max then
          max = lst[i]
        end
      end
      return sumDigits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        local n = lst[i]
        local is_prime = true
        for j = 2, math.sqrt(n) do
          if n % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          primes[#primes + 1] = n
        end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvq8dv69.lua:31:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgvq8dv69.lua:31:
    in local 'candidate'\n\t/tmp/tmpgvq8dv69.lua:43: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsk_lzlir.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpsk_lzlir.lua:19:
    in local 'candidate'\n\t/tmp/tmpsk_lzlir.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp882ql4bb.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp882ql4bb.lua:19:
    in local 'candidate'\n\t/tmp/tmp882ql4bb.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfb1a5qiu.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpfb1a5qiu.lua:19:
    in local 'candidate'\n\t/tmp/tmpfb1a5qiu.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgiltrx1.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmppgiltrx1.lua:19:
    in local 'candidate'\n\t/tmp/tmppgiltrx1.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n <= 1 then
                return false
            elseif n <= 3 then
                return true
            elseif n % 2 == 0 or n % 3 == 0 then
                return false
            end
            local i = 5
            while i * i <= n do
                if n % i == 0 or n % (i + 2) == 0 then
                    return false
                end
                i = i + 6
            end
            return true
        end
        local function sum_digits(n)
            local s = 0
            while n > 0 do
                s = s + n % 10
                n = math.floor(n / 10)
            end
            return s
        end
        local max_prime = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max_prime then
                max_prime = v
            end
        end
        return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local largest = 0
        for _, v in ipairs(lst) do
            if v > largest and is_prime(v) then
                largest = v
            end
        end
        local sum = 0
        while largest > 0 do
            sum = sum + largest % 10
            largest = math.floor(largest / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ar8lu62.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0ar8lu62.lua:19:
    in local 'candidate'\n\t/tmp/tmp0ar8lu62.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local res = 0
        while max > 0 do
            res = res + max % 10
            max = math.floor(max / 10)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph0sj6v2q.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmph0sj6v2q.lua:19:
    in local 'candidate'\n\t/tmp/tmph0sj6v2q.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        if lst[i] > max then
          max = lst[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3u8uae3.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpu3u8uae3.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0p2p5_va.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0p2p5_va.lua:19:
    in local 'candidate'\n\t/tmp/tmp0p2p5_va.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppas606yg.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmppas606yg.lua:19:
    in local 'candidate'\n\t/tmp/tmppas606yg.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if isPrime(lst[i]) then
          primes[#primes + 1] = lst[i]
        end
      end
      local max = 0
      for i = 1, #primes do
        if primes[i] > max then
          max = primes[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvfyrpv7g.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpvfyrpv7g.lua:19:
    in local 'candidate'\n\t/tmp/tmpvfyrpv7g.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if lst[i] > 1 then
                for j = 2, lst[i] do
                    if lst[i] % j == 0 then
                        break
                    end
                    if j == lst[i] then
                        primes[#primes + 1] = lst[i]
                    end
                end
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0005xrnh.lua:37:
    attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0005xrnh.lua:37:
    in local 'candidate'\n\t/tmp/tmp0005xrnh.lua:47: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if lst[i] > 1 then
          local is_prime = true
          for j = 2, lst[i] - 1 do
            if lst[i] % j == 0 then
              is_prime = false
              break
            end
          end
          if is_prime then
            table.insert(primes, lst[i])
          end
        end
      end
      local max_prime = 0
      for i = 1, #primes do
        if primes[i] > max_prime then
          max_prime = primes[i]
        end
      end
      local sum = 0
      while max_prime > 0 do
        sum = sum + max_prime % 10
        max_prime = math.floor(max_prime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local largest = 0
      for _, v in ipairs(lst) do
        if isPrime(v) and v > largest then
          largest = v
        end
      end
      local sum = 0
      while largest > 0 do
        sum = sum + largest % 10
        largest = math.floor(largest / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_x0s1y45.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp_x0s1y45.lua:19:
    in local 'candidate'\n\t/tmp/tmp_x0s1y45.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = -1
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max then
                max = v
            end
        end
        return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function is_prime(n)
        if n < 2 then return false end
        if n == 2 then return true end
        if n % 2 == 0 then return false end
        for i = 3, math.sqrt(n), 2 do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local largest_prime = 0
      for _, v in ipairs(lst) do
        if is_prime(v) and v > largest_prime then
          largest_prime = v
        end
      end
      return sum_digits(largest_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local res = 0
        while max > 0 do
            res = res + max % 10
            max = math.floor(max / 10)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphh82z3r9.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmphh82z3r9.lua:19:
    in local 'candidate'\n\t/tmp/tmphh82z3r9.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if isPrime(lst[i]) then
          primes[#primes + 1] = lst[i]
        end
      end
      local max = 0
      for i = 1, #primes do
        if primes[i] > max then
          max = primes[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + (max % 10)
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2cyp0uih.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp2cyp0uih.lua:19:
    in local 'candidate'\n\t/tmp/tmp2cyp0uih.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max_prime = 0
        for _, n in ipairs(lst) do
            if is_prime(n) and n > max_prime then
                max_prime = n
            end
        end
        return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if is_prime(lst[i]) then
          primes[#primes + 1] = lst[i]
        end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
        sum = sum + max_prime % 10
        max_prime = math.floor(max_prime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42ycc9c8.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp42ycc9c8.lua:19:
    in local 'candidate'\n\t/tmp/tmp42ycc9c8.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        local n = lst[i]
        if n > max and is_prime(n) then
          max = n
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvp8xohc0.lua:20:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvp8xohc0.lua:20:
    in local 'candidate'\n\t/tmp/tmpvp8xohc0.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        local n = lst[i]
        if n > max and isPrime(n) then
          max = n
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpelpeeh0f.lua:20:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpelpeeh0f.lua:20:
    in local 'candidate'\n\t/tmp/tmpelpeeh0f.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        local isPrime = true
        for j = 2, i - 1 do
          if i % j == 0 then
            isPrime = false
            break
          end
        end
        if isPrime then
          primes[#primes + 1] = i
        end
      end
      local maxPrime = primes[#primes]
      local sum = 0
      while maxPrime > 0 do
        sum = sum + maxPrime % 10
        maxPrime = math.floor(maxPrime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyf6oys2y.lua:43:
    expected: 25, actual: 8\nstack traceback:\n\t/tmp/tmpyf6oys2y.lua:43: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for _, v in ipairs(lst) do
        if is_prime(v) then
          table.insert(primes, v)
        end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
        sum = sum + (max % 10)
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h0sq0lm.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp8h0sq0lm.lua:19:
    in local 'candidate'\n\t/tmp/tmp8h0sq0lm.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if lst[i] > 1 then
                local is_prime = true
                for j = 2, lst[i] - 1 do
                    if lst[i] % j == 0 then
                        is_prime = false
                        break
                    end
                end
                if is_prime then
                    table.insert(primes, lst[i])
                end
            end
        end
        local max_prime = 0
        for i = 1, #primes do
            if primes[i] > max_prime then
                max_prime = primes[i]
            end
        end
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        local n = lst[i]
        if n > max and isPrime(n) then
          max = n
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2g37yw20.lua:20:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp2g37yw20.lua:20:
    in local 'candidate'\n\t/tmp/tmp2g37yw20.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkqrz7azw.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkqrz7azw.lua:19:
    in local 'candidate'\n\t/tmp/tmpkqrz7azw.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function is_prime(n)
        if n <= 1 then return false end
        for i = 2, math.sqrt(n) do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
        if is_prime(v) and v > max then max = v end
      end
      return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if isPrime(lst[i]) then
          primes[#primes + 1] = lst[i]
        end
      end
      local max = primes[1]
      for i = 2, #primes do
        if primes[i] > max then
          max = primes[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + (max % 10)
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdzhw4woc.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpdzhw4woc.lua:19:
    in local 'candidate'\n\t/tmp/tmpdzhw4woc.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max_prime = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max_prime then
                max_prime = v
            end
        end
        local sum = 0
        while max_prime > 0 do
            sum = sum + (max_prime % 10)
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwjt5def.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkwjt5def.lua:19:
    in local 'candidate'\n\t/tmp/tmpkwjt5def.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- You need to find the largest
    prime value and return the sum of its digits.\n-- Examples:\n-- >>> skjkasdkd({0,
    3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n-- 10\n--
    >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n--
    25\n-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30,
    1, 9, 3})\n-- 13\n-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,
    5, 6})\n-- 11\n-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})\n-- 3\n-- >>> skjkasdkd({0,
    8, 1, 2, 1, 7})\n-- 7\nlocal function skjkasdkd(lst)\n\tlocal max = 0\n\tfor _,
    v in ipairs(lst) do\n\t\tif v > max and is_prime(v) then\n\t\t\tmax = v\n\t\tend\n\tend\n\tlocal
    sum = 0\n\twhile max > 0 do\n\t\tsum = sum + max % 10\n\t\tmax = math.floor(max
    / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = skjkasdkd\n    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4,
    5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)\n    lu.assertEquals(candidate({1,
    0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)\n    lu.assertEquals(candidate({1,
    3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)\n    lu.assertEquals(candidate({0,
    724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)\n    lu.assertEquals(candidate({0,
    81, 12, 3, 1, 21}), 3)\n    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)\n
    \   lu.assertEquals(candidate({8191}), 19)\n    lu.assertEquals(candidate({8191,
    123456, 127, 7}), 19)\n    lu.assertEquals(candidate({127, 97, 8192}), 10)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17emxo1h.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp17emxo1h.lua:19:
    in local 'candidate'\n\t/tmp/tmp17emxo1h.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmzg8je3g.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmzg8je3g.lua:19:
    in local 'candidate'\n\t/tmp/tmpmzg8je3g.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function isPrime(n)
        if n < 2 then return false end
        for i = 2, math.floor(math.sqrt(n)) do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sumDigits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local largestPrime = 0
      for _, v in ipairs(lst) do
        if isPrime(v) and v > largestPrime then
          largestPrime = v
        end
      end
      return sumDigits(largestPrime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function isPrime(n)
        if n < 2 then return false end
        for i = 2, math.sqrt(n) do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sumDigits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local maxPrime = 0
      for _, v in ipairs(lst) do
        if isPrime(v) and v > maxPrime then
          maxPrime = v
        end
      end
      return sumDigits(maxPrime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        if lst[i] > max then
          max = lst[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8699_pk.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpz8699_pk.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqz_mcua.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvqz_mcua.lua:19:
    in local 'candidate'\n\t/tmp/tmpvqz_mcua.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpap84jbda.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpap84jbda.lua:19:
    in local 'candidate'\n\t/tmp/tmpap84jbda.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = math.max(unpack(primes))
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7yjg2ol9.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7yjg2ol9.lua:19:
    in local 'candidate'\n\t/tmp/tmp7yjg2ol9.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxjd47ee.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpxxjd47ee.lua:19:
    in local 'candidate'\n\t/tmp/tmpxxjd47ee.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sb1swz_.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmp8sb1swz_.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0lv74a9t.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0lv74a9t.lua:19:
    in local 'candidate'\n\t/tmp/tmp0lv74a9t.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacf8zapq.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpacf8zapq.lua:19:
    in local 'candidate'\n\t/tmp/tmpacf8zapq.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqw81y8ps.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpqw81y8ps.lua:19:
    in local 'candidate'\n\t/tmp/tmpqw81y8ps.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and isPrime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkv_2orlo.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpkv_2orlo.lua:19:
    in local 'candidate'\n\t/tmp/tmpkv_2orlo.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        if lst[i] > max then
          max = lst[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0n0p7w4f.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmp0n0p7w4f.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmdxn46oz.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpmdxn46oz.lua:19:
    in local 'candidate'\n\t/tmp/tmpmdxn46oz.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0l8_b29u.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0l8_b29u.lua:19:
    in local 'candidate'\n\t/tmp/tmp0l8_b29u.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if is_prime(lst[i]) then
          table.insert(primes, lst[i])
        end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpltkbty5i.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpltkbty5i.lua:19:
    in local 'candidate'\n\t/tmp/tmpltkbty5i.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon3wftie.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpon3wftie.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function isPrime(n)
        if n <= 1 then return false end
        for i = 2, n - 1 do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sumDigits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local maxPrime = 0
      for _, v in ipairs(lst) do
        if isPrime(v) and v > maxPrime then
          maxPrime = v
        end
      end
      return sumDigits(maxPrime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                table.insert(primes, lst[i])
            end
        end
        local max = math.max(unpack(primes))
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpboow60w1.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpboow60w1.lua:19:
    in local 'candidate'\n\t/tmp/tmpboow60w1.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- You need to find the largest
    prime value and return the sum of its digits.\n-- Examples:\n-- >>> skjkasdkd({0,
    3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n-- 10\n--
    >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n--
    25\n-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30,
    1, 9, 3})\n-- 13\n-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,
    5, 6})\n-- 11\n-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})\n-- 3\n-- >>> skjkasdkd({0,
    8, 1, 2, 1, 7})\n-- 7\nlocal function skjkasdkd(lst)\n\tlocal max = 0\n\tfor _,
    v in ipairs(lst) do\n\t\tif v > max and is_prime(v) then\n\t\t\tmax = v\n\t\tend\n\tend\n\tlocal
    sum = 0\n\twhile max > 0 do\n\t\tsum = sum + max % 10\n\t\tmax = math.floor(max
    / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = skjkasdkd\n    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4,
    5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)\n    lu.assertEquals(candidate({1,
    0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)\n    lu.assertEquals(candidate({1,
    3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)\n    lu.assertEquals(candidate({0,
    724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)\n    lu.assertEquals(candidate({0,
    81, 12, 3, 1, 21}), 3)\n    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)\n
    \   lu.assertEquals(candidate({8191}), 19)\n    lu.assertEquals(candidate({8191,
    123456, 127, 7}), 19)\n    lu.assertEquals(candidate({127, 97, 8192}), 10)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbqm1m3g.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvbqm1m3g.lua:19:
    in local 'candidate'\n\t/tmp/tmpvbqm1m3g.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        for i = 1, #tostring(max) do
            sum = sum + tonumber(tostring(max):sub(i, i))
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp7mvz9jc.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpp7mvz9jc.lua:19:
    in local 'candidate'\n\t/tmp/tmpp7mvz9jc.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxej4srn.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpkxej4srn.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            local x = lst[i]
            if x > max and is_prime(x) then
                max = x
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvymrc_u.lua:20:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmplvymrc_u.lua:20:
    in local 'candidate'\n\t/tmp/tmplvymrc_u.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max_prime = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max_prime then
                max_prime = v
            end
        end
        return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotr0o8un.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpotr0o8un.lua:19:
    in local 'candidate'\n\t/tmp/tmpotr0o8un.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqw1qim7.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpmqw1qim7.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprql7uka.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpprql7uka.lua:19:
    in local 'candidate'\n\t/tmp/tmpprql7uka.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        if lst[i] > max then
          max = lst[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6je_smu.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpr6je_smu.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function is_prime(n)
        if n <= 1 then return false end
        if n <= 3 then return true end
        if n % 2 == 0 or n % 3 == 0 then return false end
        for i = 5, math.floor(math.sqrt(n)), 6 do
          if n % i == 0 or n % (i + 2) == 0 then return false end
        end
        return true
      end
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local max_prime = 0
      for _, v in ipairs(lst) do
        if is_prime(v) and v > max_prime then
          max_prime = v
        end
      end
      return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if isPrime(v) and v > max then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzhn9ly_.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpwzhn9ly_.lua:19:
    in local 'candidate'\n\t/tmp/tmpwzhn9ly_.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        local x = lst[i]
        if x > max and isPrime(x) then
          max = x
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08va9e7h.lua:20:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp08va9e7h.lua:20:
    in local 'candidate'\n\t/tmp/tmp08va9e7h.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n <= 1 then
                return false
            elseif n <= 3 then
                return true
            elseif n % 2 == 0 or n % 3 == 0 then
                return false
            end
            local i = 5
            while i * i <= n do
                if n % i == 0 or n % (i + 2) == 0 then
                    return false
                end
                i = i + 6
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max_prime = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max_prime then
                max_prime = v
            end
        end
        return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            local n = lst[i]
            if n > 1 then
                local is_prime = true
                for j = 2, math.sqrt(n) do
                    if n % j == 0 then
                        is_prime = false
                        break
                    end
                end
                if is_prime then
                    table.insert(primes, n)
                end
            end
        end
        local max_prime = math.max(unpack(primes))
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppo6d8h1w.lua:33:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmppo6d8h1w.lua:33:
    in local 'candidate'\n\t/tmp/tmppo6d8h1w.lua:45: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and isPrime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwmpy8yy.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmphwmpy8yy.lua:19:
    in local 'candidate'\n\t/tmp/tmphwmpy8yy.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = math.max(unpack(primes))
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9k9isbim.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp9k9isbim.lua:19:
    in local 'candidate'\n\t/tmp/tmp9k9isbim.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + (max % 10)
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd9ibnz7f.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpd9ibnz7f.lua:19:
    in local 'candidate'\n\t/tmp/tmpd9ibnz7f.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        local n = lst[i]
        if is_prime(n) then
          primes[#primes + 1] = n
        end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
        sum = sum + max_prime % 10
        max_prime = math.floor(max_prime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu7k4b2zz.lua:20:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpu7k4b2zz.lua:20:
    in local 'candidate'\n\t/tmp/tmpu7k4b2zz.lua:36: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, n in ipairs(lst) do
            if is_prime(n) and n > max then
                max = n
            end
        end
        return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnp61hp7i.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpnp61hp7i.lua:19:
    in local 'candidate'\n\t/tmp/tmpnp61hp7i.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            local n = lst[i]
            if n > 1 then
                local is_prime = true
                for j = 2, n - 1 do
                    if n % j == 0 then
                        is_prime = false
                        break
                    end
                end
                if is_prime then
                    table.insert(primes, n)
                end
            end
        end
        local max_prime = math.max(unpack(primes))
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9e5bgl8n.lua:33:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9e5bgl8n.lua:33:
    in local 'candidate'\n\t/tmp/tmp9e5bgl8n.lua:45: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            local n = lst[i]
            if n > max and is_prime(n) then
                max = n
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgd6qdth4.lua:20:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpgd6qdth4.lua:20:
    in local 'candidate'\n\t/tmp/tmpgd6qdth4.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max then
                max = v
            end
        end
        return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if isPrime(lst[i]) then
          primes[#primes + 1] = lst[i]
        end
      end
      local max = 0
      for i = 1, #primes do
        if primes[i] > max then
          max = primes[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9_ol2z1.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp_9_ol2z1.lua:19:
    in local 'candidate'\n\t/tmp/tmp_9_ol2z1.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local largest_prime = 0
      for i = 1, #lst do
        local n = lst[i]
        if is_prime(n) and n > largest_prime then
          largest_prime = n
        end
      end
      local sum = 0
      while largest_prime > 0 do
        sum = sum + largest_prime % 10
        largest_prime = math.floor(largest_prime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7lc8olsn.lua:20:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7lc8olsn.lua:20:
    in local 'candidate'\n\t/tmp/tmp7lc8olsn.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n <= 1 then
                return false
            elseif n <= 3 then
                return true
            elseif n % 2 == 0 or n % 3 == 0 then
                return false
            end
            local i = 5
            while i * i <= n do
                if n % i == 0 or n % (i + 2) == 0 then
                    return false
                end
                i = i + 6
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max then
                max = v
            end
        end
        return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        local n = lst[i]
        if n > 1 then
          local is_prime = true
          for j = 2, math.floor(math.sqrt(n)) do
            if n % j == 0 then
              is_prime = false
              break
            end
          end
          if is_prime then
            primes[#primes + 1] = n
          end
        end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
        sum = sum + max_prime % 10
        max_prime = math.floor(max_prime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd1wiw49b.lua:33:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpd1wiw49b.lua:33:
    in local 'candidate'\n\t/tmp/tmpd1wiw49b.lua:45: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function isPrime(n)
        if n < 2 then return false end
        if n == 2 then return true end
        if n % 2 == 0 then return false end
        for i = 3, math.sqrt(n), 2 do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sumDigits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
        if isPrime(v) and v > max then
          max = v
        end
      end
      return sumDigits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                table.insert(primes, lst[i])
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + (max % 10)
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsi3758ac.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpsi3758ac.lua:19:
    in local 'candidate'\n\t/tmp/tmpsi3758ac.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function isPrime(n)
            if n < 2 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sumDigits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > max then
                max = v
            end
        end
        return sumDigits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            local n = lst[i]
            if n > 1 then
                local is_prime = true
                for j = 2, n - 1 do
                    if n % j == 0 then
                        is_prime = false
                        break
                    end
                end
                if is_prime then
                    primes[#primes + 1] = n
                end
            end
        end
        local max_prime = primes[1]
        for i = 2, #primes do
            if primes[i] > max_prime then
                max_prime = primes[i]
            end
        end
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4q6rxgt.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpo4q6rxgt.lua:19:
    in local 'candidate'\n\t/tmp/tmpo4q6rxgt.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            local n = lst[i]
            if n > max and isPrime(n) then
                max = n
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2kei3zt.lua:20:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpm2kei3zt.lua:20:
    in local 'candidate'\n\t/tmp/tmpm2kei3zt.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for _, v in ipairs(lst) do
            if isPrime(v) then
                table.insert(primes, v)
            end
        end
        local max = math.max(unpack(primes))
        local sum = 0
        while max > 0 do
            sum = sum + (max % 10)
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr4c2qez4.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpr4c2qez4.lua:19:
    in local 'candidate'\n\t/tmp/tmpr4c2qez4.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max_prime = math.max(unpack(primes))
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzi89skko.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpzi89skko.lua:19:
    in local 'candidate'\n\t/tmp/tmpzi89skko.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function is_prime(n)
        if n < 2 then return false end
        for i = 2, n - 1 do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local max_prime = 0
      for _, n in ipairs(lst) do
        if is_prime(n) and n > max_prime then
          max_prime = n
        end
      end
      return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.floor(math.sqrt(n)) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local s = 0
            while n > 0 do
                s = s + n % 10
                n = math.floor(n / 10)
            end
            return s
        end
        local max_prime = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max_prime then
                max_prime = v
            end
        end
        return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9tdnzxu2.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp9tdnzxu2.lua:19:
    in local 'candidate'\n\t/tmp/tmp9tdnzxu2.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max then
                max = v
            end
        end
        return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ctuu5sg.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp6ctuu5sg.lua:19:
    in local 'candidate'\n\t/tmp/tmp6ctuu5sg.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc6gb_vxo.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpc6gb_vxo.lua:19:
    in local 'candidate'\n\t/tmp/tmpc6gb_vxo.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplazx9d1t.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmplazx9d1t.lua:19:
    in local 'candidate'\n\t/tmp/tmplazx9d1t.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for _, v in ipairs(lst) do
        if isPrime(v) then
          table.insert(primes, v)
        end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
        sum = sum + (max % 10)
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmxfii12.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmphmxfii12.lua:19:
    in local 'candidate'\n\t/tmp/tmphmxfii12.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0yy664fk.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0yy664fk.lua:19:
    in local 'candidate'\n\t/tmp/tmp0yy664fk.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        local is_prime = true
        for j = 2, math.floor(math.sqrt(lst[i])) do
          if lst[i] % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          table.insert(primes, lst[i])
        end
      end
      local max_prime = 0
      for i = 1, #primes do
        if primes[i] > max_prime then
          max_prime = primes[i]
        end
      end
      local sum = 0
      while max_prime > 0 do
        sum = sum + max_prime % 10
        max_prime = math.floor(max_prime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl2vqa_3c.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpl2vqa_3c.lua:19:
    in local 'candidate'\n\t/tmp/tmpl2vqa_3c.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function isPrime(n)
        if n < 2 then return false end
        if n == 2 then return true end
        if n % 2 == 0 then return false end
        for i = 3, math.sqrt(n), 2 do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sumDigits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local maxPrime = 0
      for _, v in ipairs(lst) do
        if isPrime(v) and v > maxPrime then
          maxPrime = v
        end
      end
      return sumDigits(maxPrime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max_prime = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max_prime then
                max_prime = v
            end
        end
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3mij258.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpo3mij258.lua:19:
    in local 'candidate'\n\t/tmp/tmpo3mij258.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function isPrime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sumDigits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local maxPrime = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > maxPrime then
                maxPrime = v
            end
        end
        return sumDigits(maxPrime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local largestPrime = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > largestPrime then
                largestPrime = v
            end
        end
        local sum = 0
        while largestPrime > 0 do
            sum = sum + largestPrime % 10
            largestPrime = math.floor(largestPrime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacq67hmj.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpacq67hmj.lua:19:
    in local 'candidate'\n\t/tmp/tmpacq67hmj.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp713zd5o8.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp713zd5o8.lua:19:
    in local 'candidate'\n\t/tmp/tmp713zd5o8.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmo8c9067.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmo8c9067.lua:19:
    in local 'candidate'\n\t/tmp/tmpmo8c9067.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ide08jm.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5ide08jm.lua:19:
    in local 'candidate'\n\t/tmp/tmp5ide08jm.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuqva80x5.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpuqva80x5.lua:19:
    in local 'candidate'\n\t/tmp/tmpuqva80x5.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        if isPrime(lst[i]) and lst[i] > max then
          max = lst[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_mszysq.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp7_mszysq.lua:19:
    in local 'candidate'\n\t/tmp/tmp7_mszysq.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        local n = lst[i]
        if n > 1 then
          local is_prime = true
          for j = 2, n - 1 do
            if n % j == 0 then
              is_prime = false
              break
            end
          end
          if is_prime then
            primes[#primes + 1] = n
          end
        end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
        sum = sum + max_prime % 10
        max_prime = math.floor(max_prime / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6o1b9zg.lua:33:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpx6o1b9zg.lua:33:
    in local 'candidate'\n\t/tmp/tmpx6o1b9zg.lua:45: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc5iqxax.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmplc5iqxax.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        if lst[i] > max then
          max = lst[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1111dfvi.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmp1111dfvi.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max then
                max = v
            end
        end
        return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function isPrime(n)
        if n < 2 then return false end
        if n == 2 then return true end
        if n % 2 == 0 then return false end
        for i = 3, math.sqrt(n), 2 do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sumDigits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
        if isPrime(v) and v > max then
          max = v
        end
      end
      return sumDigits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 2, math.maxinteger do
            if not primes[i] then
                for j = i * 2, math.maxinteger, i do
                    primes[j] = true
                end
            end
        end
        local max = 0
        for _, v in ipairs(lst) do
            if not primes[v] and v > max then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo4d25rt.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpdo4d25rt.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsngjzf1j.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpsngjzf1j.lua:19:
    in local 'candidate'\n\t/tmp/tmpsngjzf1j.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n <= 1 then
                return false
            elseif n <= 3 then
                return true
            elseif n % 2 == 0 or n % 3 == 0 then
                return false
            end
            local i = 5
            while i * i <= n do
                if n % i == 0 or n % (i + 2) == 0 then
                    return false
                end
                i = i + 6
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max then
                max = v
            end
        end
        return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpab_mxb9v.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpab_mxb9v.lua:19:
    in local 'candidate'\n\t/tmp/tmpab_mxb9v.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max_prime = 0
        for _, n in ipairs(lst) do
            if is_prime(n) and n > max_prime then
                max_prime = n
            end
        end
        return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        local num = lst[i]
        if num > max and isPrime(num) then
          max = num
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtce386o.lua:20:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpbtce386o.lua:20:
    in local 'candidate'\n\t/tmp/tmpbtce386o.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw6yugf77.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpw6yugf77.lua:19:
    in local 'candidate'\n\t/tmp/tmpw6yugf77.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max_prime = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max_prime then
                max_prime = v
            end
        end
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx09ha05p.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpx09ha05p.lua:19:
    in local 'candidate'\n\t/tmp/tmpx09ha05p.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        local n = lst[i]
        if n > max and is_prime(n) then
          max = n
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + (max % 10)
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj6cle_ls.lua:20:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpj6cle_ls.lua:20:
    in local 'candidate'\n\t/tmp/tmpj6cle_ls.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function isPrime(n)
        if n < 2 then return false end
        if n == 2 then return true end
        if n % 2 == 0 then return false end
        for i = 3, math.sqrt(n), 2 do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sumDigits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local maxPrime = 0
      for _, n in ipairs(lst) do
        if isPrime(n) and n > maxPrime then
          maxPrime = n
        end
      end
      return sumDigits(maxPrime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            local n = lst[i]
            local is_prime = true
            for j = 2, math.floor(math.sqrt(n)) do
                if n % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, n)
            end
        end
        local max_prime = math.max(unpack(primes))
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu2uhvdv2.lua:31:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpu2uhvdv2.lua:31:
    in local 'candidate'\n\t/tmp/tmpu2uhvdv2.lua:43: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_bfg_g2.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpx_bfg_g2.lua:19:
    in local 'candidate'\n\t/tmp/tmpx_bfg_g2.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 2, #lst do
            if lst[i] > 1 then
                for j = i * 2, #lst, i do
                    lst[j] = 0
                end
            end
        end
        for i = 2, #lst do
            if lst[i] > 1 then
                table.insert(primes, lst[i])
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0n4evpry.lua:49:
    expected: 13, actual: 28\nstack traceback:\n\t/tmp/tmp0n4evpry.lua:49: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function is_prime(n)
        if n <= 1 then return false end
        if n <= 3 then return true end
        if n % 2 == 0 or n % 3 == 0 then return false end
        for i = 5, math.floor(math.sqrt(n)), 6 do
          if n % i == 0 or n % (i + 2) == 0 then return false end
        end
        return true
      end
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local max_prime = 0
      for _, n in ipairs(lst) do
        if is_prime(n) and n > max_prime then
          max_prime = n
        end
      end
      return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 0, #lst do
            if lst[i] > 1 then
                for j = 2, lst[i] do
                    if lst[i] % j == 0 then
                        break
                    end
                    if j == lst[i] then
                        primes[#primes + 1] = lst[i]
                    end
                end
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmytz2r1.lua:19:
    attempt to compare number with nil\nstack traceback:\n\t/tmp/tmphmytz2r1.lua:19:
    in local 'candidate'\n\t/tmp/tmphmytz2r1.lua:47: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local largestPrime = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > largestPrime then
                largestPrime = v
            end
        end
        local sum = 0
        while largestPrime > 0 do
            sum = sum + largestPrime % 10
            largestPrime = math.floor(largestPrime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaadvygm0.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpaadvygm0.lua:19:
    in local 'candidate'\n\t/tmp/tmpaadvygm0.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        if lst[i] > max then
          max = lst[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ql488ss.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmp4ql488ss.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max_prime = math.max(unpack(primes))
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyuortrq.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpoyuortrq.lua:19:
    in local 'candidate'\n\t/tmp/tmpoyuortrq.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77u_2wir.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp77u_2wir.lua:19:
    in local 'candidate'\n\t/tmp/tmp77u_2wir.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max_prime = math.max(unpack(primes))
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3r7l4ud2.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp3r7l4ud2.lua:19:
    in local 'candidate'\n\t/tmp/tmp3r7l4ud2.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if isPrime(v) and v > max then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5vbrxbo4.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp5vbrxbo4.lua:19:
    in local 'candidate'\n\t/tmp/tmp5vbrxbo4.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function is_prime(n)
        if n < 2 then return false end
        for i = 2, math.floor(math.sqrt(n)) do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
      local max = 0
      for _, n in ipairs(lst) do
        if is_prime(n) and n > max then max = n end
      end
      return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            local n = lst[i]
            if n > max and isPrime(n) then
                max = n
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpieo11gh5.lua:20:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpieo11gh5.lua:20:
    in local 'candidate'\n\t/tmp/tmpieo11gh5.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max_prime = 0
        for _, n in ipairs(lst) do
            if is_prime(n) and n > max_prime then
                max_prime = n
            end
        end
        return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local largestPrime = 0
        for _, n in ipairs(lst) do
            if n > largestPrime and isPrime(n) then
                largestPrime = n
            end
        end
        local sum = 0
        while largestPrime > 0 do
            sum = sum + largestPrime % 10
            largestPrime = math.floor(largestPrime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxy92_1lg.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpxy92_1lg.lua:19:
    in local 'candidate'\n\t/tmp/tmpxy92_1lg.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for _, v in ipairs(lst) do
        if v > max and is_prime(v) then
          max = v
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0uouzg8.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpe0uouzg8.lua:19:
    in local 'candidate'\n\t/tmp/tmpe0uouzg8.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmfbk2bl.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpdmfbk2bl.lua:19:
    in local 'candidate'\n\t/tmp/tmpdmfbk2bl.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local max = 0
      for i = 1, #lst do
        if lst[i] > max then
          max = lst[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj0kbiqp.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpqj0kbiqp.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ji26bn5.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ji26bn5.lua:19:
    in local 'candidate'\n\t/tmp/tmp6ji26bn5.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq75n7khh.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpq75n7khh.lua:19:
    in local 'candidate'\n\t/tmp/tmpq75n7khh.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                table.insert(primes, lst[i])
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxs3e1lds.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpxs3e1lds.lua:19:
    in local 'candidate'\n\t/tmp/tmpxs3e1lds.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp94901knm.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmp94901knm.lua:19:
    in local 'candidate'\n\t/tmp/tmp94901knm.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and is_prime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0b7r2y2g.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0b7r2y2g.lua:19:
    in local 'candidate'\n\t/tmp/tmp0b7r2y2g.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local primes = {}
      for i = 1, #lst do
        if is_prime(lst[i]) then
          primes[#primes + 1] = lst[i]
        end
      end
      local max = 0
      for i = 1, #primes do
        if primes[i] > max then
          max = primes[i]
        end
      end
      local sum = 0
      while max > 0 do
        sum = sum + max % 10
        max = math.floor(max / 10)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4b08ylcz.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp4b08ylcz.lua:19:
    in local 'candidate'\n\t/tmp/tmp4b08ylcz.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if is_prime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = 0
        for i = 1, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1y7armta.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp1y7armta.lua:19:
    in local 'candidate'\n\t/tmp/tmp1y7armta.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
        local max_prime = 0
        for _, v in ipairs(lst) do
            if is_prime(v) and v > max_prime then
                max_prime = v
            end
        end
        return sum_digits(max_prime)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            local n = lst[i]
            if n > 1 then
                local is_prime = true
                for j = 2, n - 1 do
                    if n % j == 0 then
                        is_prime = false
                        break
                    end
                end
                if is_prime then
                    table.insert(primes, n)
                end
            end
        end
        local max_prime = 0
        for i = 1, #primes do
            if primes[i] > max_prime then
                max_prime = primes[i]
            end
        end
        local sum = 0
        while max_prime > 0 do
            sum = sum + max_prime % 10
            max_prime = math.floor(max_prime / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
      local function is_prime(n)
        if n < 2 then return false end
        for i = 2, math.sqrt(n) do
          if n % i == 0 then return false end
        end
        return true
      end
      local function sum_digits(n)
        local s = 0
        while n > 0 do
          s = s + n % 10
          n = math.floor(n / 10)
        end
        return s
      end
      local max = 0
      for _, n in ipairs(lst) do
        if is_prime(n) and n > max then max = n end
      end
      return sum_digits(max)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local primes = {}
        for i = 1, #lst do
            if isPrime(lst[i]) then
                primes[#primes + 1] = lst[i]
            end
        end
        local max = primes[1]
        for i = 2, #primes do
            if primes[i] > max then
                max = primes[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyhr_3h9k.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpyhr_3h9k.lua:19:
    in local 'candidate'\n\t/tmp/tmpyhr_3h9k.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for _, v in ipairs(lst) do
            if v > max and isPrime(v) then
                max = v
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkaf3tw3u.lua:19:
    attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpkaf3tw3u.lua:19:
    in local 'candidate'\n\t/tmp/tmpkaf3tw3u.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of integers.
    -- You need to find the largest prime value and return the sum of its digits.
    -- Examples:
    -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
    -- 10
    -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
    -- 25
    -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
    -- 13
    -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
    -- 11
    -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
    -- 3
    -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
    -- 7
    local function skjkasdkd(lst)
        local max = 0
        for i = 1, #lst do
            if lst[i] > max then
                max = lst[i]
            end
        end
        local sum = 0
        while max > 0 do
            sum = sum + max % 10
            max = math.floor(max / 10)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = skjkasdkd
        lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
        lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
        lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
        lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
        lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
        lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
        lu.assertEquals(candidate({8191}), 19)
        lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
        lu.assertEquals(candidate({127, 97, 8192}), 10)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz92xzo37.lua:34:
    expected: 10, actual: 9\nstack traceback:\n\t/tmp/tmpz92xzo37.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
