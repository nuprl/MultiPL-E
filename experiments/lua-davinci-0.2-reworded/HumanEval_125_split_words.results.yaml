---
name: HumanEval_125_split_words
language: lua
results:
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local n = 0
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for c in txt:gmatch('.') do
                local o = c:byte() - string.byte('a')
                if o % 2 == 1 then
                    n = n + 1
                end
            end
        end
        return #words > 0 and words or n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrz7a5qe.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmplrz7a5qe.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if i % 2 == 1 then
                    odd_count = odd_count + (c:byte() - string.byte('a'))
                end
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1bhggd7.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp_1bhggd7.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in string.gmatch(txt, "[^%s]+") do
            table.insert(words, word)
        end
        if #words == 0 then
            words = {}
            for word in string.gmatch(txt, "[^,]+") do
                table.insert(words, word)
            end
            if #words == 0 then
                local count = 0
                for i = 1, #txt do
                    local c = string.byte(txt, i) - string.byte('a')
                    if c % 2 == 1 then
                        count = count + 1
                    end
                end
                return count
            end
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5snv4yp.lua:39:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpv5snv4yp.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c then
                    local ord = c:byte() - string.byte('a')
                    if ord % 2 == 1 then
                        count = count + 1
                    end
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9ydmk8a.lua:46:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpj9ydmk8a.lua:46: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local len = #txt
        local i = 1
        local j = 1
        while i <= len do
            if txt:sub(i, i) == ' ' then
                words[#words + 1] = txt:sub(j, i - 1)
                j = i + 1
            elseif txt:sub(i, i) == ',' then
                words[#words + 1] = txt:sub(j, i - 1)
                j = i + 1
            end
            i = i + 1
        end
        if #words == 0 then
            local odd = 0
            for i = 1, len do
                if txt:sub(i, i):byte() % 2 == 1 then
                    odd = odd + 1
                end
            end
            return odd
        end
        words[#words + 1] = txt:sub(j, len)
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16rjpht_.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp16rjpht_.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c then
                    local ord = string.byte(c) - string.byte('a')
                    if ord % 2 == 1 then
                        count = count + 1
                    end
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipd5zmrv.lua:49:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpipd5zmrv.lua:49: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for word in txt:gmatch('%a+') do
                words[#words + 1] = word
            end
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if txt:byte(i) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugq70fz1.lua:37:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpugq70fz1.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local n = 0
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for i = 1, #txt do
                if txt:byte(i) - 97 == i % 2 then
                    n = n + 1
                end
            end
            return n
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeekg_7dl.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpeekg_7dl.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c then
                    local ord = c:byte() - string.byte('a')
                    if ord % 2 == 1 then
                        count = count + 1
                    end
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1jrpjxc.lua:46:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpk1jrpjxc.lua:46: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local n = 0
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for c in txt:gmatch('%a') do
                n = n + (c:byte() - ord('a')) % 2
            end
        end
        return #words > 0 and words or n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprr0sfhkw.lua:29:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmprr0sfhkw.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c and c:upper() == c then
                    count = count + 1
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4sd8lpl.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpw4sd8lpl.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if (i % 2) == 1 then
                    count = count + txt:byte(i) - string.byte('a')
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzet0icfm.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpzet0icfm.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
                if i % 2 == 1 then
                    odd_count = odd_count + (c:byte() - ord('a'))
                end
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            return odd_count
        else
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpybqb6t72.lua:25:
    attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpybqb6t72.lua:25:
    in local 'candidate'\n\t/tmp/tmpybqb6t72.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in string.gmatch(txt, "%S+") do
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        local odd_letters = 0
        for letter in string.gmatch(txt, "%a") do
            local ord = string.byte(letter) - string.byte('a')
            if ord % 2 == 1 then
                odd_letters = odd_letters + 1
            end
        end
        return odd_letters
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvknby7oe.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpvknby7oe.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for c in txt:gmatch('.') do
                if c:byte() - 97 % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpyyghi4.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpvpyyghi4.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local char = txt:sub(i, i)
            if char == ' ' or char == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. char
                if i % 2 == 1 then
                    local ord = string.byte(char) - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzxygwv5.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpgzxygwv5.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        if txt:find(' ') then
            return txt:split(' ')
        elseif txt:find(',') then
            return txt:split(',')
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:byte() >= 97 and c:byte() <= 122 and i % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2r_at14d.lua:13:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2r_at14d.lua:13:
    in local 'candidate'\n\t/tmp/tmp2r_at14d.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local n = string.byte(c) - string.byte('a')
            if n % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ixoj9p4.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp4ixoj9p4.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4cnd37x7.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp4cnd37x7.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        -- TODO: Implement
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2l1e0qz8.lua:49:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp2l1e0qz8.lua:49: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        local j = 1
        local len = #txt
        while i <= len do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if i > j then
                    words[#words + 1] = txt:sub(j, i - 1)
                end
                j = i + 1
            end
            i = i + 1
        end
        if i > j then
            words[#words + 1] = txt:sub(j, i - 1)
        end
        if #words == 0 then
            local cnt = 0
            for i = 1, len do
                local c = txt:sub(i, i)
                if (c:byte() - ord('a')) % 2 == 1 then
                    cnt = cnt + 1
                end
            end
            return cnt
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon8p61_s.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpon8p61_s.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ""
        local odd_letters = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= "" then
                    table.insert(words, word)
                    word = ""
                end
            else
                word = word .. c
            end
            if c:match("[a-z]") then
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    odd_letters = odd_letters + 1
                end
            end
        end
        if word ~= "" then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_letters
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbakbtfaz.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpbakbtfaz.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if (txt:byte(i) - ord('a')) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iy5o18j.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp9iy5o18j.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
        local c = txt:sub(i, i)
        if c == ' ' or c == ',' then
          if #word > 0 then
            words[#words + 1] = word
            word = ''
          end
        else
          word = word .. c
          if (c:byte() - ord('a')) % 2 == 1 then
            odd_count = odd_count + 1
          end
        end
      end
      if #word > 0 then
        words[#words + 1] = word
      end
      if #words > 0 then
        return words
      else
        return odd_count
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkzl_rz5t.lua:24:
    attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpkzl_rz5t.lua:24:
    in local 'candidate'\n\t/tmp/tmpkzl_rz5t.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixememdw.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpixememdw.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        -- TODO: Implement this function
        return {}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pzz_2ep.lua:19:
    expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8pzz_2ep.lua:19:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = string.byte(c) - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43pstzyj.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp43pstzyj.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_bbq94x.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpi_bbq94x.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkx2in3ab.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpkx2in3ab.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local sum = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    sum = sum + 1
                end
            end
            return sum
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg2865bg.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpdg2865bg.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        -- TODO: Implement
        return {}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbg2qlocg.lua:19:
    expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpbg2qlocg.lua:19:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in string.gmatch(txt, "[^%s]+") do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            words = {}
            i = 1
            for word in string.gmatch(txt, "[^,]+") do
                words[i] = word
                i = i + 1
            end
            if #words == 0 then
                local count = 0
                for i = 1, #txt do
                    local c = string.byte(txt, i)
                    if c >= 97 and c <= 122 and i % 2 == 1 then
                        count = count + 1
                    end
                end
                return count
            end
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuey_555.lua:43:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpnuey_555.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
                if i % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            return odd_count
        else
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppc_j2za3.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmppc_j2za3.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvcpfh2c.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpsvcpfh2c.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3x7pnhn.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpd3x7pnhn.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
      -- TODO: Implement
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyca5uol.lua:18:
    expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmptyca5uol.lua:18:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for c in txt:gmatch('.') do
                if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hthq1m_.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp2hthq1m_.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local n = string.byte(c) - string.byte('a')
            if n % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2h9z065r.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp2h9z065r.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
        local c = txt:sub(i, i)
        if c == ' ' or c == ',' then
          if #word > 0 then
            words[#words + 1] = word
            word = ''
          end
        else
          word = word .. c
          local ord = string.byte(c) - string.byte('a')
          if ord % 2 == 1 then
            odd_count = odd_count + 1
          end
        end
      end
      if #word > 0 then
        words[#words + 1] = word
      end
      if #words > 0 then
        return words
      else
        return odd_count
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3i_642v.lua:45:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpo3i_642v.lua:45: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local n = string.byte(c) - string.byte('a')
            if n % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpns04gkt1.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpns04gkt1.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs2v4_b8.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpxs2v4_b8.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnx1l7nj.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpfnx1l7nj.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local count = 0
        for word in txt:gmatch('%w+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for i = 1, #txt do
                if txt:sub(i, i):lower():byte() % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oenq5lz.lua:31:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\t/tmp/tmp6oenq5lz.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c then
                    local ord = string.byte(c) - string.byte('a')
                    if ord % 2 == 1 then
                        count = count + 1
                    end
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqvdqzsa.lua:46:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpjqvdqzsa.lua:46: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
                if i % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdaczju8.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmppdaczju8.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c and c:upper() ~= c then
                    local ord = string.byte(c) - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            return odd_count
        else
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90obkban.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp90obkban.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local t = {}
        local i = 1
        local j = 1
        local n = 0
        while j <= #txt do
            if txt:sub(j, j) == ' ' or txt:sub(j, j) == ',' then
                if i < j then
                    t[#t + 1] = txt:sub(i, j - 1)
                    n = n + 1
                end
                i = j + 1
            end
            j = j + 1
        end
        if i <= j then
            t[#t + 1] = txt:sub(i, j - 1)
            n = n + 1
        end
        if n == 0 then
            n = 0
            for i = 1, #txt do
                if txt:sub(i, i) >= 'a' and txt:sub(i, i) <= 'z' and (i % 2) == 1 then
                    n = n + 1
                end
            end
        end
        return n == 0 and t or n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqena7066.lua:44:
    expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpqena7066.lua:44:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if (txt:byte(i) - ord('a')) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjc53r2p.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpdjc53r2p.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii6spqqv.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpii6spqqv.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7_w7yth.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpj7_w7yth.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo905i134.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpo905i134.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikbvofwp.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpikbvofwp.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local odd = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() ~= c:upper() then
                    local o = c:lower():byte() - string.byte('a')
                    if o % 2 == 1 then
                        odd = odd + 1
                    end
                end
            end
            return odd
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bbx3ket.lua:36:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp3bbx3ket.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        local odd = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = c:byte() - string.byte('a')
            if o % 2 == 1 then
                odd = odd + 1
            end
        end
        return odd
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcu2_4thw.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpcu2_4thw.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c:sub(1, 1) and i % 2 == 1 then
                    count = count + 1
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04fx9dpu.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp04fx9dpu.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yy_1yvf.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp1yy_1yvf.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        -- your code here
        local t = {}
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        local flag = 0
        while i <= #txt do
            if txt:sub(i, i) == ' ' then
                t[j] = txt:sub(k, i - 1)
                j = j + 1
                k = i + 1
                flag = 1
            elseif txt:sub(i, i) == ',' then
                t[j] = txt:sub(k, i - 1)
                j = j + 1
                k = i + 1
                flag = 1
            elseif txt:sub(i, i) >= 'a' and txt:sub(i, i) <= 'z' then
                if (i - k) % 2 == 1 then
                    count = count + 1
                end
            end
            i = i + 1
        end
        if flag == 1 then
            return t
        else
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4p93qvn.lua:47:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t/tmp/tmpt4p93qvn.lua:47:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        -- TODO: Implement
        return nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38ttic3a.lua:19:
    expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp38ttic3a.lua:19:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
                if i % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07fi661g.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp07fi661g.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = string.byte(c) - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6xstyn1.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpd6xstyn1.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if (txt:byte(i) - ord('a')) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vdr35h.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp45vdr35h.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local sum = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and c:byte() % 2 == 1 then
                    sum = sum + 1
                end
            end
            return sum
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qk_yylg.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp6qk_yylg.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_letters = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    odd_letters = odd_letters + 1
                end
            end
            return odd_letters
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuv3fyar.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpiuv3fyar.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        local j = 1
        while i <= #txt do
            if txt:sub(i, i) == ' ' then
                words[j] = txt:sub(1, i - 1)
                j = j + 1
                txt = txt:sub(i + 1)
                i = 1
            elseif txt:sub(i, i) == ',' then
                words[j] = txt:sub(1, i - 1)
                j = j + 1
                txt = txt:sub(i + 1)
                i = 1
            else
                i = i + 1
            end
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if txt:sub(i, i) ~= ' ' and txt:sub(i, i) ~= ',' then
                    if (ord(txt:sub(i, i)) - ord('a')) % 2 == 1 then
                        count = count + 1
                    end
                end
            end
            return count
        else
            words[j] = txt
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rsetrum.lua:51:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp_rsetrum.lua:51: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
      -- TODO: Implement
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4990xiwi.lua:18:
    expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp4990xiwi.lua:18:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local ord = string.byte(c) - string.byte('a')
            if ord % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zlbddht.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp4zlbddht.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = string.byte(c) - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvviuhefa.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpvviuhefa.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local sum = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c then
                    sum = sum + (i % 2)
                end
            end
            return sum
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dmgsdl7.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp2dmgsdl7.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c:sub(1, 1) and i % 2 == 1 then
                    count = count + 1
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3e9dwj9.lua:43:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpi3e9dwj9.lua:43: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local ord = string.byte(c) - string.byte('a')
            if ord % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua9y3p4e.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpua9y3p4e.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        local odd = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = c:byte() - string.byte('a')
            if o % 2 == 1 then
                odd = odd + 1
            end
        end
        return odd
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai87uf3m.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpai87uf3m.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local i = 1
        while i <= #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
            i = i + 1
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        local odd = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = c:byte() - ord('a')
            if o % 2 == 1 then
                odd = odd + 1
            end
        end
        return odd
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdri_sxsw.lua:49:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpdri_sxsw.lua:49: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = c:byte() - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnopuxkxw.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpnopuxkxw.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf07r8i7g.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpf07r8i7g.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
            if c >= 'a' and c <= 'z' and i % 2 == 1 then
                odd_count = odd_count + 1
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxdeyfew.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpvxdeyfew.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            return odd_count
        else
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaiiit3jw.lua:45:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpaiiit3jw.lua:45: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            local sum = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = c:byte() - string.byte('a')
                if o % 2 == 1 then
                    sum = sum + 1
                end
            end
            return sum
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxv0agbf.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmppxv0agbf.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local n = 0
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for c in txt:gmatch('.') do
                local o = c:byte() - string.byte('a')
                if o % 2 == 1 then
                    n = n + 1
                end
            end
        end
        return #words > 0 and words or n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgezfmn6.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpkgezfmn6.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
                if i % 2 == 1 then
                    local ord = string.byte(c) - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyn6n885s.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpyn6n885s.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for c in txt:gmatch('.') do
                if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupc2g6rl.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpupc2g6rl.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local i = 1
        local odd_count = 0
        while i <= #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
            i = i + 1
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local ord = string.byte(c) - string.byte('a')
            if ord % 2 == 1 then
                odd_count = odd_count + 1
            end
        end
        return odd_count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecnqs7sd.lua:49:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpecnqs7sd.lua:49: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in string.gmatch(txt, '[^%s]+') do
            table.insert(words, word)
        end
        if #words == 0 then
            words = {}
            for word in string.gmatch(txt, '[^,]+') do
                table.insert(words, word)
            end
            if #words == 0 then
                local count = 0
                for i = 1, #txt do
                    local c = string.byte(txt, i)
                    if c >= 97 and c <= 122 and i % 2 == 1 then
                        count = count + 1
                    end
                end
                return count
            end
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxihk2re.lua:39:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpbxihk2re.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = string.byte(c) - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqevr2a20.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpqevr2a20.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local n = string.byte(c) - string.byte('a')
            if n % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uf1ny6y.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp0uf1ny6y.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpd6e162.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpvpd6e162.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        if txt:find('%s') then
            return txt:split('%s')
        elseif txt:find(',') then
            return txt:split(',')
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and c:byte() % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8_6g507q.lua:13:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp8_6g507q.lua:13:
    in local 'candidate'\n\t/tmp/tmp8_6g507q.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        if txt:find(' ') then
            return txt:split(' ')
        elseif txt:find(',') then
            return txt:split(',')
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = c:byte() - 97
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppem454v6.lua:13:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmppem454v6.lua:13:
    in local 'candidate'\n\t/tmp/tmppem454v6.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        local j = 1
        local len = string.len(txt)
        while i <= len do
            if string.sub(txt, i, i) == ' ' then
                words[j] = string.sub(txt, 1, i - 1)
                j = j + 1
                txt = string.sub(txt, i + 1, len)
                i = 1
                len = string.len(txt)
            elseif string.sub(txt, i, i) == ',' then
                words[j] = string.sub(txt, 1, i - 1)
                j = j + 1
                txt = string.sub(txt, i + 1, len)
                i = 1
                len = string.len(txt)
            else
                i = i + 1
            end
        end
        if len > 0 then
            words[j] = txt
        end
        if #words == 0 then
            local count = 0
            for i = 1, len do
                if string.byte(txt, i) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1qf_qvk.lua:53:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpt1qf_qvk.lua:53: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9lz4re8.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpn9lz4re8.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c and c:upper() ~= c then
                    local ord = c:byte() - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            return odd_count
        else
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpw5jtup.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpkpw5jtup.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21ta3o8v.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp21ta3o8v.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a table of words split on whitespace,
    if no whitespaces exists in the text you\n-- should split on commas ',' if no
    commas exists you should return the number of lower-case letters with odd order
    in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n--
    >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n--
    {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\tif
    txt:find(' ') then\n\t\treturn txt:split(' ')\n\telseif txt:find(',') then\n\t\treturn
    txt:split(',')\n\telse\n\t\tlocal count = 0\n\t\tfor i = 1, #txt do\n\t\t\tlocal
    c = txt:sub(i, i)\n\t\t\tlocal n = c:byte() - 97\n\t\t\tif n % 2 == 1 then\n\t\t\t\tcount
    = count + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello
    world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),
    {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',
    'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',
    '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),
    2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),
    0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dm_wsjf.lua:13:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp7dm_wsjf.lua:13:
    in local 'candidate'\n\t/tmp/tmp7dm_wsjf.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local ord = string.byte(c) - string.byte('a')
            if ord % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t0siya0.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp6t0siya0.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedth2l81.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpedth2l81.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for c in txt:gmatch('.') do
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2dwzo5v.lua:46:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpq2dwzo5v.lua:46: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c and c:upper() == c then
                    odd_count = odd_count + 1
                end
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dryogkx.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp6dryogkx.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0r0dd4k.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpa0r0dd4k.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local sum = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    sum = sum + 1
                end
            end
            return sum
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9gwox5o.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpb9gwox5o.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local char = txt:sub(i, i)
            if char == ' ' or char == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. char
                if char:lower() == char and char:upper() ~= char then
                    local ord = string.byte(char) - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            return odd_count
        else
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8tzfgm5.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpn8tzfgm5.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('[^%s]+') do
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        for word in txt:gmatch('[^,]+') do
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        local count = 0
        for c in txt:gmatch('[a-z]') do
            if (string.byte(c) - string.byte('a')) % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12j6sg3h.lua:38:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp12j6sg3h.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in string.gmatch(txt, "%S+") do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for c in string.gmatch(txt, "%a") do
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14efoo15.lua:35:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp14efoo15.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6z8b3ame.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp6z8b3ame.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c and c:upper() == c then
                    -- skip non-alphabetic characters
                else
                    local ord = c:lower():byte() - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7imqe49o.lua:49:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp7imqe49o.lua:49: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local odd_count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() ~= c:upper() then
                    local ord = string.byte(c) - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
            return odd_count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrhm1stw.lua:36:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpcrhm1stw.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for c in txt:gmatch('.') do
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = c:byte() - ord('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo88ddfll.lua:46:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpo88ddfll.lua:46: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and c:byte() % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzuwkwkj.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpnzuwkwkj.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = string.byte(c) - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72iffpqy.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp72iffpqy.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpub6553h3.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpub6553h3.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and (i % 2) == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpci47ftih.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpci47ftih.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local ord = string.byte(c) - string.byte('a')
                if ord % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxdgqxbv.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpgxdgqxbv.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt92voguj.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpt92voguj.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c and c:upper() ~= c then
                    local ord = string.byte(c) - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words == 0 then
            return odd_count
        else
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxwptxjj.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpoxwptxjj.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for word in txt:gmatch('%a+') do
                words[#words + 1] = word
            end
        end
        if #words == 0 then
            local odd = 0
            for char in txt:gmatch('%a') do
                if char:byte() % 2 == 1 then
                    odd = odd + 1
                end
            end
            return odd
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8miy39u.lua:37:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpq8miy39u.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
                if i % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            return odd_count
        else
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej9qrjxj.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpej9qrjxj.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        local split_char = ' '
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == split_char then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            elseif c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
                split_char = ','
            else
                word = word .. c
                if c:lower() == c then
                    local ord = string.byte(c) - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3q0udgk.lua:54:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmph3q0udgk.lua:54: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local ch = txt:sub(i, i)
            if ch == ' ' or ch == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. ch
                local ord = string.byte(ch) - string.byte('a')
                if ord % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4z4bk2nf.lua:45:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp4z4bk2nf.lua:45: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local n = string.byte(c) - string.byte('a')
            if n % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz6fa4sx.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpfz6fa4sx.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = string.byte(c) - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepxfstxr.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpepxfstxr.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local n = string.byte(c) - string.byte('a')
            if n % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9w1wwmq.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpm9w1wwmq.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        local letters = {}
        for letter in txt:gmatch('%a') do
            table.insert(letters, letter)
        end
        if #letters > 0 then
            local count = 0
            for i, letter in ipairs(letters) do
                if i % 2 == 1 then
                    local ord = string.byte(letter) - string.byte('a')
                    if ord % 2 == 1 then
                        count = count + 1
                    end
                end
            end
            return count
        end
        return nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g2b3cj4.lua:42:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp7g2b3cj4.lua:42:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        local letters = {}
        for letter in txt:gmatch('%a') do
            letters[#letters + 1] = letter
        end
        if #letters > 0 then
            local odd_count = 0
            for _, letter in ipairs(letters) do
                if (letter:byte() - 97) % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
            return odd_count
        end
        return nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvicb4tnd.lua:39:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpvicb4tnd.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    odd = odd + 1
                end
            end
            return odd
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb_gvabq.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpsb_gvabq.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('[^%s]+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if txt:byte(i) - ord('a') % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwb4_9dym.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpwb4_9dym.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local n = 0
        for w in txt:gmatch('[^%s]+') do
            words[#words + 1] = w
            n = n + 1
        end
        if n == 0 then
            n = 0
            for w in txt:gmatch('[^,]+') do
                words[#words + 1] = w
                n = n + 1
            end
        end
        if n == 0 then
            n = 0
            for c in txt:gmatch('.') do
                local o = c:byte() - string.byte('a')
                if o % 2 == 1 then
                    n = n + 1
                end
            end
        end
        return n == 0 and words or n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jch_g9e.lua:40:
    expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmp8jch_g9e.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local odd_letters = 0
            for letter in txt:gmatch('%a') do
                if (string.byte(letter) - string.byte('a')) % 2 == 1 then
                    odd_letters = odd_letters + 1
                end
            end
            return odd_letters
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy0jtt2j.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmphy0jtt2j.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
            if c >= 'a' and c <= 'z' and i % 2 == 1 then
                odd_count = odd_count + 1
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2ekcg8e.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpo2ekcg8e.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = string.byte(c) - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpl9dwkl.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpvpl9dwkl.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in string.gmatch(txt, "%S+") do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = string.byte(txt, i) - string.byte('a')
                if c % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66zigxq2.lua:35:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp66zigxq2.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for word in txt:gmatch('[^,]+') do
                words[#words + 1] = word
            end
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c >= 'a' and c <= 'z' and i % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40ij63ha.lua:38:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp40ij63ha.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        if txt:find(' ') then
            return txt:split(' ')
        elseif txt:find(',') then
            return txt:split(',')
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and c:byte() % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp20je_7id.lua:13:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp20je_7id.lua:13:
    in local 'candidate'\n\t/tmp/tmp20je_7id.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c and c:upper() == c then
                    -- skip non-alphabet characters
                else
                    local ord = string.byte(c) - string.byte('a')
                    if ord % 2 == 1 then
                        odd_count = odd_count + 1
                    end
                end
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zl0ysdh.lua:49:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp2zl0ysdh.lua:49: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        if txt:find('%s') then
            return txt:split('%s')
        elseif txt:find(',') then
            return txt:split(',')
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:byte() - ord('a') % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhwvf54x.lua:13:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpwhwvf54x.lua:13:
    in local 'candidate'\n\t/tmp/tmpwhwvf54x.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and (i % 2) == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mlr7jla.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp2mlr7jla.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local n = string.byte(c) - string.byte('a')
            if n % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68k_bhf0.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp68k_bhf0.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in string.gmatch(txt, "%S+") do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local odd_count = 0
            for c in string.gmatch(txt, "%a") do
                if string.byte(c) % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
            return odd_count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fo5kvwr.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp4fo5kvwr.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%w+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if txt:byte(i) - ord('a') % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2it9e_9p.lua:31:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\t/tmp/tmp2it9e_9p.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for c in txt:gmatch('.') do
                local n = c:byte() - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplejacvys.lua:35:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmplejacvys.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local char = txt:sub(i, i)
            if char == ' ' or char == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. char
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            for i = 1, #txt do
                local char = txt:sub(i, i)
                local ord = string.byte(char) - string.byte('a')
                if ord % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4mgp584.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpg4mgp584.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
      local words = {}
      for word in txt:gmatch('%S+') do
        words[#words + 1] = word
      end
      if #words == 0 then
        local count = 0
        for i = 1, #txt do
          local c = txt:sub(i, i)
          if c:match('%l') and i % 2 == 1 then
            count = count + 1
          end
        end
        return count
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sm2ej4i.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp9sm2ej4i.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local char = txt:sub(i, i)
            if char == ' ' or char == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. char
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local char = txt:sub(i, i)
            if char >= 'a' and char <= 'z' and i % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfpb7mcm.lua:46:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmptfpb7mcm.lua:46: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c:sub(1, 1) and i % 2 == 1 then
                    count = count + 1
                end
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tz5wed8.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp5tz5wed8.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for word in txt:gmatch('%a+') do
                words[#words + 1] = word
            end
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and c:byte() % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kfengg4.lua:38:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp_kfengg4.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local ord = string.byte(c) - string.byte('a')
            if ord % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3z3peue.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpa3z3peue.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        if txt:find(' ') then
            return txt:split(' ')
        elseif txt:find(',') then
            return txt:split(',')
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and c:byte() % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2_4bzes7.lua:13:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2_4bzes7.lua:13:
    in local 'candidate'\n\t/tmp/tmp2_4bzes7.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        if txt:find(' ') then
            return txt:split(' ')
        elseif txt:find(',') then
            return txt:split(',')
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and c:byte() % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxdnm94lj.lua:13:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpxdnm94lj.lua:13:
    in local 'candidate'\n\t/tmp/tmpxdnm94lj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c >= 'a' and c <= 'z' and i % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8o9ensky.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp8o9ensky.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
                if string.byte(c) % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprudllafs.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmprudllafs.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local ord = string.byte(c) - string.byte('a')
            if ord % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4n7floyo.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp4n7floyo.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjd5t29r7.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpjd5t29r7.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = c:byte() - 97
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgaex486s.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpgaex486s.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgngo80i.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmplgngo80i.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if txt:byte(i) - 96 & 1 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s2zpt8o.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp8s2zpt8o.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = string.byte(c) - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9d3cmw0.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpf9d3cmw0.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in string.gmatch(txt, "[^%s]+") do
            table.insert(words, word)
        end
        if #words == 0 then
            for word in string.gmatch(txt, "[^,]+") do
                table.insert(words, word)
            end
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = string.byte(txt, i)
                if c >= string.byte('a') and c <= string.byte('z') and i % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnua087js.lua:38:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpnua087js.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        local j = 1
        local n = 0
        while true do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' or c == '' then
                if i > j then
                    words[#words + 1] = txt:sub(j, i - 1)
                end
                if c == '' then
                    break
                end
                j = i + 1
            elseif c:match('%l') then
                n = n + (ord(c) % 2)
            end
            i = i + 1
        end
        if #words == 0 then
            return n
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp63503_ys.lua:27:
    attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmp63503_ys.lua:27:
    in local 'candidate'\n\t/tmp/tmp63503_ys.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            local count = 0
            for c in txt:gmatch('[a-z]') do
                if (c:byte() - 97) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8epldyf.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpw8epldyf.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for c in txt:gmatch('[a-z]') do
                if (c:byte() - 97) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv81v7m7.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpcv81v7m7.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for c in txt:gmatch('.') do
                if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprorzj7jn.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmprorzj7jn.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
      local t = {}
      local i = 1
      local j = 1
      local k = 1
      local n = 0
      local c = 0
      local s = 0
      local e = 0
      local f = 0
      local l = string.len(txt)
      while i <= l do
        j = i
        while j <= l and string.byte(txt, j) ~= 32 and string.byte(txt, j) ~= 44 do
          j = j + 1
        end
        if j > i then
          if j < l then
            k = j + 1
            while k <= l and string.byte(txt, k) ~= 32 and string.byte(txt, k) ~= 44 do
              k = k + 1
            end
            if k > j + 1 then
              t[#t + 1] = string.sub(txt, i, j - 1)
              i = k
            else
              i = j
            end
          else
            t[#t + 1] = string.sub(txt, i, j - 1)
            i = j
          end
        else
          i = j + 1
        end
      end
      if #t == 0 then
        while i <= l do
          c = string.byte(txt, i)
          if c >= 97 and c <= 122 then
            if (c - 97) % 2 == 0 then
              s = s + 1
            else
              e = e + 1
            end
          end
          i = i + 1
        end
        if s > e then
          f = e
        else
          f = s
        end
        return f
      else
        return t
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3mn3001.lua:73:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t/tmp/tmpn3mn3001.lua:73:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpbg8v50.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmplpbg8v50.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
                if i % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmgs2irc.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpxmgs2irc.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and (i % 2) == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphrs9l5d.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpphrs9l5d.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local char = txt:sub(i, i)
            if char == ' ' or char == ',' then
                if #word > 0 then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. char
                if char:lower() == char:sub(1, 1) and char:lower() == char:sub(1, 1):byte() % 2 == 1 then
                    count = count + 1
                end
            end
        end
        if #word > 0 then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgel10fgl.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpgel10fgl.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local sum = 0
            for i = 1, #txt do
                if txt:byte(i) - ord('a') % 2 == 1 then
                    sum = sum + 1
                end
            end
            return sum
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzus_7oo9.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpzus_7oo9.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        local j = 1
        local count = 0
        while i <= #txt do
            if txt:sub(i, i) == ' ' or txt:sub(i, i) == ',' then
                if i > j then
                    words[#words + 1] = txt:sub(j, i - 1)
                end
                j = i + 1
            elseif txt:sub(i, i) >= 'a' and txt:sub(i, i) <= 'z' then
                count = count + (i - j) % 2
            end
            i = i + 1
        end
        if i > j then
            words[#words + 1] = txt:sub(j, i - 1)
        end
        if #words == 0 then
            return count
        else
            return words
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbd8q83v.lua:42:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpnbd8q83v.lua:42: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for word in txt:gmatch('%a+') do
                words[#words + 1] = word
            end
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if txt:byte(i) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqn4mw0l.lua:37:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmppqn4mw0l.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnammlqnn.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpnammlqnn.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local odd_letters = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() ~= c:upper() then
                    if (c:lower():byte() - 97) % 2 == 1 then
                        odd_letters = odd_letters + 1
                    end
                end
            end
            return odd_letters
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd7zq9md.lua:35:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpfd7zq9md.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ""
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == " " or c == "," then
                if #word > 0 then
                    table.insert(words, word)
                    word = ""
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w3ll8d6.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp9w3ll8d6.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = c:byte() - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w_vxhae.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp2w_vxhae.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local n = 0
        for word in string.gmatch(txt, "[^%s,]+") do
            table.insert(words, word)
            n = n + 1
        end
        if n == 0 then
            for c in string.gmatch(txt, "[a-z]") do
                n = n + (string.byte(c) - string.byte('a')) % 2
            end
        end
        return n == 0 and words or n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2tblrpq.lua:29:
    expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpq2tblrpq.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for c in txt:gmatch('.') do
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c then
                    odd_count = odd_count + (c:byte() % 2)
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprev5om3n.lua:43:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmprev5om3n.lua:43: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7heawqq.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmph7heawqq.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for c in txt:gmatch('.') do
                if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9n659274.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmp9n659274.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local sum = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    sum = sum + 1
                end
            end
            return sum
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzkuxn55.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpzzkuxn55.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        local j = 1
        local n = 0
        while true do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' or c == '' then
                if i > j then
                    words[#words + 1] = txt:sub(j, i - 1)
                end
                if c == '' then
                    break
                end
                j = i + 1
            elseif c:match('%a') then
                local ord = c:byte() - ord('a')
                if ord % 2 == 0 then
                    n = n + 1
                end
            end
            i = i + 1
        end
        if #words == 0 then
            return n
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppoi8112h.lua:27:
    attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmppoi8112h.lua:27:
    in local 'candidate'\n\t/tmp/tmppoi8112h.lua:43: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local char = txt:sub(i, i)
            if char == ' ' or char == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. char
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words == 0 then
            for i = 1, #txt do
                local char = txt:sub(i, i)
                local ord = string.byte(char) - string.byte('a')
                if ord % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ugx6bx9.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp2ugx6bx9.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and c:byte() % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnu409rp.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpqnu409rp.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local o = string.byte(c) - string.byte('a')
                if o % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vy7ff27.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp0vy7ff27.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local sum = 0
            for i = 1, #txt do
                if (i % 2 == 1) and (txt:byte(i) >= 97) and (txt:byte(i) <= 122) then
                    sum = sum + 1
                end
            end
            return sum
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekgw6w8y.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpekgw6w8y.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if txt:byte(i) - 96 % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcriufatz.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpcriufatz.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    words[#words + 1] = word
                    word = ''
                end
            else
                word = word .. c
                if c:lower() == c:sub(1, 1) and i % 2 == 1 then
                    count = count + 1
                end
            end
        end
        if word ~= '' then
            words[#words + 1] = word
        end
        if #words > 0 then
            return words
        else
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj660skj1.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpj660skj1.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c >= 'a' and c <= 'z' then
                    local n = c:byte() - 'a':byte()
                    if n % 2 == 0 then
                        count = count + 1
                    end
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp7ucpbj8i.lua:35: unexpected symbol near '':''

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if txt:byte(i) - ord('a') % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte_58_8a.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpte_58_8a.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words == 0 then
            local count = 0
            for c in txt:gmatch('.') do
                if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcnji1lg.lua:34:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpzcnji1lg.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            table.insert(words, word)
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:lower() == c and (i % 2) == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqr2ff28.lua:33:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpyqr2ff28.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        for word in txt:gmatch('%S+') do
            words[i] = word
            i = i + 1
        end
        if #words > 0 then
            return words
        end
        local odd_letters = 0
        for c in txt:gmatch('.') do
            if c:lower() ~= c:upper() then
                local ord = string.byte(c:lower()) - string.byte('a')
                if ord % 2 == 1 then
                    odd_letters = odd_letters + 1
                end
            end
        end
        return odd_letters
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjkw5g40.lua:37:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpyjkw5g40.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        if txt:find(' ') then
            return txt:split(' ')
        elseif txt:find(',') then
            return txt:split(',')
        else
            local count = 0
            for i = 1, #txt do
                if txt:byte(i) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeka1xthl.lua:13:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpeka1xthl.lua:13:
    in local 'candidate'\n\t/tmp/tmpeka1xthl.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = c:byte() - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqp6j63h.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmppqp6j63h.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
      local words = {}
      local i = 1
      local j = 1
      local n = 0
      while true do
        local c = txt:sub(i, i)
        if c == ' ' or c == ',' or c == '' then
          if i > j then
            words[#words + 1] = txt:sub(j, i - 1)
          end
          if c == '' then
            break
          end
          j = i + 1
        end
        i = i + 1
      end
      if #words == 0 then
        for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = c:byte() - string.byte('a')
          if o >= 0 and o < 26 then
            n = n + (o % 2 == 0 and -1 or 1)
          end
        end
        return n
      end
      return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil_f3mgl.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpil_f3mgl.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_jmb_y_.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpk_jmb_y_.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local i = 1
        local j = 1
        local n = 0
        while true do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' or c == '' then
                if i > j then
                    words[#words + 1] = txt:sub(j, i - 1)
                end
                if c == '' then
                    break
                end
                j = i + 1
            elseif c >= 'a' and c <= 'z' then
                n = n + (i - 1) % 2
            end
            i = i + 1
        end
        if #words == 0 then
            return n
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd6f_i0f.lua:42:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpfd6f_i0f.lua:42: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local count = 0
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for i = 1, #txt do
                if txt:sub(i, i):lower():byte() % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzj9xp16.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpgzj9xp16.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
        local c = txt:sub(i, i)
        if c == ' ' or c == ',' then
          if #word > 0 then
            words[#words + 1] = word
            word = ''
          end
        else
          word = word .. c
        end
      end
      if #word > 0 then
        words[#words + 1] = word
      end
      if #words > 0 then
        return words
      end
      for i = 1, #txt do
        local c = txt:sub(i, i)
        local ord = string.byte(c) - string.byte('a')
        if ord % 2 == 1 then
          count = count + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42vcj47f.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp42vcj47f.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local odd_count = 0
        for i = 1, #txt do
            local char = txt:sub(i, i)
            if char == ' ' or char == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. char
                if i % 2 == 1 then
                    odd_count = odd_count + 1
                end
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            return odd_count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7hb19m9.lua:44:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpw7hb19m9.lua:44: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
        local c = txt:sub(i, i)
        if c == ' ' or c == ',' then
          if word ~= '' then
            words[#words + 1] = word
            word = ''
          end
        else
          word = word .. c
        end
      end
      if word ~= '' then
        words[#words + 1] = word
      end
      if #words > 0 then
        return words
      end
      for i = 1, #txt do
        local c = txt:sub(i, i)
        local o = string.byte(c) - string.byte('a')
        if o % 2 == 1 then
          count = count + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbl4i0mkq.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpbl4i0mkq.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if word ~= '' then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if word ~= '' then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        end
        for i = 1, #txt do
            local c = txt:sub(i, i)
            local o = c:byte() - string.byte('a')
            if o % 2 == 1 then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pm7yfch.lua:47:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmp5pm7yfch.lua:47: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            for word in txt:gmatch('[^,]+') do
                words[#words + 1] = word
            end
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                local c = txt:sub(i, i)
                if c:match('%l') and i % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphejsscnn.lua:38:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmphejsscnn.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        local word = ''
        local count = 0
        for i = 1, #txt do
            local c = txt:sub(i, i)
            if c == ' ' or c == ',' then
                if #word > 0 then
                    table.insert(words, word)
                    word = ''
                end
            else
                word = word .. c
            end
        end
        if #word > 0 then
            table.insert(words, word)
        end
        if #words > 0 then
            return words
        else
            for i = 1, #txt do
                local c = txt:sub(i, i)
                local n = string.byte(c) - string.byte('a')
                if n % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqix1gxwq.lua:48:
    expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\nstack
    traceback:\n\t/tmp/tmpqix1gxwq.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
    -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    -- Examples
    -- >>> split_words('Hello world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('Hello,world!')
    -- {'Hello', 'world!'}
    -- >>> split_words('abcdef')
    -- 3
    local function split_words(txt)
        local words = {}
        for word in txt:gmatch('%S+') do
            words[#words + 1] = word
        end
        if #words == 0 then
            local count = 0
            for i = 1, #txt do
                if (txt:byte(i) - ord('a')) % 2 == 1 then
                    count = count + 1
                end
            end
            return count
        end
        return words
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = split_words
        lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
        lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
        lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
        lu.assertEquals(candidate('abcdef'), 3)
        lu.assertEquals(candidate('aaabb'), 2)
        lu.assertEquals(candidate('aaaBb'), 1)
        lu.assertEquals(candidate(''), 0)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmju4x_b2.lua:32:
    expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\t/tmp/tmpmju4x_b2.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
