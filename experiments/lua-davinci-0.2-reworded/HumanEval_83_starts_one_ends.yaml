---
name: HumanEval_83_starts_one_ends
language: lua
prompt: |
  -- Given a positive integer n, return the count of the numbers of n-digit
  -- positive integers that start or end with 1.
  local function starts_one_ends(n)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = starts_one_ends
      lu.assertEquals(candidate(1), 1)
      lu.assertEquals(candidate(2), 18)
      lu.assertEquals(candidate(3), 180)
      lu.assertEquals(candidate(4), 1800)
      lu.assertEquals(candidate(5), 18000)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local d = 10 ^ (n - 1)
    local a = starts_one_ends(n - 1)
    local b = starts_one_ends(n - 2)
    return a + b * (d - 1)
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      local dp = {[1] = 2, [2] = 4}
      for i = 3, n do
          dp[i] = dp[i - 1] + dp[i - 2]
      end
      return dp[n]
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + 9 * 10 ^ (i - 1)
    end
    count = count + 10 ^ (n - 1)
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 4
    end
    local a, b = 2, 4
    for i = 3, n do
      local c = a + b
      a, b = b, c
    end
    return b
  end
- |2-
      if n == 1 then
          return 2
      end
      local total = 0
      for i = 1, n - 1 do
          total = total + 9 * 10 ^ (i - 1)
      end
      return total * 2
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 2, n do
      count = count + 9 * 10 ^ (i - 2)
    end
    return count * 2
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local d = 10 ^ (n - 1)
      local count = 0
      for i = 1, 9 do
          count = count + starts_one_ends(n - 1)
      end
      count = count + 9 * (d - 1)
      return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + 9 * 10 ^ (i - 1)
      end
      return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 1, n - 1 do
      count = count * 9
    end
    return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + 9 * (10 ^ (i - 1))
      end
      return 2 * count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      local dp = {}
      for i = 1, n do
          dp[i] = {}
      end
      dp[1][1] = 2
      dp[1][2] = 2
      dp[2][1] = 4
      dp[2][2] = 4
      for i = 3, n do
          dp[i][1] = dp[i - 1][1] + dp[i - 1][2]
          dp[i][2] = dp[i - 1][1] + dp[i - 1][2]
      end
      return dp[n][1] + dp[n][2]
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 4
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, 9 do
        dp[i][j] = 0
      end
    end
    for i = 1, 9 do
      dp[1][i] = 1
    end
    for i = 2, n do
      for j = 1, 9 do
        if j == 1 then
          dp[i][j] = dp[i - 1][j] + dp[i - 1][j + 1]
        elseif j == 9 then
          dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]
        else
          dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j + 1]
        end
      end
    end
    local sum = 0
    for i = 1, 9 do
      sum = sum + dp[n][i]
    end
    return sum
  end
- |2-
    if n == 1 then
      return 2
    end
    local dp = {0, 1, 1}
    for i = 3, n do
      dp[i] = dp[i - 1] + dp[i - 2]
    end
    return dp[n] * 2
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 1
      for i = 2, n do
          count = count * 10
      end
      return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local dp = {1, 1}
      for i = 3, n do
          dp[i] = dp[i - 1] + dp[i - 2]
      end
      return dp[n] * 2
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 1, n - 1 do
      count = count * 10
    end
    return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 1
      for i = 1, n - 1 do
          count = count * 10
      end
      return count * 2
  end
- |2-
    if n == 1 then
      return 1
    end
    local count = 0
    for i = 1, 9 do
      count = count + starts_one_ends(n - 1)
    end
    count = count + starts_one_ends(n - 1)
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + 9 * 10 ^ (i - 1)
      end
      return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local dp = {}
    dp[0] = 0
    dp[1] = 1
    for i = 2, n do
      dp[i] = dp[i - 1] * 9 + dp[i - 2] * 9
    end
    return dp[n]
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n do
      count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n do
      count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 1
      for i = 1, n - 1 do
          count = count * 10
      end
      return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local a = 1
    local b = 1
    for i = 2, n do
      local c = a + b
      a = b
      b = c
    end
    return b + a
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local dp = {0, 1, 1}
    for i = 3, n do
      dp[i] = dp[i - 1] + dp[i - 2]
    end
    return dp[n] * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local a, b = 1, 1
      for i = 2, n do
          a, b = a + b, a
      end
      return a + b
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + 9 * 10 ^ (i - 1)
      end
      return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    local dp = {0, 1, 1, 1, 1, 1, 1, 1, 1, 1}
    for i = 2, n do
      dp[i] = dp[i - 1] * 10 - dp[i - 2]
    end
    return dp[n]
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    local i = 1
    while i <= n do
      count = count + 9 * (10 ^ (i - 1))
      i = i + 1
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 3
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, 9 do
      count = count + starts_one_ends(n - 1)
    end
    count = count + starts_one_ends(n - 1)
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 1, n - 1 do
      count = count * 9
    end
    return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      local dp = {0, 2, 4}
      for i = 3, n do
          dp[i] = dp[i - 1] + dp[i - 2]
      end
      return dp[n]
  end
- |2-
    local count = 0
    local i = 1
    while i <= n do
      count = count + math.pow(10, i - 1)
      i = i + 1
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + 9 * math.pow(10, i - 1)
      end
      return count * 2
  end
- |2-
    local count = 0
    local start = 10^(n-1)
    local end_ = 10^n - 1
    for i = start, end_ do
      if tostring(i):match("^1") or tostring(i):match("1$") then
        count = count + 1
      end
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
      if n == 1 then
          return 2
      end
      local sum = 1
      for i = 1, n - 1 do
          sum = sum + 9 * 9 ^ (i - 1)
      end
      return sum * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 3
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 1, n - 1 do
      count = count * 10
    end
    return count * 2
  end
- |2-
      local count = 0
      local digits = {}
      for i = 1, n do
          digits[i] = 0
      end
      while true do
          if digits[1] == 1 or digits[n] == 1 then
              count = count + 1
          end
          local i = n
          while i > 0 and digits[i] == 9 do
              digits[i] = 0
              i = i - 1
          end
          if i == 0 then
              break
          end
          digits[i] = digits[i] + 1
      end
      return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 1
      for i = 2, n do
          count = count * 10
      end
      return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + 9 * 10 ^ (i - 1)
      end
      return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 1, n - 1 do
      count = count * 9
    end
    return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local dp = {0, 1, 1}
      for i = 3, n do
          dp[i] = dp[i - 1] + dp[i - 2]
      end
      return dp[n] * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 3
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      local i = 1
      while i <= n do
          count = count + 9 * 10 ^ (i - 1)
          i = i + 1
      end
      return count * 2
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 10^(i - 1)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    local first_digit = 1
    local last_digit = 1
    local digits = n - 2
    while digits > 0 do
      count = count + first_digit * last_digit * 9 * math.pow(10, digits - 1)
      digits = digits - 1
    end
    count = count + first_digit + last_digit
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 1, n - 1 do
      count = count * 9
    end
    return count * 2
  end
- |2-
      local count = 0
      for i = 1, n do
          count = count + 10^(i - 1)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local dp = {0, 1, 1}
    for i = 3, n do
      dp[i] = dp[i - 1] + dp[i - 2]
    end
    return dp[n] * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local dp = {0, 1, 1}
    for i = 3, n do
      dp[i] = dp[i - 1] + dp[i - 2]
    end
    return dp[n] * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    local digits = {}
    for i = 1, n do
      digits[i] = 0
    end
    digits[1] = 1
    while true do
      count = count + 1
      digits[n] = digits[n] + 1
      for i = n, 2, -1 do
        if digits[i] == 10 then
          digits[i] = 0
          digits[i - 1] = digits[i - 1] + 1
        end
      end
      if digits[1] == 2 then
        break
      end
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      local dp = {}
      dp[1] = 2
      dp[2] = 4
      for i = 3, n do
          dp[i] = dp[i - 1] + dp[i - 2]
      end
      return dp[n]
  end
- |2-
    local function count(n)
      if n == 1 then
        return 2
      else
        return 10 * count(n - 1) - count(n - 2)
      end
    end
    return count(n)
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + 9 * 10 ^ (i - 1)
      end
      return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n do
      count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local dp = {[1] = 2}
    for i = 2, n do
      dp[i] = dp[i - 1] + 9 * math.pow(10, i - 2)
    end
    return dp[n]
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 10^(i - 1)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 4
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 4
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 3
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 3
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    local function count(n, start_one, end_one)
      if n == 0 then
        return 1
      end
      local c = 0
      if start_one then
        c = c + count(n - 1, true, true)
      end
      if end_one then
        c = c + count(n - 1, false, true)
      end
      return c
    end
    return count(n, true, false)
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 10 ^ (i - 1)
    end
    return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 4
    end
    local a = 2
    local b = 4
    for i = 3, n do
      local c = a + b
      a = b
      b = c
    end
    return b
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 1, n - 1 do
      count = count * 9
    end
    return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n do
      count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      return starts_one_ends(n - 1) + 9 * (n - 1)
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 3
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local x = 10^(n-1)
    local y = 10^(n-2)
    return x + 9*y
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + 9 * 10 ^ (i - 1)
      end
      return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + math.pow(10, i - 1)
      end
      return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      local i = 1
      while i <= n do
          count = count + 9 * 10 ^ (i - 1)
          i = i + 1
      end
      return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 1
      for i = 1, n - 1 do
          count = count * 9
      end
      return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local a, b = 2, 9
      for i = 2, n - 1 do
          a, b = a + b, b * 9
      end
      return a + b
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      local start = 1
      local end_ = 1
      for i = 2, n do
          start = start * 10
          end_ = end_ * 10 + 1
      end
      count = count + start
      count = count + end_
      return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 3
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local sum = 0
    for i = 1, n - 1 do
      sum = sum + starts_one_ends(i) * (10 ^ (n - i - 1))
    end
    return sum + 10 ^ (n - 1)
  end
- |2-
     if n == 1 then
        return 2
     else
        return starts_one_ends(n-1) + 9 * count_nines(n-1)
     end
  end
- |2-
      if n == 1 then
          return 2
      end
      local a, b = 1, 1
      for i = 2, n do
          a, b = a + b, a
      end
      return a + b
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + 9 * 10 ^ (i - 1)
    end
    count = count + 10 ^ (n - 1)
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + 9 * (10 ^ (i - 1))
      end
      return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    local base = 10
    for i = 2, n do
      count = count + base
      base = base * 10
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 1
      for i = 1, n - 1 do
          count = count * 9
      end
      return count * 2
  end
- |2-
      local function starts_one(n)
          if n == 1 then
              return 1
          end
          return 9 * starts_one(n - 1)
      end
      local function ends_one(n)
          if n == 1 then
              return 1
          end
          return 10 * ends_one(n - 1)
      end
      return starts_one(n) + ends_one(n)
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      local count = 4
      for i = 3, n do
          count = count + 9 * (10 ^ (i - 2))
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 9 * 10 ^ (i - 1)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local a = 1
    local b = 1
    for i = 2, n do
      a, b = b, a + b
    end
    return a + b
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local f = {0, 1, 1}
      for i = 3, n do
          f[i] = f[i - 1] + f[i - 2]
      end
      return f[n] * 2
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + 10^(i - 1)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 4
    end
    local count = 0
    for i = 1, n do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i)
      end
      return count + 1
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 1, n - 1 do
      count = count * 10
    end
    return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local sum = 0
    for i = 1, n - 1 do
      sum = sum + 9 * (10 ^ (i - 1))
    end
    return sum * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local sum = 0
      for i = 1, n - 1 do
          sum = sum + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return sum
  end
- |2-
      if n == 1 then
          return 2
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local total = 0
      for i = 1, n do
          total = total + math.pow(9, i)
      end
      return total * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    for i = 1, n - 1 do
      count = count * 10
    end
    return count * 2
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 4
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n - 1 do
          count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local a, b = 1, 1
    for i = 2, n do
      a, b = b, a + b
    end
    return a + b
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 1
      for i = 1, n - 1 do
          count = count * 10
      end
      return count * 2
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      if n == 3 then
          return 10
      end
      if n == 4 then
          return 20
      end
      if n == 5 then
          return 35
      end
      if n == 6 then
          return 56
      end
      if n == 7 then
          return 84
      end
      if n == 8 then
          return 120
      end
      if n == 9 then
          return 165
      end
      if n == 10 then
          return 220
      end
      if n == 11 then
          return 286
      end
      if n == 12 then
          return 364
      end
      if n == 13 then
          return 455
      end
      if n == 14 then
          return 560
      end
      if n == 15 then
          return 680
      end
      if n == 16 then
          return 816
      end
      if n == 17 then
          return 969
      end
      if n == 18 then
          return 1140
      end
      if n == 19 then
          return 1330
      end
      if n == 20 then
          return 1540
      end
      if n == 21 then
          return 1771
      end
      if n == 22 then
          return 2024
      end
      if n == 23 then
          return 2300
      end
      if n == 24 then
          return 2600
      end
      if n == 25 then
          return 2925
      end
      if n == 26 then
          return 3276
      end
      if n == 27 then
          return 3654
      end
      if n == 28 then
          return 4060
      end
      if n == 29 then
          return 4495
      end
      if n == 30 then
          return 4960
      end
      if n == 31 then
          return 5456
      end
      if n == 32 then
          return 5980
      end
      if n == 33 then
          return 6535
      end
      if n == 34 then
          return 7120
      end
      if n == 35 then
          return 7736
      end
      if n
- |2-
    if n == 1 then
      return 2
    end
    local count = 1
    local base = 10
    for i = 2, n do
      count = count + base
      base = base * 10
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
    if n == 1 then
      return 2
    end
    local count = 0
    for i = 1, n - 1 do
      count = count + starts_one_ends(i)
    end
    return count + 1
  end
- |2-
      if n == 1 then
          return 2
      end
      local a, b = 1, 1
      for i = 2, n do
          a, b = b, a + b
      end
      return a + b
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    if n == 1 then
      return 2
    end
    local sum = 0
    for i = 1, n - 1 do
      sum = sum + starts_one_ends(i) * starts_one_ends(n - i)
    end
    return sum
  end
- |2-
    if n == 1 then
      return 2
    end
    if n == 2 then
      return 3
    end
    return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 0
      for i = 1, n do
          count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
  end
- |2-
      if n == 1 then
          return 2
      end
      if n == 2 then
          return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
  end
- |2-
    local digits = {}
    for i = 1, n do
      digits[i] = 1
    end
    local count = 0
    while true do
      count = count + 1
      if digits[n] == 9 then
        local i = n - 1
        while i > 0 and digits[i] == 9 do
          i = i - 1
        end
        if i == 0 then
          break
        end
        digits[i] = digits[i] + 1
        for j = i + 1, n do
          digits[j] = 1
        end
      else
        digits[n] = digits[n] + 1
      end
    end
    return count
  end
- |2-
      if n == 1 then
          return 2
      end
      local count = 1
      for i = 1, n - 1 do
          count = count * 9
      end
      return count * 2
  end
- |2-
    local count = 0
    for i = 1, n do
      count = count + math.pow(10, i - 1)
    end
    return count
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
