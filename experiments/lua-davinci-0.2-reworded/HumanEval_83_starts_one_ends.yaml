name: HumanEval_83_starts_one_ends
language: lua
prompt: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
  -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n\
  \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n \
  \   lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n\
  \    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local count = 0\n  for i = 1, n do\n    count = count + 9 * 10 ^\
    \ (i - 1)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", " \
    \   if n == 1 then\n        return 2\n    end\n    local count = 0\n    for i\
    \ = 1, n do\n        count = count + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local d = 10 ^ (n - 1)\n  local a = starts_one_ends(n - 1)\n  local b = starts_one_ends(n\
    \ - 2)\n  return a + b * (d - 1)\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    if n == 2 then\n        return 4\n    end\n    local dp = {[1] =\
    \ 2, [2] = 4}\n    for i = 3, n do\n        dp[i] = dp[i - 1] + dp[i - 2]\n  \
    \  end\n    return dp[n]\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 0\n    for i = 1, n do\n        count = count + starts_one_ends(i\
    \ - 1) * starts_one_ends(n - i)\n    end\n    return count\nend", "  if n == 1\
    \ then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count\
    \ = count + 9 * 10 ^ (i - 1)\n  end\n  count = count + 10 ^ (n - 1)\n  return\
    \ count\nend", "  if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return\
    \ 4\n  end\n  local a, b = 2, 4\n  for i = 3, n do\n    local c = a + b\n    a,\
    \ b = b, c\n  end\n  return b\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    local total = 0\n    for i = 1, n - 1 do\n        total = total +\
    \ 9 * 10 ^ (i - 1)\n    end\n    return total * 2\nend", "  local count = 0\n\
    \  for i = 1, n do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n  return count\n\
    end", "    if n == 1 then\n        return 2\n    end\n    local count = 0\n  \
    \  for i = 1, n - 1 do\n        count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 1\n  for i = 2, n do\n    count = count + 9 * 10 ^ (i - 2)\n\
    \  end\n  return count * 2\nend", "  local count = 0\n  for i = 1, n do\n    count\
    \ = count + math.pow(10, i - 1)\n  end\n  return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local d = 10 ^ (n - 1)\n    local count = 0\n\
    \    for i = 1, 9 do\n        count = count + starts_one_ends(n - 1)\n    end\n\
    \    count = count + 9 * (d - 1)\n    return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n   \
    \     count = count + starts_one_ends(i) * starts_one_ends(n - i)\n    end\n \
    \   return count\nend", "  if n == 1 then\n    return 2\n  end\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count +\
    \ 9 * 10 ^ (i - 1)\n    end\n    return count * 2\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n   \
    \     count = count + starts_one_ends(i) * starts_one_ends(n - i)\n    end\n \
    \   return count\nend", "  if n == 1 then\n    return 2\n  end\n  local count\
    \ = 1\n  for i = 1, n - 1 do\n    count = count * 9\n  end\n  return count * 2\n\
    end", "    if n == 1 then\n        return 2\n    end\n    local count = 0\n  \
    \  for i = 1, n - 1 do\n        count = count + 9 * (10 ^ (i - 1))\n    end\n\
    \    return 2 * count\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    if n == 2 then\n        return 4\n    end\n    local dp = {}\n    for i =\
    \ 1, n do\n        dp[i] = {}\n    end\n    dp[1][1] = 2\n    dp[1][2] = 2\n \
    \   dp[2][1] = 4\n    dp[2][2] = 4\n    for i = 3, n do\n        dp[i][1] = dp[i\
    \ - 1][1] + dp[i - 1][2]\n        dp[i][2] = dp[i - 1][1] + dp[i - 1][2]\n   \
    \ end\n    return dp[n][1] + dp[n][2]\nend", "    if n == 1 then\n        return\
    \ 2\n    end\n    local count = 0\n    for i = 1, n do\n        count = count\
    \ + starts_one_ends(i - 1) * starts_one_ends(n - i)\n    end\n    return count\n\
    end", "  if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 4\n\
    \  end\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "  if\
    \ n == 1 then\n    return 2\n  end\n  local dp = {}\n  for i = 1, n do\n    dp[i]\
    \ = {}\n    for j = 1, 9 do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1,\
    \ 9 do\n    dp[1][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, 9 do\n    \
    \  if j == 1 then\n        dp[i][j] = dp[i - 1][j] + dp[i - 1][j + 1]\n      elseif\
    \ j == 9 then\n        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n      else\n\
    \        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j + 1]\n     \
    \ end\n    end\n  end\n  local sum = 0\n  for i = 1, 9 do\n    sum = sum + dp[n][i]\n\
    \  end\n  return sum\nend", "  if n == 1 then\n    return 2\n  end\n  local dp\
    \ = {0, 1, 1}\n  for i = 3, n do\n    dp[i] = dp[i - 1] + dp[i - 2]\n  end\n \
    \ return dp[n] * 2\nend", "  local count = 0\n  for i = 1, n do\n    count = count\
    \ + math.pow(10, i - 1)\n  end\n  return count\nend", "    if n == 1 then\n  \
    \      return 2\n    end\n    local count = 1\n    for i = 2, n do\n        count\
    \ = count * 10\n    end\n    return count * 2\nend", "    if n == 1 then\n   \
    \     return 2\n    end\n    local dp = {1, 1}\n    for i = 3, n do\n        dp[i]\
    \ = dp[i - 1] + dp[i - 2]\n    end\n    return dp[n] * 2\nend", "  local count\
    \ = 0\n  for i = 1, n do\n    count = count + math.pow(10, i - 1)\n  end\n  return\
    \ count\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  for\
    \ i = 1, n - 1 do\n    count = count * 10\n  end\n  return count * 2\nend", " \
    \   if n == 1 then\n        return 2\n    end\n    if n == 2 then\n        return\
    \ 4\n    end\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend",
  "    if n == 1 then\n        return 2\n    end\n    local count = 1\n    for i =\
    \ 1, n - 1 do\n        count = count * 10\n    end\n    return count * 2\nend",
  "  if n == 1 then\n    return 1\n  end\n  local count = 0\n  for i = 1, 9 do\n \
    \   count = count + starts_one_ends(n - 1)\n  end\n  count = count + starts_one_ends(n\
    \ - 1)\n  return count\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    if n == 2 then\n        return 4\n    end\n    return starts_one_ends(n -\
    \ 1) + starts_one_ends(n - 2)\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count +\
    \ 9 * 10 ^ (i - 1)\n    end\n    return count * 2\nend", "  if n == 1 then\n \
    \   return 2\n  end\n  local dp = {}\n  dp[0] = 0\n  dp[1] = 1\n  for i = 2, n\
    \ do\n    dp[i] = dp[i - 1] * 9 + dp[i - 2] * 9\n  end\n  return dp[n]\nend",
  "    if n == 1 then\n        return 2\n    end\n    if n == 2 then\n        return\
    \ 4\n    end\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend",
  "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n do\n \
    \   count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)\n  end\n \
    \ return count\nend", "  if n == 1 then\n    return 2\n  end\n  local count =\
    \ 0\n  for i = 1, n do\n    count = count + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 1\n    for i = 1, n - 1 do\n   \
    \     count = count * 10\n    end\n    return count * 2\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local a = 1\n  local b = 1\n  for i = 2, n do\n    local\
    \ c = a + b\n    a = b\n    b = c\n  end\n  return b + a\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count = count\
    \ + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return count\nend",
  "  local count = 0\n  for i = 1, n do\n    count = count + math.pow(10, i - 1)\n\
    \  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ dp = {0, 1, 1}\n  for i = 3, n do\n    dp[i] = dp[i - 1] + dp[i - 2]\n  end\n\
    \  return dp[n] * 2\nend", "  if n == 1 then\n    return 2\n  end\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    local a, b = 1, 1\n    for i = 2, n do\n        a, b = a + b, a\n\
    \    end\n    return a + b\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n    end\n    return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n   \
    \     count = count + 9 * 10 ^ (i - 1)\n    end\n    return count * 2\nend", " \
    \ if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n\
    \    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return\
    \ count\nend", "  local dp = {0, 1, 1, 1, 1, 1, 1, 1, 1, 1}\n  for i = 2, n do\n\
    \    dp[i] = dp[i - 1] * 10 - dp[i - 2]\n  end\n  return dp[n]\nend", "  if n\
    \ == 1 then\n    return 2\n  end\n  local count = 0\n  local i = 1\n  while i\
    \ <= n do\n    count = count + 9 * (10 ^ (i - 1))\n    i = i + 1\n  end\n  return\
    \ count\nend", "  local count = 0\n  for i = 1, n do\n    count = count + 9 *\
    \ 10 ^ (i - 1)\n  end\n  return count\nend", "  if n == 1 then\n    return 2\n\
    \  end\n  if n == 2 then\n    return 3\n  end\n  return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2)\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 0\n    for i = 1, n do\n        count = count + starts_one_ends(i\
    \ - 1) * starts_one_ends(n - i)\n    end\n    return count\nend", "    if n ==\
    \ 1 then\n        return 2\n    end\n    local count = 0\n    for i = 1, n do\n\
    \        count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)\n   \
    \ end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ count = 0\n  for i = 1, 9 do\n    count = count + starts_one_ends(n - 1)\n \
    \ end\n  count = count + starts_one_ends(n - 1)\n  return count\nend", "  if n\
    \ == 1 then\n    return 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n \
    \   count = count * 9\n  end\n  return count * 2\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n   \
    \     count = count + starts_one_ends(i) * starts_one_ends(n - i)\n    end\n \
    \   return count\nend", "    if n == 1 then\n        return 2\n    end\n    if\
    \ n == 2 then\n        return 4\n    end\n    local dp = {0, 2, 4}\n    for i\
    \ = 3, n do\n        dp[i] = dp[i - 1] + dp[i - 2]\n    end\n    return dp[n]\n\
    end", "  local count = 0\n  local i = 1\n  while i <= n do\n    count = count\
    \ + math.pow(10, i - 1)\n    i = i + 1\n  end\n  return count\nend", "  if n ==\
    \ 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count\
    \ = count + 9 * 10 ^ (i - 1)\n  end\n  return count * 2\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count = count\
    \ + 9 * 10 ^ (i - 1)\n  end\n  return count * 2\nend", "    if n == 1 then\n \
    \       return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n    \
    \    count = count + 9 * math.pow(10, i - 1)\n    end\n    return count * 2\n\
    end", "  local count = 0\n  local start = 10^(n-1)\n  local end_ = 10^n - 1\n\
    \  for i = start, end_ do\n    if tostring(i):match(\"^1\") or tostring(i):match(\"\
    1$\") then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \   if n == 1 then\n        return 2\n    end\n    if n == 2 then\n        return\
    \ 4\n    end\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend",
  "    if n == 1 then\n        return 2\n    end\n    local sum = 1\n    for i = 1,\
    \ n - 1 do\n        sum = sum + 9 * 9 ^ (i - 1)\n    end\n    return sum * 2\n\
    end", "    if n == 1 then\n        return 2\n    end\n    local count = 0\n  \
    \  for i = 1, n - 1 do\n        count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "  if n == 1 then\n \
    \   return 2\n  end\n  if n == 2 then\n    return 3\n  end\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "  local count = 0\n  for i = 1, n do\n\
    \    count = count + 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, n do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n  return\
    \ count\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 0\n    for i = 1, n do\n        count = count + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "  if n == 1 then\n \
    \   return 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n    count = count\
    \ * 10\n  end\n  return count * 2\nend", "    local count = 0\n    local digits\
    \ = {}\n    for i = 1, n do\n        digits[i] = 0\n    end\n    while true do\n\
    \        if digits[1] == 1 or digits[n] == 1 then\n            count = count +\
    \ 1\n        end\n        local i = n\n        while i > 0 and digits[i] == 9\
    \ do\n            digits[i] = 0\n            i = i - 1\n        end\n        if\
    \ i == 0 then\n            break\n        end\n        digits[i] = digits[i] +\
    \ 1\n    end\n    return count\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local count = 1\n    for i = 2, n do\n        count = count * 10\n\
    \    end\n    return count * 2\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count\
    \ + 9 * 10 ^ (i - 1)\n    end\n    return count * 2\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n    count = count\
    \ * 9\n  end\n  return count * 2\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local dp = {0, 1, 1}\n    for i = 3, n do\n        dp[i] = dp[i\
    \ - 1] + dp[i - 2]\n    end\n    return dp[n] * 2\nend", "  if n == 1 then\n \
    \   return 2\n  end\n  if n == 2 then\n    return 3\n  end\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "    if n ==\
    \ 1 then\n        return 2\n    end\n    local count = 0\n    local i = 1\n  \
    \  while i <= n do\n        count = count + 9 * 10 ^ (i - 1)\n        i = i +\
    \ 1\n    end\n    return count * 2\nend", "  local count = 0\n  for i = 1, n do\n\
    \    count = count + 10^(i - 1)\n  end\n  return count\nend", "  local count =\
    \ 0\n  for i = 1, n do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n  return\
    \ count\nend", "    if n == 1 then\n        return 2\n    end\n    if n == 2 then\n\
    \        return 4\n    end\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  local\
    \ first_digit = 1\n  local last_digit = 1\n  local digits = n - 2\n  while digits\
    \ > 0 do\n    count = count + first_digit * last_digit * 9 * math.pow(10, digits\
    \ - 1)\n    digits = digits - 1\n  end\n  count = count + first_digit + last_digit\n\
    \  return count\nend", "  if n == 1 then\n    return 2\n  end\n  local count =\
    \ 1\n  for i = 1, n - 1 do\n    count = count * 9\n  end\n  return count * 2\n\
    end", "    local count = 0\n    for i = 1, n do\n        count = count + 10^(i\
    \ - 1)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local dp = {0, 1, 1}\n  for i = 3, n do\n    dp[i] = dp[i - 1] + dp[i - 2]\n\
    \  end\n  return dp[n] * 2\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ dp = {0, 1, 1}\n  for i = 3, n do\n    dp[i] = dp[i - 1] + dp[i - 2]\n  end\n\
    \  return dp[n] * 2\nend", "    if n == 1 then\n        return 2\n    end\n  \
    \  local count = 0\n    for i = 1, n do\n        count = count + starts_one_ends(i\
    \ - 1) * starts_one_ends(n - i)\n    end\n    return count\nend", "  if n == 1\
    \ then\n    return 2\n  end\n  local count = 0\n  local digits = {}\n  for i =\
    \ 1, n do\n    digits[i] = 0\n  end\n  digits[1] = 1\n  while true do\n    count\
    \ = count + 1\n    digits[n] = digits[n] + 1\n    for i = n, 2, -1 do\n      if\
    \ digits[i] == 10 then\n        digits[i] = 0\n        digits[i - 1] = digits[i\
    \ - 1] + 1\n      end\n    end\n    if digits[1] == 2 then\n      break\n    end\n\
    \  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    if n == 2 then\n        return 4\n    end\n    local dp = {}\n  \
    \  dp[1] = 2\n    dp[2] = 4\n    for i = 3, n do\n        dp[i] = dp[i - 1] +\
    \ dp[i - 2]\n    end\n    return dp[n]\nend", "  local function count(n)\n   \
    \ if n == 1 then\n      return 2\n    else\n      return 10 * count(n - 1) - count(n\
    \ - 2)\n    end\n  end\n  return count(n)\nend", "    if n == 1 then\n       \
    \ return 2\n    end\n    if n == 2 then\n        return 4\n    end\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n   \
    \     count = count + starts_one_ends(i) * starts_one_ends(n - i)\n    end\n \
    \   return count\nend", "  if n == 1 then\n    return 2\n  end\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count +\
    \ starts_one_ends(i) * starts_one_ends(n - i)\n    end\n    return count\nend",
  "    if n == 1 then\n        return 2\n    end\n    local count = 0\n    for i =\
    \ 1, n - 1 do\n        count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 0\n    for i = 1, n do\n       \
    \ count = count + 9 * 10 ^ (i - 1)\n    end\n    return count * 2\nend", "  if\
    \ n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n\
    \    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return\
    \ count\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "  if n == 1 then\n \
    \   return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count = count\
    \ + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n do\n \
    \   count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)\n  end\n \
    \ return count\nend", "  if n == 1 then\n    return 2\n  end\n  local dp = {[1]\
    \ = 2}\n  for i = 2, n do\n    dp[i] = dp[i - 1] + 9 * math.pow(10, i - 2)\n \
    \ end\n  return dp[n]\nend", "  local count = 0\n  for i = 1, n do\n    count\
    \ = count + 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  local count = 0\n\
    \  for i = 1, n do\n    count = count + 10^(i - 1)\n  end\n  return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 4\n  end\n\
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "  if n == 1\
    \ then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count\
    \ = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return count\n\
    end", "  if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 4\n\
    \  end\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "  if\
    \ n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n\
    \    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return\
    \ count\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    if n == 2 then\n        return 3\n    end\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  if n == 2 then\n    return 3\n  end\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "  local count = 0\n  for i = 1, n do\n \
    \   count = count + math.pow(10, i - 1)\n  end\n  return count\nend", "    if\
    \ n == 1 then\n        return 2\n    end\n    if n == 2 then\n        return 4\n\
    \    end\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", " \
    \ local function count(n, start_one, end_one)\n    if n == 0 then\n      return\
    \ 1\n    end\n    local c = 0\n    if start_one then\n      c = c + count(n -\
    \ 1, true, true)\n    end\n    if end_one then\n      c = c + count(n - 1, false,\
    \ true)\n    end\n    return c\n  end\n  return count(n, true, false)\nend", " \
    \ local count = 0\n  for i = 1, n do\n    count = count + math.pow(10, i - 1)\n\
    \  end\n  return count\nend", "  local count = 0\n  for i = 1, n do\n    count\
    \ = count + math.pow(10, i - 1)\n  end\n  return count\nend", "  local count =\
    \ 0\n  for i = 1, n do\n    count = count + 10 ^ (i - 1)\n  end\n  return count\
    \ * 2\nend", "    if n == 1 then\n        return 2\n    end\n    local count =\
    \ 0\n    for i = 1, n do\n        count = count + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  if n == 2 then\n    return 4\n  end\n  local a = 2\n  local b = 4\n  for i\
    \ = 3, n do\n    local c = a + b\n    a = b\n    b = c\n  end\n  return b\nend",
  "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n\
    \    count = count * 9\n  end\n  return count * 2\nend", "  if n == 1 then\n \
    \   return 2\n  end\n  local count = 0\n  for i = 1, n do\n    count = count +\
    \ starts_one_ends(i - 1) * starts_one_ends(n - i)\n  end\n  return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n\
    \    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return\
    \ count\nend", "    if n == 1 then\n        return 2\n    end\n    return starts_one_ends(n\
    \ - 1) + 9 * (n - 1)\nend", "    if n == 1 then\n        return 2\n    end\n \
    \   if n == 2 then\n        return 3\n    end\n    return starts_one_ends(n -\
    \ 1) + starts_one_ends(n - 2)\nend", "  local count = 0\n  for i = 1, n do\n \
    \   count = count + 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  if n ==\
    \ 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count\
    \ = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, n do\n    count = count + math.pow(10,\
    \ i - 1)\n  end\n  return count\nend", "  local count = 0\n  for i = 1, n do\n\
    \    count = count + 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  if n ==\
    \ 1 then\n    return 2\n  end\n  local x = 10^(n-1)\n  local y = 10^(n-2)\n  return\
    \ x + 9*y\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        count = count + 9 * 10 ^ (i - 1)\n   \
    \ end\n    return count * 2\nend", "    if n == 1 then\n        return 2\n   \
    \ end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count + math.pow(10,\
    \ i - 1)\n    end\n    return count * 2\nend", "    if n == 1 then\n        return\
    \ 2\n    end\n    local count = 0\n    local i = 1\n    while i <= n do\n    \
    \    count = count + 9 * 10 ^ (i - 1)\n        i = i + 1\n    end\n    return\
    \ count * 2\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 0\n    for i = 1, n do\n        count = count + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  local count = 0\n  for i = 1, n do\n\
    \    count = count + 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "    if n\
    \ == 1 then\n        return 2\n    end\n    local count = 1\n    for i = 1, n\
    \ - 1 do\n        count = count * 9\n    end\n    return count * 2\nend", "  if\
    \ n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n\
    \    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return\
    \ count\nend", "    if n == 1 then\n        return 2\n    end\n    local a, b\
    \ = 2, 9\n    for i = 2, n - 1 do\n        a, b = a + b, b * 9\n    end\n    return\
    \ a + b\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 0\n    local start = 1\n    local end_ = 1\n    for i = 2, n do\n        start\
    \ = start * 10\n        end_ = end_ * 10 + 1\n    end\n    count = count + start\n\
    \    count = count + end_\n    return count\nend", "  local count = 0\n  for i\
    \ = 1, n do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n  return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 3\n  end\n\
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "  if n == 1\
    \ then\n    return 2\n  end\n  local sum = 0\n  for i = 1, n - 1 do\n    sum =\
    \ sum + starts_one_ends(i) * (10 ^ (n - i - 1))\n  end\n  return sum + 10 ^ (n\
    \ - 1)\nend", "   if n == 1 then\n      return 2\n   else\n      return starts_one_ends(n-1)\
    \ + 9 * count_nines(n-1)\n   end\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local a, b = 1, 1\n    for i = 2, n do\n        a, b = a + b, a\n\
    \    end\n    return a + b\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ count = 0\n  for i = 1, n - 1 do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n\
    \  count = count + 10 ^ (n - 1)\n  return count\nend", "    if n == 1 then\n \
    \       return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n    \
    \    count = count + 9 * (10 ^ (i - 1))\n    end\n    return count * 2\nend",
  "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  local base = 10\n \
    \ for i = 2, n do\n    count = count + base\n    base = base * 10\n  end\n  return\
    \ count\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "  local count = 0\n\
    \  for i = 1, n do\n    count = count + math.pow(10, i - 1)\n  end\n  return count\n\
    end", "    if n == 1 then\n        return 2\n    end\n    local count = 1\n  \
    \  for i = 1, n - 1 do\n        count = count * 9\n    end\n    return count *\
    \ 2\nend", "    local function starts_one(n)\n        if n == 1 then\n       \
    \     return 1\n        end\n        return 9 * starts_one(n - 1)\n    end\n \
    \   local function ends_one(n)\n        if n == 1 then\n            return 1\n\
    \        end\n        return 10 * ends_one(n - 1)\n    end\n    return starts_one(n)\
    \ + ends_one(n)\nend", "    if n == 1 then\n        return 2\n    end\n    if\
    \ n == 2 then\n        return 4\n    end\n    local count = 4\n    for i = 3,\
    \ n do\n        count = count + 9 * (10 ^ (i - 2))\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, n do\n    count = count + 9 * 10 ^ (i -\
    \ 1)\n  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ a = 1\n  local b = 1\n  for i = 2, n do\n    a, b = b, a + b\n  end\n  return\
    \ a + b\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    local f = {0, 1, 1}\n    for i = 3, n do\n        f[i] = f[i - 1]\
    \ + f[i - 2]\n    end\n    return f[n] * 2\nend", "  local count = 0\n  for i\
    \ = 1, n do\n    count = count + 10^(i - 1)\n  end\n  return count\nend", "  if\
    \ n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 4\n  end\n  local\
    \ count = 0\n  for i = 1, n do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n do\n    count = count + math.pow(10, i - 1)\n\
    \  end\n  return count * 2\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i)\n\
    \    end\n    return count + 1\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count\
    \ + starts_one_ends(i) * starts_one_ends(n - i)\n    end\n    return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n\
    \    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return\
    \ count\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    if n == 2 then\n        return 4\n    end\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 1\n  for i = 1, n - 1 do\n    count = count * 10\n  end\n  return\
    \ count * 2\nend", "    if n == 1 then\n        return 2\n    end\n    if n ==\
    \ 2 then\n        return 4\n    end\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\nend", "  if n == 1 then\n    return 2\n  end\n  local sum = 0\n  for i\
    \ = 1, n - 1 do\n    sum = sum + 9 * (10 ^ (i - 1))\n  end\n  return sum * 2\n\
    end", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1,\
    \ n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n\
    \  end\n  return count\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n    end\n    return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local sum = 0\n    for i = 1, n - 1 do\n     \
    \   sum = sum + starts_one_ends(i) * starts_one_ends(n - i)\n    end\n    return\
    \ sum\nend", "    if n == 1 then\n        return 2\n    end\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local total = 0\n    for i = 1, n do\n       \
    \ total = total + math.pow(9, i)\n    end\n    return total * 2\nend", "  if n\
    \ == 1 then\n    return 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n \
    \   count = count * 10\n  end\n  return count * 2\nend", "  if n == 1 then\n \
    \   return 2\n  end\n  if n == 2 then\n    return 4\n  end\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count\
    \ + starts_one_ends(i) * starts_one_ends(n - i)\n    end\n    return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  local a, b = 1, 1\n  for i = 2, n do\n\
    \    a, b = b, a + b\n  end\n  return a + b\nend", "  if n == 1 then\n    return\
    \ 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 1\n    for i = 1, n - 1 do\n   \
    \     count = count * 10\n    end\n    return count * 2\nend", "    if n == 1\
    \ then\n        return 2\n    end\n    if n == 2 then\n        return 4\n    end\n\
    \    if n == 3 then\n        return 10\n    end\n    if n == 4 then\n        return\
    \ 20\n    end\n    if n == 5 then\n        return 35\n    end\n    if n == 6 then\n\
    \        return 56\n    end\n    if n == 7 then\n        return 84\n    end\n\
    \    if n == 8 then\n        return 120\n    end\n    if n == 9 then\n       \
    \ return 165\n    end\n    if n == 10 then\n        return 220\n    end\n    if\
    \ n == 11 then\n        return 286\n    end\n    if n == 12 then\n        return\
    \ 364\n    end\n    if n == 13 then\n        return 455\n    end\n    if n ==\
    \ 14 then\n        return 560\n    end\n    if n == 15 then\n        return 680\n\
    \    end\n    if n == 16 then\n        return 816\n    end\n    if n == 17 then\n\
    \        return 969\n    end\n    if n == 18 then\n        return 1140\n    end\n\
    \    if n == 19 then\n        return 1330\n    end\n    if n == 20 then\n    \
    \    return 1540\n    end\n    if n == 21 then\n        return 1771\n    end\n\
    \    if n == 22 then\n        return 2024\n    end\n    if n == 23 then\n    \
    \    return 2300\n    end\n    if n == 24 then\n        return 2600\n    end\n\
    \    if n == 25 then\n        return 2925\n    end\n    if n == 26 then\n    \
    \    return 3276\n    end\n    if n == 27 then\n        return 3654\n    end\n\
    \    if n == 28 then\n        return 4060\n    end\n    if n == 29 then\n    \
    \    return 4495\n    end\n    if n == 30 then\n        return 4960\n    end\n\
    \    if n == 31 then\n        return 5456\n    end\n    if n == 32 then\n    \
    \    return 5980\n    end\n    if n == 33 then\n        return 6535\n    end\n\
    \    if n == 34 then\n        return 7120\n    end\n    if n == 35 then\n    \
    \    return 7736\n    end\n    if n", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 1\n  local base = 10\n  for i = 2, n do\n    count = count +\
    \ base\n    base = base * 10\n  end\n  return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 0\n    for i = 1, n do\n       \
    \ count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)\n    end\n \
    \   return count\nend", "  if n == 1 then\n    return 2\n  end\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\n  end\n\
    \  return count + 1\nend", "    if n == 1 then\n        return 2\n    end\n  \
    \  local a, b = 1, 1\n    for i = 2, n do\n        a, b = b, a + b\n    end\n\
    \    return a + b\nend", "    if n == 1 then\n        return 2\n    end\n    if\
    \ n == 2 then\n        return 4\n    end\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ sum = 0\n  for i = 1, n - 1 do\n    sum = sum + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return sum\nend", "  if n == 1 then\n    return 2\n  end\n  if\
    \ n == 2 then\n    return 3\n  end\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 0\n    for i = 1, n do\n        count = count + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    if n == 2 then\n        return 4\n    end\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "  local digits = {}\n  for i = 1, n do\n\
    \    digits[i] = 1\n  end\n  local count = 0\n  while true do\n    count = count\
    \ + 1\n    if digits[n] == 9 then\n      local i = n - 1\n      while i > 0 and\
    \ digits[i] == 9 do\n        i = i - 1\n      end\n      if i == 0 then\n    \
    \    break\n      end\n      digits[i] = digits[i] + 1\n      for j = i + 1, n\
    \ do\n        digits[j] = 1\n      end\n    else\n      digits[n] = digits[n]\
    \ + 1\n    end\n  end\n  return count\nend", "    if n == 1 then\n        return\
    \ 2\n    end\n    local count = 1\n    for i = 1, n - 1 do\n        count = count\
    \ * 9\n    end\n    return count * 2\nend", "  local count = 0\n  for i = 1, n\
    \ do\n    count = count + math.pow(10, i - 1)\n  end\n  return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
