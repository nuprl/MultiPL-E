---
name: HumanEval_10_make_palindrome
language: lua
results:
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptleg5q6h.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmptleg5q6h.lua:12:
    in local 'candidate'\n\t/tmp/tmptleg5q6h.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = find_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjf3gkp5.lua:12:
    attempt to call a nil value (global 'find_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpyjf3gkp5.lua:12:
    in local 'candidate'\n\t/tmp/tmpyjf3gkp5.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcx0_mmxm.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpcx0_mmxm.lua:12:
    in local 'candidate'\n\t/tmp/tmpcx0_mmxm.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp63hqcjh1.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp63hqcjh1.lua:12:
    in local 'candidate'\n\t/tmp/tmp63hqcjh1.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkpzfcvq3.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpkpzfcvq3.lua:12:
    in local 'candidate'\n\t/tmp/tmpkpzfcvq3.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. string:reverse():sub(1, #prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw7_a0he.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpaw7_a0he.lua:12:
    in local 'candidate'\n\t/tmp/tmpaw7_a0he.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ln5sdct.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp7ln5sdct.lua:12:
    in local 'candidate'\n\t/tmp/tmp7ln5sdct.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpehy7xh1r.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpehy7xh1r.lua:12:
    in local 'candidate'\n\t/tmp/tmpehy7xh1r.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function longest_palindrome_suffix(string)
            local function is_palindrome(string)
                local length = #string
                for i = 1, length / 2 do
                    if string:sub(i, i) ~= string:sub(length - i + 1, length - i + 1) then
                        return false
                    end
                end
                return true
            end
            local length = #string
            for i = length, 1, -1 do
                if is_palindrome(string:sub(i, length)) then
                    return string:sub(i, length)
                end
            end
            return ''
        end
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qdagtsl.lua:41:
    expected: \"xyx\"\nactual: \"xyxyx\"\nstack traceback:\n\t/tmp/tmp6qdagtsl.lua:41:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string.reverse(prefix) .. string .. suffix
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd901rc_9.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpd901rc_9.lua:12:
    in local 'candidate'\n\t/tmp/tmpd901rc_9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5i0m8tqc.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp5i0m8tqc.lua:12:
    in local 'candidate'\n\t/tmp/tmp5i0m8tqc.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local n = #string
        local i = n
        while i > 0 do
            if is_palindrome(string, i, n) then
                return string .. string:sub(1, n - i):reverse()
            end
            i = i - 1
        end
        return string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfohianfq.lua:15:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpfohianfq.lua:15:
    in local 'candidate'\n\t/tmp/tmpfohianfq.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. string:reverse():sub(1, #prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk43wn8_n.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpk43wn8_n.lua:12:
    in local 'candidate'\n\t/tmp/tmpk43wn8_n.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5fh0fou.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpe5fh0fou.lua:12:
    in local 'candidate'\n\t/tmp/tmpe5fh0fou.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local string_length = string.len(string)
        local palindrome_length = 0
        local palindrome_end = 0
        local palindrome_start = 0
        local palindrome_end_index = 0
        local palindrome_start_index = 0
        local palindrome_length_index = 0
        local palindrome_end_index_index = 0
        local palindrome_start_index_index = 0
        local palindrome_length_index_index = 0
        local palindrome_end_index_index_index = 0
        local palindrome_start_index_index_index = 0
        local palindrome_length_index_index_index = 0
        local palindrome_end_index_index_index_index = 0
        local palindrome_start_index_index_index_index = 0
        local palindrome_length_index_index_index_index = 0
        local palindrome_end_index_index_index_index_index = 0
        local palindrome_start_index_index_index_index_index = 0
        local palindrome_length_index_index_index_index_index = 0
        local palindrome_end_index_index_index_index_index_index = 0
        local palindrome_start_index_index_index_index_index_index = 0
        local palindrome_length_index_index_index_index_index_index = 0
        local palindrome_end_index_index_index_index_index_index_index = 0
        local palindrome_start_index_index_index_index_index_index_index = 0
        local palindrome_length_index_index_index_index_index_index_index = 0
        local palindrome_end_index_index_index_index_index_index_index_index = 0
        local palindrome_start_index_index_index_index_index_index_index_index = 0
        local palindrome_length_index_index_index_index_index_index_index_index = 0
        local palindrome_end_index_index_
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpwkrj1xmu.lua:52: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local len = #string
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, len - longest_palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi44selw.lua:13:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpbi44selw.lua:13:
    in local 'candidate'\n\t/tmp/tmpbi44selw.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6a4_0d_9.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp6a4_0d_9.lua:12:
    in local 'candidate'\n\t/tmp/tmp6a4_0d_9.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmcdevs48.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpmcdevs48.lua:12:
    in local 'candidate'\n\t/tmp/tmpmcdevs48.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_gb7xmzx.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp_gb7xmzx.lua:12:
    in local 'candidate'\n\t/tmp/tmp_gb7xmzx.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplneab3_t.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmplneab3_t.lua:12:
    in local 'candidate'\n\t/tmp/tmplneab3_t.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, string:len() - suffix:len())
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptl8ulioy.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmptl8ulioy.lua:12:
    in local 'candidate'\n\t/tmp/tmptl8ulioy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd6vya8o0.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpd6vya8o0.lua:12:
    in local 'candidate'\n\t/tmp/tmpd6vya8o0.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function reverse(string)
            local reversed = ''
            for i = #string, 1, -1 do
                reversed = reversed .. string:sub(i, i)
            end
            return reversed
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp__23gg8t.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpief94rdl.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpief94rdl.lua:12:
    in local 'candidate'\n\t/tmp/tmpief94rdl.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local n = #string
        local i = 1
        while i <= n do
            if is_palindrome(string, i, n) then
                return string .. string:sub(1, n - i):reverse()
            end
            i = i + 1
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjpfjy0h.lua:25:
    expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmpzjpfjy0h.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsgut9qp9.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpsgut9qp9.lua:12:
    in local 'candidate'\n\t/tmp/tmpsgut9qp9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa5lx7sq2.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpa5lx7sq2.lua:12:
    in local 'candidate'\n\t/tmp/tmpa5lx7sq2.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome = find_longest_palindrome(string)
        local prefix = string:sub(1, #string - #longest_palindrome)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsz4hyret.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\t/tmp/tmpsz4hyret.lua:12:
    in local 'candidate'\n\t/tmp/tmpsz4hyret.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphrgsv53n.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmphrgsv53n.lua:12:
    in local 'candidate'\n\t/tmp/tmphrgsv53n.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. string:reverse():sub(1, #prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprohnaqbt.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmprohnaqbt.lua:12:
    in local 'candidate'\n\t/tmp/tmprohnaqbt.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local function find_longest_palindrome_postfix(string)
        local function is_palindrome(string)
          local len = #string
          for i = 1, len / 2 do
            if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
              return false
            end
          end
          return true
        end
        local len = #string
        for i = len, 1, -1 do
          if is_palindrome(string:sub(i, len)) then
            return string:sub(i, len)
          end
        end
        return ''
      end
      local palindrome_postfix = find_longest_palindrome_postfix(string)
      local palindrome_prefix = string:sub(1, #string - #palindrome_postfix)
      return string .. palindrome_prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx3kd7la.lua:41:
    expected: \"xyx\"\nactual: \"xyxyx\"\nstack traceback:\n\t/tmp/tmpnx3kd7la.lua:41:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function reverse(string)
            local result = ''
            for i = #string, 1, -1 do
                result = result .. string:sub(i, i)
            end
            return result
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpbgtkq9x3.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3n6q__b.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpc3n6q__b.lua:12:
    in local 'candidate'\n\t/tmp/tmpc3n6q__b.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsir9ly4g.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpsir9ly4g.lua:12:
    in local 'candidate'\n\t/tmp/tmpsir9ly4g.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6x21gev8.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp6x21gev8.lua:12:
    in local 'candidate'\n\t/tmp/tmp6x21gev8.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local longest_palindrome = find_longest_palindrome(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(longest_palindrome))
      local reversed_prefix = string.reverse(prefix)
      return string .. reversed_prefix
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz02fr9cz.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\t/tmp/tmpz02fr9cz.lua:12:
    in local 'candidate'\n\t/tmp/tmpz02fr9cz.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxqenitp.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmphxqenitp.lua:12:
    in local 'candidate'\n\t/tmp/tmphxqenitp.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local len = #string
        local i = len
        while i > 0 do
            if is_palindrome(string, i, len) then
                return string .. string:sub(1, len - i):reverse()
            end
            i = i - 1
        end
        return string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphdirwbxx.lua:15:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmphdirwbxx.lua:15:
    in local 'candidate'\n\t/tmp/tmphdirwbxx.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpher13lmr.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpher13lmr.lua:12:
    in local 'candidate'\n\t/tmp/tmpher13lmr.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome = string
        local prefix = string:sub(1, #string - 1)
        local suffix = string:sub(#string)
        while not is_palindrome(palindrome) do
            palindrome = prefix .. suffix
            prefix = prefix:sub(1, #prefix - 1)
            suffix = suffix .. suffix:sub(1, 1)
        end
        return palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn6nbw6cl.lua:15:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpn6nbw6cl.lua:15:
    in local 'candidate'\n\t/tmp/tmpn6nbw6cl.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, #string - #suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpje57fb3r.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpje57fb3r.lua:12:
    in local 'candidate'\n\t/tmp/tmpje57fb3r.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix_length = longest_palindrome_suffix_length(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix_length)
        return string .. string:reverse():sub(1, #prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz98a0hgr.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix_length')\nstack
    traceback:\n\t/tmp/tmpz98a0hgr.lua:12: in local 'candidate'\n\t/tmp/tmpz98a0hgr.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9nvg_pn8.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp9nvg_pn8.lua:12:
    in local 'candidate'\n\t/tmp/tmp9nvg_pn8.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, #string - #suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbw2ov9u0.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpbw2ov9u0.lua:12:
    in local 'candidate'\n\t/tmp/tmpbw2ov9u0.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix_len = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - suffix_len)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_m5xygz.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp7_m5xygz.lua:12:
    in local 'candidate'\n\t/tmp/tmp7_m5xygz.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, #string - #suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqkia30t6.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpqkia30t6.lua:12:
    in local 'candidate'\n\t/tmp/tmpqkia30t6.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw0np4gf.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpgw0np4gf.lua:12:
    in local 'candidate'\n\t/tmp/tmpgw0np4gf.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, #string - #suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zu85zzz.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp_zu85zzz.lua:12:
    in local 'candidate'\n\t/tmp/tmp_zu85zzz.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local len = #string
      local longest_palindrome = ''
      for i = len, 1, -1 do
        local prefix = string:sub(1, i)
        local suffix = string:sub(i + 1, len)
        if prefix == reverse(suffix) then
          longest_palindrome = prefix
          break
        end
      end
      return string .. reverse(string:sub(1, len - #longest_palindrome))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkd5ubh_f.lua:22:
    attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpkd5ubh_f.lua:22:
    in local 'candidate'\n\t/tmp/tmpkd5ubh_f.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm37wkpo4.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpm37wkpo4.lua:12:
    in local 'candidate'\n\t/tmp/tmpm37wkpo4.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6atfu2nk.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp6atfu2nk.lua:12:
    in local 'candidate'\n\t/tmp/tmp6atfu2nk.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphk5eq372.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmphk5eq372.lua:12:
    in local 'candidate'\n\t/tmp/tmphk5eq372.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local prefix = string:sub(1, #string - find_longest_palindrome_suffix(string))
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvsj_uda.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmphvsj_uda.lua:12:
    in local 'candidate'\n\t/tmp/tmphvsj_uda.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp898gyf5d.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp898gyf5d.lua:12:
    in local 'candidate'\n\t/tmp/tmp898gyf5d.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local function reverse(str)
        local reversed = ''
        for i = #str, 1, -1 do
          reversed = reversed .. str:sub(i, i)
        end
        return reversed
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpxf0e3bpf.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, #string - #suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqecy_33h.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpqecy_33h.lua:12:
    in local 'candidate'\n\t/tmp/tmpqecy_33h.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpde9otxy4.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpde9otxy4.lua:12:
    in local 'candidate'\n\t/tmp/tmpde9otxy4.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local len = #string
            for i = 1, len / 2 do
                if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpe9kn31aq.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local len = string:len()
        local i = len
        while i > 0 do
            if is_palindrome(string:sub(1, i)) then
                break
            end
            i = i - 1
        end
        return string .. string:sub(1, len - i):reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6quswego.lua:15:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp6quswego.lua:15:
    in local 'candidate'\n\t/tmp/tmp6quswego.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local reversed = string:reverse()
        local prefix = string:sub(1, #string - 1)
        local suffix = string:sub(#string)
        local prefix_reversed = prefix:reverse()
        local suffix_reversed = suffix:reverse()
        local longest_palindrome_suffix = ''
        local longest_palindrome_suffix_length = 0
        for i = 1, #string do
            local suffix_candidate = reversed:sub(1, i)
            local prefix_candidate = reversed:sub(i + 1)
            if suffix_candidate == prefix_candidate then
                longest_palindrome_suffix = suffix_candidate
                longest_palindrome_suffix_length = #suffix_candidate
            end
        end
        return string .. reversed:sub(longest_palindrome_suffix_length + 1)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0idvgb1s.lua:34:
    expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp0idvgb1s.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21dbi_ao.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp21dbi_ao.lua:12:
    in local 'candidate'\n\t/tmp/tmp21dbi_ao.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local len = string:len()
            for i = 1, len / 2 do
                if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpobe4gk59.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local len = #string
            for i = 1, len // 2 do
                if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmps8ak3myz.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, string:len() - palindrome_suffix:len())
        return string .. string:reverse():sub(1, prefix:len())
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiz6yzow6.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpiz6yzow6.lua:12:
    in local 'candidate'\n\t/tmp/tmpiz6yzow6.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local reverse = string:reverse()
        local suffix = string:sub(1, #string - 1)
        local prefix = string:sub(2, #string)
        local longest_suffix_palindrome = longest_palindrome(suffix)
        local longest_prefix_palindrome = longest_palindrome(prefix)
        if #longest_suffix_palindrome > #longest_prefix_palindrome then
            return string .. reverse:sub(#longest_suffix_palindrome + 1, #string)
        else
            return string .. reverse:sub(#longest_prefix_palindrome + 1, #string)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljozixnf.lua:15:
    attempt to call a nil value (global 'longest_palindrome')\nstack traceback:\n\t/tmp/tmpljozixnf.lua:15:
    in local 'candidate'\n\t/tmp/tmpljozixnf.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjpwwde4.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpmjpwwde4.lua:12:
    in local 'candidate'\n\t/tmp/tmpmjpwwde4.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local reversed = string:reverse()
        local longest_postfix = longest_common_substring(string, reversed)
        return string .. reversed:sub(#longest_postfix + 1)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvn6zc1tm.lua:13:
    attempt to call a nil value (global 'longest_common_substring')\nstack traceback:\n\t/tmp/tmpvn6zc1tm.lua:13:
    in local 'candidate'\n\t/tmp/tmpvn6zc1tm.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpikobbevd.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpikobbevd.lua:12:
    in local 'candidate'\n\t/tmp/tmpikobbevd.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpulg4613e.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpulg4613e.lua:12:
    in local 'candidate'\n\t/tmp/tmpulg4613e.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function longest_palindrome_suffix(string)
            local function is_palindrome(string)
                local i = 1
                local j = #string
                while i < j do
                    if string:sub(i, i) ~= string:sub(j, j) then
                        return false
                    end
                    i = i + 1
                    j = j - 1
                end
                return true
            end
            local i = #string
            while i > 0 do
                if is_palindrome(string:sub(i)) then
                    return string:sub(i)
                end
                i = i - 1
            end
            return ''
        end
        local function reverse(string)
            local reversed = ''
            for i = #string, 1, -1 do
                reversed = reversed .. string:sub(i, i)
            end
            return reversed
        end
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_f9gfrz.lua:52:
    expected: \"xyx\"\nactual: \"xyxyx\"\nstack traceback:\n\t/tmp/tmpl_f9gfrz.lua:52:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi8d2r6o4.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpi8d2r6o4.lua:12:
    in local 'candidate'\n\t/tmp/tmpi8d2r6o4.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local len = #string
            for i = 1, len / 2 do
                if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp2i0tnq91.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp41c07pi1.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp41c07pi1.lua:12:
    in local 'candidate'\n\t/tmp/tmp41c07pi1.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqhl7ci1.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpcqhl7ci1.lua:12:
    in local 'candidate'\n\t/tmp/tmpcqhl7ci1.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local string_length = #string
        local result = string
        local i = 1
        while i <= string_length do
            local j = string_length
            while j >= i do
                if string:sub(i, j) == string:sub(i, j):reverse() then
                    result = result .. string:sub(1, i - 1):reverse()
                    return result
                end
                j = j - 1
            end
            i = i + 1
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6m400h3.lua:34:
    expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpk6m400h3.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local len = string:len()
            for i = 1, len / 2 do
                if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpnjibhcma.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function find_longest_palindrome_suffix(string)
            local function is_palindrome(string)
                return string == string:reverse()
            end
            local function find_longest_palindrome_suffix_rec(string, suffix)
                if is_palindrome(string) then
                    return suffix
                else
                    return find_longest_palindrome_suffix_rec(string:sub(1, #string - 1), string:sub(#string, #string) .. suffix)
                end
            end
            return find_longest_palindrome_suffix_rec(string, '')
        end
        local palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60v_7d3u.lua:34:
    expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp60v_7d3u.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5if7310x.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp5if7310x.lua:12:
    in local 'candidate'\n\t/tmp/tmp5if7310x.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local len = string:len()
            for i = 1, len / 2 do
                if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpelpry7yt.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        local reversed_prefix = prefix:reverse()
        return string .. reversed_prefix
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu7ozuvzm.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpu7ozuvzm.lua:12:
    in local 'candidate'\n\t/tmp/tmpu7ozuvzm.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - find_longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi0unuujn.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpi0unuujn.lua:12:
    in local 'candidate'\n\t/tmp/tmpi0unuujn.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local len = #string
            for i = 1, len / 2 do
                if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpuktf3j2j.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function reverse(string)
            local reversed = {}
            for i = #string, 1, -1 do
                table.insert(reversed, string:sub(i, i))
            end
            return table.concat(reversed)
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpycr34l7d.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. string:reverse():sub(1, #prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu6akmag5.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpu6akmag5.lua:12:
    in local 'candidate'\n\t/tmp/tmpu6akmag5.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8vc543qq.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp8vc543qq.lua:12:
    in local 'candidate'\n\t/tmp/tmp8vc543qq.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfps6wlk3.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpfps6wlk3.lua:12:
    in local 'candidate'\n\t/tmp/tmpfps6wlk3.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local len = #string
        local i = len
        while i > 0 do
            local prefix = string:sub(1, i)
            local suffix = string:sub(len - i + 1, len)
            if prefix == suffix then
                return string .. string:sub(i + 1, len):reverse()
            end
            i = i - 1
        end
        return string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsxxgo1s.lua:30:
    expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpjsxxgo1s.lua:30:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local palindrome_prefix = string.reverse(string.sub(string, 1, #string - #palindrome_suffix))
        return string .. palindrome_prefix
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2iu_pw71.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp2iu_pw71.lua:12:
    in local 'candidate'\n\t/tmp/tmp2iu_pw71.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix_length = longest_palindromic_suffix(string)
        local prefix = string:sub(1, #string - suffix_length)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz283prhl.lua:12:
    attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\t/tmp/tmpz283prhl.lua:12:
    in local 'candidate'\n\t/tmp/tmpz283prhl.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm8h56fll.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpm8h56fll.lua:12:
    in local 'candidate'\n\t/tmp/tmpm8h56fll.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function reverse(string)
            local reversed = ''
            for i = #string, 1, -1 do
                reversed = reversed .. string:sub(i, i)
            end
            return reversed
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp34j3duj6.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function longest_palindrome_suffix(string)
            local function is_palindrome(string)
                local i = 1
                local j = #string
                while i < j do
                    if string:sub(i, i) ~= string:sub(j, j) then
                        return false
                    end
                    i = i + 1
                    j = j - 1
                end
                return true
            end
            local i = #string
            while i > 0 do
                if is_palindrome(string:sub(i)) then
                    return string:sub(i)
                end
                i = i - 1
            end
            return ''
        end
        local function reverse(string)
            local reversed = ''
            for i = #string, 1, -1 do
                reversed = reversed .. string:sub(i, i)
            end
            return reversed
        end
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dfr_r9f.lua:52:
    expected: \"xyx\"\nactual: \"xyxyx\"\nstack traceback:\n\t/tmp/tmp6dfr_r9f.lua:52:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5dy311hd.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp5dy311hd.lua:12:
    in local 'candidate'\n\t/tmp/tmp5dy311hd.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local string_length = string.len(string)
        local string_reversed = string.reverse(string)
        local longest_common_suffix_length = longest_common_suffix(string, string_reversed)
        local string_prefix = string.sub(string, 1, string_length - longest_common_suffix_length)
        local string_prefix_reversed = string.reverse(string_prefix)
        return string .. string_prefix_reversed
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3om0mfnc.lua:14:
    attempt to call a nil value (global 'longest_common_suffix')\nstack traceback:\n\t/tmp/tmp3om0mfnc.lua:14:
    in local 'candidate'\n\t/tmp/tmp3om0mfnc.lua:23: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8zmna33k.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp8zmna33k.lua:12:
    in local 'candidate'\n\t/tmp/tmp8zmna33k.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, #string - #suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpko0qxo1f.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpko0qxo1f.lua:12:
    in local 'candidate'\n\t/tmp/tmpko0qxo1f.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnnw7rkr.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmplnnw7rkr.lua:12:
    in local 'candidate'\n\t/tmp/tmplnnw7rkr.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgx0nb0a5.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpgx0nb0a5.lua:12:
    in local 'candidate'\n\t/tmp/tmpgx0nb0a5.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp98_ppl04.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp98_ppl04.lua:12:
    in local 'candidate'\n\t/tmp/tmp98_ppl04.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local n = #string
        local suffix_length = 0
        local suffix_start = 0
        local suffix_end = 0
        local prefix_start = 0
        local prefix_end = 0
        local palindrome_length = 0
        local palindrome_start = 0
        local palindrome_end = 0
        local i = 0
        local j = 0
        local k = 0
        local l = 0
        local m = 0
        local s = ''
        local t = ''
        local u = ''
        local v = ''
        local w = ''
        local x = ''
        local y = ''
        local z = ''
        local aa = ''
        local ab = ''
        local ac = ''
        local ad = ''
        local ae = ''
        local af = ''
        local ag = ''
        local ah = ''
        local ai = ''
        local aj = ''
        local ak = ''
        local al = ''
        local am = ''
        local an = ''
        local ao = ''
        local ap = ''
        local aq = ''
        local ar = ''
        local as = ''
        local at = ''
        local au = ''
        local av = ''
        local aw = ''
        local ax = ''
        local ay = ''
        local az = ''
        local ba = ''
        local bb = ''
        local bc = ''
        local bd = ''
        local be = ''
        local bf = ''
        local bg = ''
        local bh = ''
        local bi = ''
        local bj = ''
        local bk = ''
        local bl = ''
        local bm = ''
        local bn = ''
        local bo = ''
        local bp = ''
        local bq = ''
        local br = ''
        local bs = ''
        local bt = ''
        local bu = ''
        local bv = ''
        local bw = ''
        local bx = ''
        local by = ''
        local bz = ''
        local ca = ''
        local cb = ''
        local cc = ''
        local
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpvvcb40fx.lua:101: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4ru92ov.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpn4ru92ov.lua:12:
    in local 'candidate'\n\t/tmp/tmpn4ru92ov.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, string:len() - longest_palindrome_suffix:len())
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpduigrex9.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpduigrex9.lua:12:
    in local 'candidate'\n\t/tmp/tmpduigrex9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7kmdk0n.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpq7kmdk0n.lua:12:
    in local 'candidate'\n\t/tmp/tmpq7kmdk0n.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function find_longest_palindrome_suffix(string)
            local function is_palindrome(string)
                local i = 1
                local j = #string
                while i < j do
                    if string:sub(i, i) ~= string:sub(j, j) then
                        return false
                    end
                    i = i + 1
                    j = j - 1
                end
                return true
            end
            local i = #string
            while i > 0 do
                if is_palindrome(string:sub(i)) then
                    return string:sub(i)
                end
                i = i - 1
            end
            return ''
        end
        local function reverse(string)
            local reversed = ''
            for i = #string, 1, -1 do
                reversed = reversed .. string:sub(i, i)
            end
            return reversed
        end
        local palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8dbhomu.lua:52:
    expected: \"xyx\"\nactual: \"xyxyx\"\nstack traceback:\n\t/tmp/tmpm8dbhomu.lua:52:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdcajr2_.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpfdcajr2_.lua:12:
    in local 'candidate'\n\t/tmp/tmpfdcajr2_.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsjgw559n.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpsjgw559n.lua:12:
    in local 'candidate'\n\t/tmp/tmpsjgw559n.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx1bk0bqd.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpx1bk0bqd.lua:12:
    in local 'candidate'\n\t/tmp/tmpx1bk0bqd.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix_len = 0
        local suffix_len = 0
        local prefix = ''
        local suffix = ''
        local palindrome = ''
        local i = 1
        local j = #string
        while i <= j do
            if string:sub(i, j) == string:sub(j, i) then
                prefix_len = i - 1
                suffix_len = j
                break
            end
            i = i + 1
            j = j - 1
        end
        if prefix_len > 0 then
            prefix = string:sub(1, prefix_len)
            suffix = string:sub(suffix_len + 1)
            palindrome = string .. prefix:reverse()
        else
            palindrome = string .. string:reverse()
        end
        return palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0j5a6ds.lua:42:
    expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpv0j5a6ds.lua:42:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local len = string:len()
        local i = len
        while i > 0 do
            if string:sub(1, i) == string:sub(len - i + 1, len):reverse() then
                return string .. string:sub(1, len - i):reverse()
            end
            i = i - 1
        end
        return string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76ngo5my.lua:28:
    expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp76ngo5my.lua:28:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = find_longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxlmlp3d0.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpxlmlp3d0.lua:12:
    in local 'candidate'\n\t/tmp/tmpxlmlp3d0.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local len = #string
            for i = 1, len / 2 do
                if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpbxhvhguv.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local reversed_string = string:reverse()
        local longest_postfix = longest_common_substring(string, reversed_string)
        local prefix = string:sub(1, string:len() - longest_postfix:len())
        return string .. reversed_string:sub(1, prefix:len())
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68i4qn9p.lua:13:
    attempt to call a nil value (global 'longest_common_substring')\nstack traceback:\n\t/tmp/tmp68i4qn9p.lua:13:
    in local 'candidate'\n\t/tmp/tmp68i4qn9p.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function reverse(string)
            return string:reverse()
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpxob94uu_.lua:26: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local len = string:len()
        local palindrome_suffix = find_palindrome_suffix(string)
        local prefix = string:sub(1, len - palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1jg8hnj2.lua:13:
    attempt to call a nil value (global 'find_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp1jg8hnj2.lua:13:
    in local 'candidate'\n\t/tmp/tmp1jg8hnj2.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local length = #string
        local palindrome_length = 0
        local palindrome_start = 0
        local palindrome_end = 0
        local i = 1
        while i <= length do
            local j = 1
            while j <= length do
                if i + j - 1 > length then
                    break
                end
                if string:sub(i, i + j - 1) == string:sub(length - j + 1, length - (i - 1)) then
                    if j > palindrome_length then
                        palindrome_length = j
                        palindrome_start = i
                        palindrome_end = i + j - 1
                    end
                end
                j = j + 1
            end
            i = i + 1
        end
        if palindrome_length == 0 then
            return string
        end
        return string .. string:sub(palindrome_start, palindrome_end - 1):reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbm_5xai.lua:46:
    expected: \"xyx\"\nactual: \"xyxyx\"\nstack traceback:\n\t/tmp/tmphbm_5xai.lua:46:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptmdemyy4.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmptmdemyy4.lua:12:
    in local 'candidate'\n\t/tmp/tmptmdemyy4.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2pqyb880.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp2pqyb880.lua:12:
    in local 'candidate'\n\t/tmp/tmp2pqyb880.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8mpuly8.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpo8mpuly8.lua:12:
    in local 'candidate'\n\t/tmp/tmpo8mpuly8.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function reverse(string)
            local reversed = ''
            for i = #string, 1, -1 do
                reversed = reversed .. string:sub(i, i)
            end
            return reversed
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpsgyihdpw.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphdjh084y.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmphdjh084y.lua:12:
    in local 'candidate'\n\t/tmp/tmphdjh084y.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local n = #string
        local suffix = string
        local prefix = ''
        local i = 1
        while i <= n do
            if is_palindrome(suffix) then
                break
            end
            suffix = string.sub(string, i, n)
            prefix = string.sub(string, 1, i - 1)
            i = i + 1
        end
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsv7scvqh.lua:17:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpsv7scvqh.lua:17:
    in local 'candidate'\n\t/tmp/tmpsv7scvqh.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix_len = find_longest_palindrome_postfix(string)
        local prefix = string:sub(1, prefix_len)
        local suffix = string:sub(prefix_len + 1)
        return string .. reverse(suffix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmi8_5_zh.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_postfix')\nstack
    traceback:\n\t/tmp/tmpmi8_5_zh.lua:12: in local 'candidate'\n\t/tmp/tmpmi8_5_zh.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local len = #string
        local palindrome_len = 0
        local palindrome_pos = 0
        local i = 1
        while i <= len do
            local j = 1
            while j <= len - i + 1 do
                if string:sub(i, i + j - 1) == string:sub(len - j + 1, len - i + j) then
                    if j > palindrome_len then
                        palindrome_len = j
                        palindrome_pos = i
                    end
                end
                j = j + 1
            end
            i = i + 1
        end
        return string .. string:sub(1, palindrome_pos - 1):reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlyyki5r.lua:37:
    expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpvlyyki5r.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local n = #string
        local i = n
        while i > 0 do
            local prefix = string:sub(1, i)
            local suffix = string:sub(n - i + 1, n)
            if prefix == suffix then
                return string .. string:sub(i + 1, n):reverse()
            end
            i = i - 1
        end
        return string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93rvtgmg.lua:30:
    expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp93rvtgmg.lua:30:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, string:len() - suffix:len())
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvwohrejo.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpvwohrejo.lua:12:
    in local 'candidate'\n\t/tmp/tmpvwohrejo.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyzhi6lp6.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpyzhi6lp6.lua:12:
    in local 'candidate'\n\t/tmp/tmpyzhi6lp6.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. string:reverse():sub(1, #prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5iifm182.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp5iifm182.lua:12:
    in local 'candidate'\n\t/tmp/tmp5iifm182.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5bfwo_qo.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp5bfwo_qo.lua:12:
    in local 'candidate'\n\t/tmp/tmp5bfwo_qo.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4y68046m.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp4y68046m.lua:12:
    in local 'candidate'\n\t/tmp/tmp4y68046m.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, math.floor(#string / 2))
        local postfix = string:sub(math.ceil(#string / 2) + 1)
        local longest_palindrome_postfix = find_longest_palindrome_postfix(postfix)
        local prefix_to_append = prefix:sub(1, #prefix - #longest_palindrome_postfix)
        return string .. prefix_to_append:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpafloa9vs.lua:14:
    attempt to call a nil value (global 'find_longest_palindrome_postfix')\nstack
    traceback:\n\t/tmp/tmpafloa9vs.lua:14: in local 'candidate'\n\t/tmp/tmpafloa9vs.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8lqyyd0b.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp8lqyyd0b.lua:12:
    in local 'candidate'\n\t/tmp/tmp8lqyyd0b.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix_length = longest_palindromic_suffix(string)
        local prefix = string:sub(1, #string - suffix_length)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfeuhpmh0.lua:12:
    attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\t/tmp/tmpfeuhpmh0.lua:12:
    in local 'candidate'\n\t/tmp/tmpfeuhpmh0.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local suffix_len = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - suffix_len)
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptet18hc4.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmptet18hc4.lua:12:
    in local 'candidate'\n\t/tmp/tmptet18hc4.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbinp11wy.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpbinp11wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpbinp11wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local s = string
        local l = #s
        local i = 1
        local j = l
        local k = 0
        local t = {}
        while i <= j do
            if s:sub(i, j) == s:sub(j, i) then
                k = j
            end
            i = i + 1
            j = j - 1
        end
        for i = k + 1, l do
            t[#t + 1] = s:sub(i, i)
        end
        return s .. table.concat(t):reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpee_rzx10.lua:36:
    expected: \"xyzyx\"\nactual: \"xyzz\"\nstack traceback:\n\t/tmp/tmpee_rzx10.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local string_len = #string
        local palindrome_len = 0
        local palindrome_pos = 0
        local palindrome_table = {}
        local i = 1
        local j = string_len
        local k = 1
        local l = 1
        local m = 0
        local n = 0
        local o = 0
        local p = 0
        local q = 0
        local r = 0
        local s = 0
        local t = 0
        local u = 0
        local v = 0
        local w = 0
        local x = 0
        local y = 0
        local z = 0
        local aa = 0
        local ab = 0
        local ac = 0
        local ad = 0
        local ae = 0
        local af = 0
        local ag = 0
        local ah = 0
        local ai = 0
        local aj = 0
        local ak = 0
        local al = 0
        local am = 0
        local an = 0
        local ao = 0
        local ap = 0
        local aq = 0
        local ar = 0
        local as = 0
        local at = 0
        local au = 0
        local av = 0
        local aw = 0
        local ax = 0
        local ay = 0
        local az = 0
        local ba = 0
        local bb = 0
        local bc = 0
        local bd = 0
        local be = 0
        local bf = 0
        local bg = 0
        local bh = 0
        local bi = 0
        local bj = 0
        local bk = 0
        local bl = 0
        local bm = 0
        local bn = 0
        local bo = 0
        local bp = 0
        local bq = 0
        local br = 0
        local bs = 0
        local bt = 0
        local bu = 0
        local bv = 0
        local bw = 0
        local bx = 0
        local by = 0
        local bz = 0
        local ca = 0
        local cb = 0
        local cc = 0
        local cd = 0
        local
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpec1u7dr9.lua:102: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_suffix = longest_palindromic_suffix(string)
        local prefix = string:sub(1, #string - #longest_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sw9gntm.lua:12:
    attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\t/tmp/tmp7sw9gntm.lua:12:
    in local 'candidate'\n\t/tmp/tmp7sw9gntm.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local length = #string
        local suffix = string
        local prefix = ''
        local palindrome = ''
        local i = 1
        while i <= length do
            local j = length - i + 1
            if is_palindrome(suffix) then
                palindrome = suffix .. reverse(prefix)
                break
            end
            prefix = prefix .. string:sub(j, j)
            suffix = string:sub(i, length)
            i = i + 1
        end
        return palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2p7snrl4.lua:19:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp2p7snrl4.lua:19:
    in local 'candidate'\n\t/tmp/tmp2p7snrl4.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local n = #string
        local i = n
        while i > 0 do
            if is_palindrome(string, i, n) then
                return string .. string:sub(1, n - i):reverse()
            end
            i = i - 1
        end
        return string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5cl9b9m.lua:15:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp_5cl9b9m.lua:15:
    in local 'candidate'\n\t/tmp/tmp_5cl9b9m.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local string_length = #string
        local palindrome_length = 0
        local palindrome_end = 0
        local palindrome_start = 0
        local palindrome_end_next = 0
        local palindrome_start_next = 0
        local palindrome_length_next = 0
        local palindrome_length_max = 0
        local palindrome_end_max = 0
        local palindrome_start_max = 0
        local palindrome_length_max_next = 0
        local palindrome_end_max_next = 0
        local palindrome_start_max_next = 0
        local palindrome_length_max_next_next = 0
        local palindrome_end_max_next_next = 0
        local palindrome_start_max_next_next = 0
        local palindrome_length_max_next_next_next = 0
        local palindrome_end_max_next_next_next = 0
        local palindrome_start_max_next_next_next = 0
        local palindrome_length_max_next_next_next_next = 0
        local palindrome_end_max_next_next_next_next = 0
        local palindrome_start_max_next_next_next_next = 0
        local palindrome_length_max_next_next_next_next_next = 0
        local palindrome_end_max_next_next_next_next_next = 0
        local palindrome_start_max_next_next_next_next_next = 0
        local palindrome_length_max_next_next_next_next_next_next = 0
        local palindrome_end_max_next_next_next_next_next_next = 0
        local palindrome_start_max_next_next_next_next_next_next = 0
        local palindrome_length_max_next_next_next_next_next_next_next = 0
        local palindrome_end_max_next_next_next_next_next_next_next = 0
        local palindrome_
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp6uybp9ec.lua:54: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local string_length = string.len(string)
      local palindrome_length = 0
      local palindrome_end = 0
      local palindrome_start = 0
      local palindrome_length_at = {}
      for i = 1, string_length do
        palindrome_length_at[i] = 0
      end
      for i = 1, string_length do
        local j = i
        while j > 0 and string.sub(string, j, j) == string.sub(string, i, i) do
          j = j - 1
        end
        palindrome_length_at[i] = i - j
      end
      for i = 1, string_length do
        local j = i - palindrome_length_at[i]
        if j > 0 and palindrome_length_at[j] == j then
          palindrome_length = palindrome_length_at[i]
          palindrome_end = i
          palindrome_start = j
        end
      end
      local prefix = string.sub(string, 1, palindrome_start - 1)
      local prefix_length = string.len(prefix)
      local prefix_reversed = ''
      for i = prefix_length, 1, -1 do
        prefix_reversed = prefix_reversed .. string.sub(prefix, i, i)
      end
      return string .. prefix_reversed
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6n25d70.lua:48:
    expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpy6n25d70.lua:48:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaemqhsvc.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpaemqhsvc.lua:12:
    in local 'candidate'\n\t/tmp/tmpaemqhsvc.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvdt_l4lh.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpvdt_l4lh.lua:12:
    in local 'candidate'\n\t/tmp/tmpvdt_l4lh.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkh8ie8a9.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpkh8ie8a9.lua:12:
    in local 'candidate'\n\t/tmp/tmpkh8ie8a9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local reversed_string = string:reverse()
        local string_length = string:len()
        local reversed_string_length = reversed_string:len()
        local longest_palindrome_length = 0
        local longest_palindrome_index = 0
        local longest_palindrome_suffix = ''
        local longest_palindrome_prefix = ''
        local longest_palindrome_suffix_index = 0
        local longest_palindrome_prefix_index = 0
        local longest_palindrome_suffix_length = 0
        local longest_palindrome_prefix_length = 0
        local longest_palindrome_suffix_reversed = ''
        local longest_palindrome_prefix_reversed = ''
        local longest_palindrome_suffix_reversed_length = 0
        local longest_palindrome_prefix_reversed_length = 0
        local longest_palindrome_suffix_reversed_index = 0
        local longest_palindrome_prefix_reversed_index = 0
        local longest_palindrome_suffix_reversed_index_in_string = 0
        local longest_palindrome_prefix_reversed_index_in_string = 0
        local longest_palindrome_suffix_reversed_index_in_string_length = 0
        local longest_palindrome_prefix_reversed_index_in_string_length = 0
        local longest_palindrome_suffix_reversed_index_in_string_index = 0
        local longest_palindrome_prefix_reversed_index_in_string_index = 0
        local longest_palindrome_suffix_reversed_index_in_string_index_length = 0
        local longest_palindrome_prefix_reversed_index_in_string_index_length = 0
        local longest_palindrome_suffix_reversed_index_in_string_index_index = 0
        local longest_palindrome_prefix_reversed_index_in_string_index_index = 0
        local longest_palindrome_suffix_
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpjymwi0mb.lua:51: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp5cujob2.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpp5cujob2.lua:12:
    in local 'candidate'\n\t/tmp/tmpp5cujob2.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvnzlmzbn.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpvnzlmzbn.lua:12:
    in local 'candidate'\n\t/tmp/tmpvnzlmzbn.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5l0vrys7.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp5l0vrys7.lua:12:
    in local 'candidate'\n\t/tmp/tmp5l0vrys7.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiks_duce.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpiks_duce.lua:12:
    in local 'candidate'\n\t/tmp/tmpiks_duce.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, string:len() - longest_palindrome_suffix:len())
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp51ao5wh6.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp51ao5wh6.lua:12:
    in local 'candidate'\n\t/tmp/tmp51ao5wh6.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm16q5teq.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpm16q5teq.lua:12:
    in local 'candidate'\n\t/tmp/tmpm16q5teq.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        return string .. string.reverse(string.sub(string, 1, #string - #longest_palindrome_suffix))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp38v6eapv.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp38v6eapv.lua:12:
    in local 'candidate'\n\t/tmp/tmp38v6eapv.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local length = #string
        local palindrome_length = 0
        for i = 1, length do
            if string:sub(1, i) == string:sub(length - i + 1, length):reverse() then
                palindrome_length = i
            end
        end
        return string .. string:sub(1, length - palindrome_length):reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jgoyrvn.lua:27:
    expected: \"xyzyx\"\nactual: \"xyzzyx\"\nstack traceback:\n\t/tmp/tmp0jgoyrvn.lua:27:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, #string - #suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzg7vbx1.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmplzg7vbx1.lua:12:
    in local 'candidate'\n\t/tmp/tmplzg7vbx1.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        local reversed_prefix = prefix:reverse()
        return string .. reversed_prefix
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbqjh60uu.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpbqjh60uu.lua:12:
    in local 'candidate'\n\t/tmp/tmpbqjh60uu.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. string:reverse():sub(1, #prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdgk0dtg.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpgdgk0dtg.lua:12:
    in local 'candidate'\n\t/tmp/tmpgdgk0dtg.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvcp95ffz.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpvcp95ffz.lua:12:
    in local 'candidate'\n\t/tmp/tmpvcp95ffz.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local longest_palindrome = find_longest_palindrome(string)
      local prefix = string:sub(1, #string - #longest_palindrome)
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpylpauprv.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\t/tmp/tmpylpauprv.lua:12:
    in local 'candidate'\n\t/tmp/tmpylpauprv.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n--
    Algorithm idea is simple:\n-- - Find the longest postfix of supplied string that
    is a palindrome.\n-- - Append to the end of the string reverse of a string prefix
    that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n-- ''\n--
    >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n-- 'catac'\nlocal
    function make_palindrome(string)\n    local len = string:len()\n    local suffix
    = string:sub(len)\n    local prefix = string:sub(1, len - 1)\n    local prefix_len
    = prefix:len()\n    local suffix_len = suffix:len()\n    local palindrome_len
    = 0\n    local palindrome_start = 0\n    local palindrome_end = 0\n    local i
    = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local
    n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local
    s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local
    x = 0\n    local y = 0\n    local z = 0\n    local aa = 0\n    local ab = 0\n
    \   local ac = 0\n    local ad = 0\n    local ae = 0\n    local af = 0\n    local
    ag = 0\n    local ah = 0\n    local ai = 0\n    local aj = 0\n    local ak = 0\n
    \   local al = 0\n    local am = 0\n    local an = 0\n    local ao = 0\n    local
    ap = 0\n    local aq = 0\n    local ar = 0\n    local as = 0\n    local at = 0\n
    \   local au = 0\n    local av = 0\n    local aw = 0\n    local ax = 0\n    local
    ay = 0\n    local az = 0\n    local ba = 0\n    local bb = 0\n    local bc = 0\n
    \   local bd = 0\n    local be = 0\n    local bf = 0\n    local bg = 0\n    local
    bh = 0\n    local bi = 0\n    local bj = 0\n    local bk = 0\n    local bl = 0\n
    \   local bm = 0\n    local bn = 0\n    local bo = 0\n    local bp = 0\n    local
    bq = 0\n    local br = 0\n    local bs = 0\n    local bt = 0\n    local bu = 0\n
    \   local bv = 0\n    local bw = 0\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),
    'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),
    'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: 'lua: /tmp/tmpzmp8m1gc.lua:99: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv9irxtm7.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpv9irxtm7.lua:12:
    in local 'candidate'\n\t/tmp/tmpv9irxtm7.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_c9x3jgb.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp_c9x3jgb.lua:12:
    in local 'candidate'\n\t/tmp/tmp_c9x3jgb.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzdvlwcru.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpzdvlwcru.lua:12:
    in local 'candidate'\n\t/tmp/tmpzdvlwcru.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmuwism3z.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpmuwism3z.lua:12:
    in local 'candidate'\n\t/tmp/tmpmuwism3z.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local len = #string
        local palindrome_len = 0
        local palindrome_pos = 0
        local i = 1
        while i <= len do
            local j = 1
            while i - j >= 1 and i + j <= len and string:sub(i - j, i - j) == string:sub(i + j, i + j) do
                j = j + 1
            end
            j = j - 1
            if j > palindrome_len then
                palindrome_len = j
                palindrome_pos = i
            end
            i = i + 1
        end
        if palindrome_len == 0 then
            return string
        end
        local prefix = string:sub(1, palindrome_pos - palindrome_len - 1)
        return string .. string:reverse():sub(1, #prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kcgd36f.lua:40:
    expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp_kcgd36f.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local n = #string
        local palindrome_suffix = longest_palindrome_suffix(string)
        local palindrome_prefix = string.reverse(string:sub(1, n - palindrome_suffix))
        return string .. palindrome_prefix
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0djp84qs.lua:13:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp0djp84qs.lua:13:
    in local 'candidate'\n\t/tmp/tmp0djp84qs.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function reverse(string)
            local result = ''
            for i = #string, 1, -1 do
                result = result .. string:sub(i, i)
            end
            return result
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpu2n6l9y3.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy75_kp8d.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpy75_kp8d.lua:12:
    in local 'candidate'\n\t/tmp/tmpy75_kp8d.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3v4blgj2.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp3v4blgj2.lua:12:
    in local 'candidate'\n\t/tmp/tmp3v4blgj2.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9r5nr6mr.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp9r5nr6mr.lua:12:
    in local 'candidate'\n\t/tmp/tmp9r5nr6mr.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        local reversed_prefix = prefix:reverse()
        return string .. reversed_prefix
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbwkfwck7.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpbwkfwck7.lua:12:
    in local 'candidate'\n\t/tmp/tmpbwkfwck7.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcaak56ye.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpcaak56ye.lua:12:
    in local 'candidate'\n\t/tmp/tmpcaak56ye.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local palindrome_suffix = find_longest_palindrome_suffix(string)
      local palindrome_prefix = string.reverse(string.sub(string, 1, string.len(string) - string.len(palindrome_suffix)))
      return string .. palindrome_prefix
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpih4541cq.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpih4541cq.lua:12:
    in local 'candidate'\n\t/tmp/tmpih4541cq.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local len = #string
            for i = 1, len / 2 do
                if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp0uk9tx1f.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2hi6bzn.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpy2hi6bzn.lua:12:
    in local 'candidate'\n\t/tmp/tmpy2hi6bzn.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function is_palindrome(string)
            local length = #string
            for i = 1, length / 2 do
                if string:sub(i, i) ~= string:sub(length - i + 1, length - i + 1) then
                    return false
                end
            end
            return true
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpnup3zuf5.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppc3dewur.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmppc3dewur.lua:12:
    in local 'candidate'\n\t/tmp/tmppc3dewur.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbl_7vjar.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpbl_7vjar.lua:12:
    in local 'candidate'\n\t/tmp/tmpbl_7vjar.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, #string - #suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk20znv6w.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpk20znv6w.lua:12:
    in local 'candidate'\n\t/tmp/tmpk20znv6w.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ma4n76w.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp1ma4n76w.lua:12:
    in local 'candidate'\n\t/tmp/tmp1ma4n76w.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkl0l4agh.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpkl0l4agh.lua:12:
    in local 'candidate'\n\t/tmp/tmpkl0l4agh.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. string:reverse():sub(1, #prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjo491uu.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpjjo491uu.lua:12:
    in local 'candidate'\n\t/tmp/tmpjjo491uu.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0v90w_9k.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp0v90w_9k.lua:12:
    in local 'candidate'\n\t/tmp/tmp0v90w_9k.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwn9bhyv9.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpwn9bhyv9.lua:12:
    in local 'candidate'\n\t/tmp/tmpwn9bhyv9.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg488ag4e.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpg488ag4e.lua:12:
    in local 'candidate'\n\t/tmp/tmpg488ag4e.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp11sg3t7t.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp11sg3t7t.lua:12:
    in local 'candidate'\n\t/tmp/tmp11sg3t7t.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5w9en2j2.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp5w9en2j2.lua:12:
    in local 'candidate'\n\t/tmp/tmp5w9en2j2.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local reversed = string:reverse()
        local suffix = string:sub(1, #string - 1)
        local prefix = string:sub(2, #string)
        local suffix_palindrome = reversed:find(suffix)
        local prefix_palindrome = reversed:find(prefix)
        if suffix_palindrome then
            return string .. reversed:sub(suffix_palindrome + 1, #string)
        elseif prefix_palindrome then
            return string .. reversed:sub(prefix_palindrome + 1, #string)
        else
            return string .. reversed:sub(1, #string)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8c8_1wh.lua:31:
    expected: \"xyzyx\"\nactual: \"xyzzyx\"\nstack traceback:\n\t/tmp/tmpe8c8_1wh.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local palindrome_suffix = find_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_x94uk49.lua:12:
    attempt to call a nil value (global 'find_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp_x94uk49.lua:12:
    in local 'candidate'\n\t/tmp/tmp_x94uk49.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local n = #string
        local i = n
        while i > 0 do
            if is_palindrome(string, i, n) then
                break
            end
            i = i - 1
        end
        return string .. string:sub(1, n - i):reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8zkm_vs.lua:15:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpl8zkm_vs.lua:15:
    in local 'candidate'\n\t/tmp/tmpl8zkm_vs.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #suffix)
        return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpemh23grb.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpemh23grb.lua:12:
    in local 'candidate'\n\t/tmp/tmpemh23grb.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8g6szj9.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpk8g6szj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpk8g6szj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function reverse(s)
            local r = ''
            for i = 1, #s do
                r = s:sub(i, i) .. r
            end
            return r
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpzy9t7b1t.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #palindrome_suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ymujdea.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp7ymujdea.lua:12:
    in local 'candidate'\n\t/tmp/tmp7ymujdea.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome = string
        local prefix = string:sub(1, #string - 1)
        while prefix ~= '' and not is_palindrome(prefix) do
            palindrome = palindrome .. prefix:reverse()
            prefix = prefix:sub(1, #prefix - 1)
        end
        return palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7u_a9s6.lua:14:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpk7u_a9s6.lua:14:
    in local 'candidate'\n\t/tmp/tmpk7u_a9s6.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8izpq_s5.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp8izpq_s5.lua:12:
    in local 'candidate'\n\t/tmp/tmp8izpq_s5.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = find_longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgr9h_lt.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmprgr9h_lt.lua:12:
    in local 'candidate'\n\t/tmp/tmprgr9h_lt.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local longest_palindrome_suffix = longest_palindrome_suffix(string)
        local prefix = string:sub(1, #string - #longest_palindrome_suffix)
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg03vlmqy.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmpg03vlmqy.lua:12:
    in local 'candidate'\n\t/tmp/tmpg03vlmqy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local function reverse(string)
            return string:reverse()
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmphpbx0eph.lua:26: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local suffix = longest_palindrome_suffix(string)
        local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
        return string .. string.reverse(prefix)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp38nzyxfc.lua:12:
    attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp38nzyxfc.lua:12:
    in local 'candidate'\n\t/tmp/tmp38nzyxfc.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find the shortest palindrome that begins with a supplied string.
    -- Algorithm idea is simple:
    -- - Find the longest postfix of supplied string that is a palindrome.
    -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    -- >>> make_palindrome('')
    -- ''
    -- >>> make_palindrome('cat')
    -- 'catac'
    -- >>> make_palindrome('cata')
    -- 'catac'
    local function make_palindrome(string)
        local palindrome_suffix = find_longest_palindrome_suffix(string)
        local palindrome_prefix = string.reverse(string.sub(string, 1, #string - #palindrome_suffix))
        return string .. palindrome_prefix
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = make_palindrome
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('x'), 'x')
        lu.assertEquals(candidate('xyz'), 'xyzyx')
        lu.assertEquals(candidate('xyx'), 'xyx')
        lu.assertEquals(candidate('jerry'), 'jerryrrej')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rx84cmr.lua:12:
    attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack traceback:\n\t/tmp/tmp6rx84cmr.lua:12:
    in local 'candidate'\n\t/tmp/tmp6rx84cmr.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
