---
name: HumanEval_22_filter_integers
language: lua
prompt: |
  -- Filter given table of any luathon values only for integers
  -- >>> filter_integers({'a', 3.14, 5})
  -- {5}
  -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
  -- {1, 2, 3}
  local function filter_integers(values)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = filter_integers
      lu.assertEquals(candidate({}), {})
      lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
      lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if is_integer(value) then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v % 1 == 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value == math.floor(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local integers = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(integers, value)
          end
      end
      return integers
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v % 1 == 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value == math.floor(value) then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v % 1 == 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and v % 1 == 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value == math.floor(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local integers = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(integers, v)
      end
    end
    return integers
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value == math.floor(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local integers = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(integers, value)
      end
    end
    return integers
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for i, v in ipairs(values) do
          if type(v) == 'number' and v % 1 == 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and v % 1 == 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local integers = {}
    for i, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(integers, v)
      end
    end
    return integers
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v % 1 == 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v % 1 == 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and v == math.floor(v) then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        result[#result + 1] = value
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value == math.floor(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v % 1 == 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value == math.floor(value) then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for i, v in ipairs(values) do
          if type(v) == 'number' and v == math.floor(v) then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and v % 1 == 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              result[#result + 1] = value
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local new_values = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(new_values, value)
      end
    end
    return new_values
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and v % 1 == 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value == math.floor(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value == math.floor(value) then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value == math.floor(value) then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value == math.floor(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local new_values = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(new_values, value)
          end
      end
      return new_values
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value == math.floor(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for i, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for i, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v == math.floor(v) then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value == math.floor(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value == math.floor(value) then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v % 1 == 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local integers = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(integers, value)
          end
      end
      return integers
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v % 1 == 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and math.floor(v) == v then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if is_integer(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local integers = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(integers, value)
          end
      end
      return integers
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value == math.floor(value) then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and v % 1 == 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and math.floor(value) == value then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(values) do
          if type(v) == 'number' and v == math.floor(v) then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and value % 1 == 0 then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
    local result = {}
    for _, value in ipairs(values) do
      if type(value) == 'number' and math.floor(value) == value then
        table.insert(result, value)
      end
    end
    return result
  end
- |2-
      local result = {}
      for _, value in ipairs(values) do
          if type(value) == 'number' and value % 1 == 0 then
              table.insert(result, value)
          end
      end
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(values) do
      if type(v) == 'number' and math.floor(v) == v then
        table.insert(result, v)
      end
    end
    return result
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
