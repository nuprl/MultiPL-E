---
name: HumanEval_59_largest_prime_factor
language: lua
prompt: |
  -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
  -- >>> largest_prime_factor(13195)
  -- 29
  -- >>> largest_prime_factor(2048)
  -- 2
  local function largest_prime_factor(n)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = largest_prime_factor
      lu.assertEquals(candidate(15), 5)
      lu.assertEquals(candidate(27), 3)
      lu.assertEquals(candidate(63), 7)
      lu.assertEquals(candidate(330), 11)
      lu.assertEquals(candidate(13195), 29)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local largest_prime = 2
    while n > largest_prime do
      if n % largest_prime == 0 then
        n = n / largest_prime
      else
        largest_prime = next_prime(largest_prime)
      end
    end
    return largest_prime
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local largest_factor = 1
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest_factor = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest_factor
  end
- |2-
      local largest = 1
      for i = 2, n do
          if n % i == 0 then
              largest = i
              n = n / i
          end
      end
      return largest
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local p = 2
    while n % p ~= 0 do
      p = p + 1
    end
    if n == p then
      return n
    else
      return largest_prime_factor(n / p)
    end
  end
- |2-
    local factors = {}
    local i = 2
    while n > 1 do
      if n % i == 0 then
        table.insert(factors, i)
        n = n / i
      else
        i = i + 1
      end
    end
    return factors[#factors]
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
      local p = 2
      while n % p == 0 do
          n = n / p
      end
      p = 3
      while n > 1 do
          while n % p == 0 do
              n = n / p
          end
          p = p + 2
      end
      return p - 2
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
      local p = 2
      while n > 1 do
          if n % p == 0 then
              n = n / p
          else
              p = p + 1
          end
      end
      return p
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
      local largest_factor = 1
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest_factor = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest_factor
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local largest_factor = 1
    local factor = 2
    while n > 1 do
      if n % factor == 0 then
        largest_factor = factor
        n = n / factor
      else
        factor = factor + 1
      end
    end
    return largest_factor
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
    local p = 2
    while n > 1 do
      if n % p == 0 then
        n = n / p
      else
        p = p + 1
      end
    end
    return p
  end
- |2-
      local largest_prime = 2
      while n % largest_prime == 0 do
          n = n / largest_prime
      end
      local i = 3
      while i <= math.sqrt(n) do
          if n % i == 0 then
              n = n / i
              largest_prime = i
          else
              i = i + 2
          end
      end
      if n > largest_prime then
          largest_prime = n
      end
      return largest_prime
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local largest_factor = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest_factor = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest_factor
  end
- |2-
      local largest_factor = 1
      local factor = 2
      while n > 1 do
          if n % factor == 0 then
              largest_factor = factor
              n = n / factor
          else
              factor = factor + 1
          end
      end
      return largest_factor
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local largest_prime = 2
      while n > largest_prime do
          if n % largest_prime == 0 then
              n = n / largest_prime
          else
              largest_prime = largest_prime + 1
          end
      end
      return largest_prime
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
    local i = 2
    local max = 1
    while i <= n do
      if n % i == 0 then
        max = i
        n = n / i
      else
        i = i + 1
      end
    end
    return max
  end
- |2-
    local max = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        max = i
        n = n / i
      else
        i = i + 1
      end
    end
    return max
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local p = 2
    while n > 1 do
      if n % p == 0 then
        n = n / p
      else
        p = p + 1
      end
    end
    return p
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- "\tlocal i = 2\n\tlocal max = 1\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tn
  = n / i\n\t\t\tmax = i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn max\nend"
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
      local largest = 1
      for i = 2, n do
          if n % i == 0 then
              largest = i
              n = n / i
          end
      end
      return largest
  end
- |2-
      local largest = 1
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
      local f = 2
      while f * f <= n do
          if n % f == 0 then
              n = n / f
          else
              f = f + 1
          end
      end
      return n
  end
- "\tlocal i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti
  = i + 1\n\t\tend\n\tend\n\treturn i\nend"
- |2-
    local p = 2
    while n % p ~= 0 do
      p = next_prime(p)
    end
    if n == p then
      return n
    else
      return largest_prime_factor(n / p)
    end
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local p = 2
    while n % p ~= 0 do
      p = p + 1
    end
    if n == p then
      return n
    else
      return largest_prime_factor(n / p)
    end
  end
- |2-
    local factor = 2
    while n > 1 do
      if n % factor == 0 then
        n = n / factor
      else
        factor = factor + 1
      end
    end
    return factor
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local largest = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest
  end
- |2-
      local largest = 1
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- "\tlocal i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti
  = i + 1\n\t\tend\n\tend\n\treturn i\nend"
- |2-
      local largest = 1
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest
  end
- |2-
      local factors = prime_factors(n)
      return factors[#factors]
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local factors = prime_factors(n)
    return factors[#factors]
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
    local largest_prime = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest_prime = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest_prime
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local largest_factor = 1
      local factor = 2
      while n > 1 do
          if n % factor == 0 then
              largest_factor = factor
              n = n / factor
          else
              factor = factor + 1
          end
      end
      return largest_factor
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local largest_factor = 1
    local factor = 2
    while n > 1 do
      if n % factor == 0 then
        largest_factor = factor
        n = n / factor
      else
        factor = factor + 1
      end
    end
    return largest_factor
  end
- |2-
      local p = 2
      while n % p == 0 do
          n = n / p
      end
      p = 3
      while n > 1 do
          while n % p == 0 do
              n = n / p
          end
          p = p + 2
      end
      return p - 2
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local largest_prime = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest_prime = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest_prime
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local factors = prime_factors(n)
    return factors[#factors]
  end
- |2-
    local largest_prime = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest_prime = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest_prime
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local prime_factors = {}
    local i = 2
    while n > 1 do
      if n % i == 0 then
        n = n / i
        table.insert(prime_factors, i)
      else
        i = i + 1
      end
    end
    return prime_factors[#prime_factors]
  end
- |2-
    local factor = 2
    while n > 1 do
      if n % factor == 0 then
        n = n / factor
      else
        factor = factor + 1
      end
    end
    return factor
  end
- |2-
      local i = 2
      while n % i ~= 0 do
          i = i + 1
      end
      if n == i then
          return n
      else
          return largest_prime_factor(n / i)
      end
  end
- |2-
    local largest_factor = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest_factor = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest_factor
  end
- |2-
      local largest = 1
      for i = 2, n do
          if n % i == 0 then
              largest = i
              n = n / i
          end
      end
      return largest
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local p = 2
      while n % p == 0 do
          n = n / p
      end
      p = 3
      while n > 1 do
          while n % p == 0 do
              n = n / p
          end
          p = p + 2
      end
      return p - 2
  end
- |2-
      local largest = 1
      for i = 2, math.floor(math.sqrt(n)) do
          if n % i == 0 then
              if is_prime(i) then
                  largest = i
              end
              if is_prime(n / i) then
                  largest = n / i
              end
          end
      end
      return largest
  end
- "\tlocal factor = 2\n\twhile n > 1 do\n\t\tif n % factor == 0 then\n\t\t\tn = n
  / factor\n\t\telse\n\t\t\tfactor = factor + 1\n\t\tend\n\tend\n\treturn factor\nend"
- |2-
      local largest = 1
      for i = 2, math.sqrt(n) do
          if n % i == 0 then
              if is_prime(i) then
                  largest = i
              end
              if is_prime(n / i) then
                  largest = n / i
              end
          end
      end
      return largest
  end
- "\tlocal prime_factors = {}\n\tlocal i = 2\n\twhile i <= n do\n\t\tif n % i == 0
  then\n\t\t\ttable.insert(prime_factors, i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti =
  i + 1\n\t\tend\n\tend\n\treturn prime_factors[#prime_factors]\nend"
- |2-
    local largest = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest
  end
- |2-
      local factor = 2
      while n > 1 do
          if n % factor == 0 then
              n = n / factor
          else
              factor = factor + 1
          end
      end
      return factor
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local largest = 1
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest
  end
- |2-
      local largest_prime = 0
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest_prime = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest_prime
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local p = 2
    while p <= n do
      if n % p == 0 then
        n = n / p
      else
        p = p + 1
      end
    end
    return p
  end
- |2-
    local p = 2
    while n > 1 do
      if n % p == 0 then
        n = n / p
      else
        p = p + 1
      end
    end
    return p
  end
- |2-
    local largest = 1
    local divisor = 2
    while n > 1 do
      if n % divisor == 0 then
        largest = divisor
        n = n / divisor
      else
        divisor = divisor + 1
      end
    end
    return largest
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local largest = 1
      for i = 2, n do
          if n % i == 0 then
              largest = i
              n = n / i
          end
      end
      return largest
  end
- |2-
    local p = 2
    while n > 1 do
      while n % p == 0 do
        n = n / p
      end
      p = p + 1
    end
    return p - 1
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
      local p = 2
      while n > 1 do
          if n % p == 0 then
              n = n / p
          else
              p = p + 1
          end
      end
      return p
  end
- "\tlocal i = 2\n\twhile i * i <= n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti
  = i + 1\n\t\tend\n\tend\n\treturn n\nend"
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local largest_prime = 1
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest_prime = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest_prime
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local largest = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- "\tlocal largest = 1\n\tfor i = 2, n do\n\t\tif n % i == 0 then\n\t\t\tlargest =
  i\n\t\t\tn = n / i\n\t\t\ti = i - 1\n\t\tend\n\tend\n\treturn largest\nend"
- "\tlocal i = 2\n\tlocal last_factor = 1\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tlast_factor
  = i\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn last_factor\nend"
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- "\tlocal i = 2\n\twhile i < n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti
  = i + 1\n\t\tend\n\tend\n\treturn n\nend"
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local p = 2
    while p <= n do
      if n % p == 0 then
        n = n / p
      else
        p = p + 1
      end
    end
    return p
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- "\tlocal largest_factor = 1\n\tlocal i = 2\n\twhile i <= n do\n\t\tif n % i == 0
  then\n\t\t\tlargest_factor = i\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn
  largest_factor\nend"
- |2-
      local largest_prime = 1
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest_prime = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest_prime
  end
- |2-
      local largest_prime_factor = 1
      local i = 2
      while i <= n do
          if n % i == 0 then
              largest_prime_factor = i
              n = n / i
          else
              i = i + 1
          end
      end
      return largest_prime_factor
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        return largest_prime_factor(n / i)
      end
      i = i + 1
    end
    return n
  end
- |2-
    local largest = 2
    while n > largest do
      if n % largest == 0 then
        n = n / largest
      else
        largest = largest + 1
      end
    end
    return largest
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
      local p = 2
      while p*p <= n do
          if n % p == 0 then
              n = n / p
          else
              p = p + 1
          end
      end
      return n
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        return largest_prime_factor(n / i)
      end
      i = i + 1
    end
    return n
  end
- |2-
      local factor = 2
      while n > 1 do
          if n % factor == 0 then
              n = n / factor
          else
              factor = factor + 1
          end
      end
      return factor
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
      local i = 2
      while i < n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- "\tlocal p = 2\n\twhile n > 1 do\n\t\tif n % p == 0 then\n\t\t\tn = n / p\n\t\telse\n\t\t\tp
  = p + 1\n\t\tend\n\tend\n\treturn p\nend"
- |2-
    local largest_prime = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest_prime = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest_prime
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
    local factor = 2
    while n % factor ~= 0 do
      factor = factor + 1
    end
    if n == factor then
      return n
    else
      return largest_prime_factor(n / factor)
    end
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
      local p = 2
      while n % p == 0 do
          n = n / p
      end
      p = 3
      while n > 1 do
          while n % p == 0 do
              n = n / p
          end
          p = p + 2
      end
      return p - 2
  end
- |2-
    local p = 2
    while n > 1 do
      if n % p == 0 then
        n = n / p
      else
        p = p + 1
      end
    end
    return p
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
    local largest = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
      local largest_prime = 1
      local factor = 2
      while n > 1 do
          if n % factor == 0 then
              largest_prime = factor
              n = n / factor
          else
              factor = factor + 1
          end
      end
      return largest_prime
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
    local p = 2
    while p * p <= n do
      if n % p == 0 then
        n = n / p
      else
        p = p + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local factor = 2
    while n > 1 do
      if n % factor == 0 then
        n = n / factor
      else
        factor = factor + 1
      end
    end
    return factor
  end
- |2-
    local factors = prime_factors(n)
    return factors[#factors]
  end
- |2-
    local largest = 1
    for i = 2, n do
      if n % i == 0 then
        largest = i
        n = n / i
      end
    end
    return largest
  end
- |2-
      local p = 2
      while n > 1 do
          if n % p == 0 then
              n = n / p
          else
              p = p + 1
          end
      end
      return p
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local factor = 2
    while n > 1 do
      if n % factor == 0 then
        n = n / factor
      else
        factor = factor + 1
      end
    end
    return factor
  end
- |2-
      local i = 2
      while i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return i
  end
- |2-
    local factor = 2
    while n > 1 do
      if n % factor == 0 then
        n = n / factor
      else
        factor = factor + 1
      end
    end
    return factor
  end
- |2-
      local factors = prime_factors(n)
      local largest = 0
      for _, v in ipairs(factors) do
          if v > largest then
              largest = v
          end
      end
      return largest
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local p = 2
    while n > 1 do
      if n % p == 0 then
        n = n / p
      else
        p = p + 1
      end
    end
    return p
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- "\tlocal p = 2\n\twhile p <= n do\n\t\tif n % p == 0 then\n\t\t\tn = n / p\n\t\telse\n\t\t\tp
  = p + 1\n\t\tend\n\tend\n\treturn p\nend"
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        return largest_prime_factor(n / i)
      end
      i = i + 1
    end
    return n
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local factor = 2
    while n % factor ~= 0 do
      factor = factor + 1
    end
    if n == factor then
      return n
    else
      return largest_prime_factor(n / factor)
    end
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors[#factors]
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local factors = prime_factors(n)
    return factors[#factors]
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
      local i = 2
      while i * i <= n do
          if n % i == 0 then
              n = n / i
          else
              i = i + 1
          end
      end
      return n
  end
- |2-
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return n
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local factors = prime_factors(n)
    return factors[#factors]
  end
- |2-
      local largest = 1
      for i = 2, n do
          if n % i == 0 then
              largest = i
              n = n / i
          end
      end
      return largest
  end
- |2-
    local largest_factor = 1
    local i = 2
    while i <= n do
      if n % i == 0 then
        largest_factor = i
        n = n / i
      else
        i = i + 1
      end
    end
    return largest_factor
  end
- |2-
      local largest = 1
      for i = 2, math.sqrt(n) do
          if n % i == 0 then
              largest = math.max(largest, largest_prime_factor(i))
              largest = math.max(largest, largest_prime_factor(n / i))
          end
      end
      return largest
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local i = 2
    while i <= n do
      if n % i == 0 then
        n = n / i
      else
        i = i + 1
      end
    end
    return i
  end
- |2-
    local p = 2
    while n % p ~= 0 do
      p = next_prime(p)
    end
    local q = n / p
    if is_prime(q) then
      return q
    else
      return largest_prime_factor(q)
    end
  end
- |2-
      local i = 2
      while i < n do
          if n % i == 0 then
              return largest_prime_factor(n / i)
          end
          i = i + 1
      end
      return n
  end
- |2-
    local largest_prime = 1
    local i = 2
    while i * i <= n do
      if n % i == 0 then
        largest_prime = i
        n = n / i
      else
        i = i + 1
      end
    end
    if n > 1 then
      largest_prime = n
    end
    return largest_prime
  end
- |2-
    local p = 2
    while n % p ~= 0 do
      p = next_prime(p)
    end
    return p
  end
- |2-
    local i = 2
    while i < n do
      if n % i == 0 then
        return largest_prime_factor(n / i)
      end
      i = i + 1
    end
    return n
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
