---
name: HumanEval_65_circular_shift
language: lua
results:
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[1]
            for j = 1, n - 1 do
                digits[j] = digits[j + 1]
            end
            digits[n] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt43hyiuu.lua:36:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpt43hyiuu.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            return table.concat(digits, '')
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk6lqyx1.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpqk6lqyx1.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local l = #s
        if shift > l then
            return string.reverse(s)
        end
        return string.sub(s, l - shift + 1) .. string.sub(s, 1, l - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local s = tostring(x)
        for i = 1, #s do
            digits[i] = s:sub(i, i)
        end
        for i = 1, shift do
            table.insert(digits, 1, table.remove(digits))
        end
        return table.concat(digits)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pfpi0v6.lua:25:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmp_pfpi0v6.lua:25:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local l = #s
        if shift > l then
            return string.reverse(s)
        end
        return string.sub(s, l - shift + 1) .. string.sub(s, 1, l - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39gmtn2w.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp39gmtn2w.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgr99bqm.lua:21:
    expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpqgr99bqm.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift >= len then
            return string.reverse(digits)
        end
        local left = string.sub(digits, 1, shift)
        local right = string.sub(digits, shift + 1, len)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnmexdm.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp3hnmexdm.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        if shift > #s then
            return s:reverse()
        end
        return s:sub(shift + 1) .. s:sub(1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1b7s6om.lua:19:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpi1b7s6om.lua:19:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local s = tostring(x)
      local n = #s
      if shift > n then
        return string.reverse(s)
      end
      local r = string.sub(s, n - shift + 1, n) .. string.sub(s, 1, n - shift)
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        local shift = shift % len
        if shift == 0 then
            return digits
        elseif shift > len then
            return string.reverse(digits)
        else
            return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpff2emevi.lua:24:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpff2emevi.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = {}
      local n = 0
      while x > 0 do
        n = n + 1
        digits[n] = x % 10
        x = math.floor(x / 10)
      end
      if shift > n then
        return string.reverse(table.concat(digits))
      end
      local result = {}
      for i = 1, n do
        result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalziy6uk.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpalziy6uk.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift > len then
            return string.reverse(digits)
        end
        local left = string.sub(digits, 1, shift)
        local right = string.sub(digits, shift + 1, len)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k6rfkg_.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp7k6rfkg_.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = {}
      local i = 0
      while x > 0 do
        i = i + 1
        digits[i] = x % 10
        x = math.floor(x / 10)
      end
      if shift > i then
        shift = i
      end
      local result = {}
      for j = 1, i do
        result[j] = digits[(j + shift - 1) % i + 1]
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3xqxc_b.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpk3xqxc_b.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return digits:reverse()
        end
        return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            return string.reverse(table.concat(digits))
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xdf8ci2.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmp_xdf8ci2.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift > len then
            return string.reverse(digits)
        end
        local left = string.sub(digits, 1, shift)
        local right = string.sub(digits, shift + 1, len)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppr4o5ijx.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmppr4o5ijx.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        if shift > #s then
            return s:reverse()
        end
        return s:sub(shift + 1) .. s:sub(1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qmlos5a.lua:19:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp4qmlos5a.lua:19:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        if shift > #s then
            return string.reverse(s)
        end
        return s:sub(shift + 1) .. s:sub(1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89ffhv6h.lua:19:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp89ffhv6h.lua:19:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3k843j_g.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp3k843j_g.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift >= len then
            return string.reverse(digits)
        end
        local left = string.sub(digits, 1, shift)
        local right = string.sub(digits, shift + 1, len)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_ocrtem.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpz_ocrtem.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57dy2m4c.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp57dy2m4c.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakjw2_s4.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpakjw2_s4.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = shift % n
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexd4p40d.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpexd4p40d.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            return table.concat(digits, '')
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        return table.concat(digits, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptazddnf3.lua:32:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmptazddnf3.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        local shift = shift % n
        local s = string.sub(digits, n - shift + 1, n) .. string.sub(digits, 1, n - shift)
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuw5ylbq.lua:21:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmpzuw5ylbq.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return string.reverse(s)
        end
        return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizdljqbc.lua:21:
    expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpizdljqbc.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8mm2ewc.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpw8mm2ewc.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        if shift > #s then
            return s:reverse()
        end
        return s:sub(shift + 1) .. s:sub(1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a_ir7dw.lua:19:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp2a_ir7dw.lua:19:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        local a = string.sub(digits, 1, shift)
        local b = string.sub(digits, shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp874jnh9k.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp874jnh9k.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local l = #s
        if shift > l then
            return s:reverse()
        end
        return s:sub(l - shift + 1) .. s:sub(1, l - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeifcth_1.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpeifcth_1.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = {}
      local n = 0
      while x > 0 do
        n = n + 1
        digits[n] = x % 10
        x = math.floor(x / 10)
      end
      if shift > n then
        return table.concat(digits, '')
      end
      local result = {}
      for i = 1, n do
        result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5fpan10.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpr5fpan10.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local result = digits
        if shift > 0 then
            local n = #digits
            if shift < n then
                result = digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
            else
                result = digits:reverse()
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0n0y6jo.lua:26:
    expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpi0n0y6jo.lua:26:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = string.reverse(tostring(x))
        local n = #digits
        if shift > n then
            return digits
        end
        local first = string.sub(digits, 1, shift)
        local last = string.sub(digits, shift + 1, n)
        return string.reverse(last .. first)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = {}
      for digit in tostring(x):gmatch('.') do
        table.insert(digits, digit)
      end
      local n = #digits
      if shift > n then
        return table.concat(digits, '')
      end
      local result = {}
      for i = 1, n do
        local j = (i + shift - 1) % n + 1
        result[i] = digits[j]
      end
      return table.concat(result, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfe_7gbl.lua:28:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpxfe_7gbl.lua:28:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift >= len then
            return string.reverse(digits)
        end
        local a = string.sub(digits, 1, shift)
        local b = string.sub(digits, shift + 1, len)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68p7m53b.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp68p7m53b.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = shift % n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfb_zz6_.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpcfb_zz6_.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return string.reverse(s)
        end
        local a = string.sub(s, 1, shift)
        local b = string.sub(s, shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1z9iw3nu.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp1z9iw3nu.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n-shift+1) .. s:sub(1, n-shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm6kqtzr.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpvm6kqtzr.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        if shift > #digits then
            return digits:reverse()
        end
        local left = digits:sub(1, shift)
        local right = digits:sub(shift + 1)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4yn9326.lua:21:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpg4yn9326.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        while x > 0 do
            table.insert(digits, x % 10)
            x = math.floor(x / 10)
        end
        local n = #digits
        if shift > n then
            shift = shift % n
        end
        for i = 1, shift do
            table.insert(digits, 1, table.remove(digits))
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpne3m3oo7.lua:31:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpne3m3oo7.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = {}
      local n = 0
      while x > 0 do
        n = n + 1
        digits[n] = x % 10
        x = math.floor(x / 10)
      end
      shift = shift % n
      for i = 1, shift do
        local d = digits[n]
        for j = n, 2, -1 do
          digits[j] = digits[j - 1]
        end
        digits[1] = d
      end
      local s = ''
      for i = 1, n do
        s = s .. tostring(digits[i])
      end
      return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w7q2fgy.lua:34:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp_w7q2fgy.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4df5eisd.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp4df5eisd.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ci_zrri.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp1ci_zrri.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        local s = tostring(x)
        for i = 1, #s do
            n = n + 1
            digits[n] = s:sub(i, i)
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        return table.concat(digits)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdm6wbbw.lua:31:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmpbdm6wbbw.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            return table.concat(digits, '')
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplra55x9z.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmplra55x9z.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            digits[n + 1] = x % 10
            x = math.floor(x / 10)
            n = n + 1
        end
        shift = shift % n
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3qlfxrl.lua:27:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpv3qlfxrl.lua:27:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        local r = s:sub(n - shift + 1, n) .. s:sub(1, n - shift)
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfti15e_.lua:20:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmpqfti15e_.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, n - shift + 1) .. string.sub(digits, 1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local x_str = tostring(x)
        local x_len = #x_str
        local x_shift = shift % x_len
        return x_str:sub(x_shift + 1) .. x_str:sub(1, x_shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxsslwwr.lua:18:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpkxsslwwr.lua:18:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        local shifted = string.sub(digits, n - shift + 1) .. string.sub(digits, 1, n - shift)
        return shifted
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        local a = string.sub(digits, 1, shift)
        local b = string.sub(digits, shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9emyxl5e.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp9emyxl5e.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        local s = tostring(x)
        for i = 1, #s do
            digits[i] = s:sub(i, i)
            n = n + 1
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        return table.concat(digits)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4sap9bg.lua:31:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmph4sap9bg.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfor_7yl.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpsfor_7yl.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkwbbzlv.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpmkwbbzlv.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            digits[n] = x % 10
            x = math.floor(x / 10)
            n = n + 1
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[n - 1]
            for j = n - 1, 1, -1 do
                digits[j] = digits[j - 1]
            end
            digits[0] = d
        end
        local s = ""
        for i = 0, n - 1 do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16utj1_b.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp16utj1_b.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp745bb_5s.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp745bb_5s.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift > len then
            return digits:reverse()
        end
        return digits:sub(len - shift + 1) .. digits:sub(1, len - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphysb3mgf.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmphysb3mgf.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return s:reverse()
        end
        local a = s:sub(1, shift)
        local b = s:sub(shift + 1)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rpip5r3.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp2rpip5r3.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzbq_tjo.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpfzbq_tjo.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        local s = shift % n
        return digits:sub(n - s + 1) .. digits:sub(1, n - s)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxbicmbt.lua:20:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmpbxbicmbt.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift >= len then
            return string.reverse(digits)
        end
        local left = string.sub(digits, 1, shift)
        local right = string.sub(digits, shift + 1, len)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4jggspk.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpi4jggspk.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = tostring(x)
      local n = #digits
      if shift > n then
        return string.reverse(digits)
      end
      local a = string.sub(digits, 1, shift)
      local b = string.sub(digits, shift + 1, n)
      return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwd_32sd.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpgwd_32sd.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = {}
      local n = 0
      while x > 0 do
        n = n + 1
        digits[n] = x % 10
        x = math.floor(x / 10)
      end
      if shift > n then
        return table.concat(digits, '')
      end
      local result = {}
      for i = 1, n do
        result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wi7z0h8.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmp5wi7z0h8.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[1]
            for j = 1, n - 1 do
                digits[j] = digits[j + 1]
            end
            digits[n] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. digits[i]
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0lfyjsg.lua:36:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpo0lfyjsg.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift > len then
            return string.reverse(digits)
        end
        local left = string.sub(digits, 1, shift)
        local right = string.sub(digits, shift + 1, len)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3q74xtx.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpc3q74xtx.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, n - shift + 1) .. string.sub(digits, 1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq05izbik.lua:21:
    expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpq05izbik.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6gp9biq.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpo6gp9biq.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        if shift > #digits then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ni1mon4.lua:19:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp1ni1mon4.lua:19:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            return table.concat(digits, '')
        end
        local i = 1
        while i <= shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
            i = i + 1
        end
        return table.concat(digits, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y5s_7sv.lua:34:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp3y5s_7sv.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            digits[n] = x % 10
            x = math.floor(x / 10)
            n = n + 1
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local last = digits[n - 1]
            for j = n - 1, 1, -1 do
                digits[j] = digits[j - 1]
            end
            digits[0] = last
        end
        local s = ''
        for i = 0, n - 1 do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjz8h2f25.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpjz8h2f25.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local len = #s
        if shift > len then
            return string.reverse(s)
        end
        local a = string.sub(s, 1, shift)
        local b = string.sub(s, shift + 1, len)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezb6s8gf.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpezb6s8gf.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift >= n then
            for i = 1, n do
                x = x * 10 + digits[i]
            end
            return tostring(x)
        end
        for i = 1, shift do
            x = x * 10 + digits[i]
        end
        for i = shift + 1, n do
            x = x * 10 + digits[i]
        end
        return tostring(x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrlorptp.lua:34:
    expected: \"001\"\nactual: \"1\"\nstack traceback:\n\t/tmp/tmpkrlorptp.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local n = #tostring(x)
        if shift > n then
            return string.reverse(tostring(x))
        end
        local s = tostring(x)
        local a = string.sub(s, 1, shift)
        local b = string.sub(s, shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wc4ov4a.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp9wc4ov4a.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcr0zye32.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpcr0zye32.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5ge0nup.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpp5ge0nup.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift >= len then
            return string.reverse(digits)
        end
        local left = string.sub(digits, 1, shift)
        local right = string.sub(digits, shift + 1, len)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejrnro5v.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpejrnro5v.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return digits:reverse()
        end
        return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdgp22r8.lua:21:
    expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpsdgp22r8.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        local shift = shift % n
        return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_myurhl1.lua:20:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmp_myurhl1.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ""
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rrpozth.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp5rrpozth.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            return table.concat(digits, '')
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        return table.concat(digits, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka8tcoym.lua:32:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpka8tcoym.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        local a = string.sub(s, 1, shift)
        local b = string.sub(s, shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponz4k7si.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmponz4k7si.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpck7_imbk.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpck7_imbk.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        local i = n - shift
        if i <= 0 then
            return string.reverse(s)
        end
        return string.sub(s, i + 1) .. string.sub(s, 1, i)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0bpn4qw.lua:22:
    expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpf0bpn4qw.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            table.insert(digits, 1, table.remove(digits))
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisafpgvt.lua:32:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpisafpgvt.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            return table.concat(digits, '')
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t8j6j4q.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmp2t8j6j4q.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxelr3z_.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpwxelr3z_.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        while x > 0 do
            table.insert(digits, x % 10)
            x = math.floor(x / 10)
        end
        local n = #digits
        shift = shift % n
        for i = 1, shift do
            table.insert(digits, 1, table.remove(digits))
        end
        local s = ''
        for i = 1, n do
            s = s .. digits[i]
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_ss19pj.lua:29:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmph_ss19pj.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local i = 0
        while x > 0 do
            i = i + 1
            digits[i] = x % 10
            x = math.floor(x / 10)
        end
        if shift > i then
            shift = i
        end
        local j = 1
        while shift > 0 do
            digits[i + j] = digits[j]
            j = j + 1
            shift = shift - 1
        end
        local result = ""
        for k = i + j - 1, j, -1 do
            result = result .. digits[k]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gujhitq.lua:37:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmp9gujhitq.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauc12zkn.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpauc12zkn.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        local shift = shift % n
        return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjfmfpoh.lua:20:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmpbjfmfpoh.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_15l9rr6.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp_15l9rr6.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2cazk2f.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmps2cazk2f.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps04voa18.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmps04voa18.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        local i = n - shift + 1
        if i <= 0 then
            return string.reverse(s)
        end
        return string.sub(s, i, n) .. string.sub(s, 1, i - 1)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63sx_fg0.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmp63sx_fg0.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rx5xtsk.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp5rx5xtsk.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74fk7od7.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp74fk7od7.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2qc6ma0.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpf2qc6ma0.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp878kru_6.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp878kru_6.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = shift % n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpama4609z.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpama4609z.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        local y = x
        while y > 0 do
            n = n + 1
            digits[n] = y % 10
            y = math.floor(y / 10)
        end
        if shift > n then
            shift = shift % n
        end
        local s = ''
        for i = 1, n do
            s = s .. digits[(i + shift - 1) % n + 1]
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y35tvjc.lua:30:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmp2y35tvjc.lua:30:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = shift % n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = {}
        for i = 1, n do
            s[i] = tostring(digits[i])
        end
        return table.concat(s)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1lduhoa.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpv1lduhoa.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        local a = string.sub(s, 1, shift)
        local b = string.sub(s, shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6boo08x.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpq6boo08x.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local len = #s
        if shift > len then
            return s:reverse()
        end
        local t = {}
        for i = 1, len do
            t[i] = s:sub(i, i)
        end
        for i = 1, shift do
            table.insert(t, 1, table.remove(t))
        end
        return table.concat(t)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        local i = shift % n
        return s:sub(i + 1) .. s:sub(1, i)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ca14_6g.lua:18:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp6ca14_6g.lua:18:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = tostring(x)
      local n = #digits
      if shift > n then
        return digits:reverse()
      end
      return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2fcuabx.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpl2fcuabx.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = shift % n
        end
        for i = 1, shift do
            local d = digits[1]
            for j = 1, n - 1 do
                digits[j] = digits[j + 1]
            end
            digits[n] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwydcxsi.lua:36:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpgwydcxsi.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return digits:reverse()
        end
        return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprarytdjr.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmprarytdjr.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = shift % n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1ixa900.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmph1ixa900.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            digits[n + 1] = x % 10
            x = math.floor(x / 10)
            n = n + 1
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            digits[n + i] = digits[i]
        end
        local s = ''
        for i = 1, n + shift do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s0jpl75.lua:32:
    expected: \"001\"\nactual: \"00100\"\nstack traceback:\n\t/tmp/tmp1s0jpl75.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        local a = s:sub(1, n - shift)
        local b = s:sub(n - shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        local shift = shift % n
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptx0g3yfh.lua:20:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmptx0g3yfh.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kpy2wrj.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp1kpy2wrj.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ""
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ko7g06p.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp9ko7g06p.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            digits[n + 1] = x % 10
            x = math.floor(x / 10)
            n = n + 1
        end
        shift = shift % n
        for i = 1, shift do
            local tmp = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = tmp
        end
        local result = ''
        for i = 1, n do
            result = result .. tostring(digits[i])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaksioyec.lua:34:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpaksioyec.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            digits[n] = x % 10
            x = math.floor(x / 10)
            n = n + 1
        end
        if shift > n then
            shift = n
        end
        local result = {}
        for i = 0, n - 1 do
            result[i] = digits[(i + shift) % n]
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl5ug42o.lua:29:
    expected: \"001\"\nactual: \"00\"\nstack traceback:\n\t/tmp/tmpsl5ug42o.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        local a = string.sub(digits, 1, shift)
        local b = string.sub(digits, shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lkjrs96.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp6lkjrs96.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            for i = 1, n do
                x = x * 10 + digits[i]
            end
            return tostring(x)
        end
        for i = 1, shift do
            table.insert(digits, 1, table.remove(digits))
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj09rm9u.lua:35:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpaj09rm9u.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = {}
      local n = 0
      while x > 0 do
        n = n + 1
        digits[n] = x % 10
        x = math.floor(x / 10)
      end
      if shift > n then
        return table.concat(digits, '')
      end
      local result = {}
      for i = 1, n do
        result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua4ohzs1.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpua4ohzs1.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n-shift+1) .. s:sub(1, n-shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe66x6vv.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpfe66x6vv.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local str = tostring(x)
        local len = #str
        if shift >= len then
            return string.reverse(str)
        end
        return string.sub(str, shift + 1) .. string.sub(str, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_9ewnrp.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpe_9ewnrp.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift > len then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sw2lk23.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp9sw2lk23.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjnd_taz.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpdjnd_taz.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n-shift+1) .. s:sub(1, n-shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return digits:reverse()
        end
        local a = digits:sub(1, n - shift)
        local b = digits:sub(n - shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            digits[n] = x % 10
            x = math.floor(x / 10)
            n = n + 1
        end
        if shift > n then
            return table.concat(digits, '')
        end
        for i = 1, shift do
            local d = digits[n - 1]
            for j = n - 1, 1, -1 do
                digits[j] = digits[j - 1]
            end
            digits[0] = d
        end
        return table.concat(digits, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe_hr_t3.lua:32:
    expected: \"001\"\nactual: \"10\"\nstack traceback:\n\t/tmp/tmpxe_hr_t3.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = shift % n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k9t4n3l.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp7k9t4n3l.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local x_str = tostring(x)
        local x_len = #x_str
        if shift > x_len then
            return string.reverse(x_str)
        end
        return string.sub(x_str, shift + 1) .. string.sub(x_str, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76tgxhbn.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp76tgxhbn.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift > len then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3u3a9f2r.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp3u3a9f2r.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local digits = {}
      local n = 0
      while x > 0 do
        n = n + 1
        digits[n] = x % 10
        x = math.floor(x / 10)
      end
      if shift > n then
        shift = shift % n
      end
      for i = 1, shift do
        local d = digits[n]
        for j = n, 2, -1 do
          digits[j] = digits[j - 1]
        end
        digits[1] = d
      end
      local s = ''
      for i = 1, n do
        s = s .. tostring(digits[i])
      end
      return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tdom5j2.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp3tdom5j2.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = shift % n
        end
        local result = {}
        for i = 1, n do
            result[i] = digits[(i + shift - 1) % n + 1]
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegy0k6q0.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpegy0k6q0.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local len = #s
        if shift > len then
            return s:reverse()
        end
        return s:sub(len - shift + 1) .. s:sub(1, len - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local i = 0
        while x > 0 do
            i = i + 1
            digits[i] = x % 10
            x = math.floor(x / 10)
        end
        if shift > i then
            return table.concat(digits, '')
        end
        local result = {}
        for j = 1, i do
            result[j] = digits[(j + shift - 1) % i + 1]
        end
        return table.concat(result, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0_4_6lx.lua:29:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpy0_4_6lx.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            table.insert(digits, 1, table.remove(digits))
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfs0zrzd.lua:32:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmppfs0zrzd.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[1]
            for j = 1, n - 1 do
                digits[j] = digits[j + 1]
            end
            digits[n] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0f4m4poo.lua:36:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmp0f4m4poo.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local d = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = d
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnleglhgj.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpnleglhgj.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return digits:reverse()
        end
        return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            digits[n] = x % 10
            x = math.floor(x / 10)
            n = n + 1
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local digit = digits[n - 1]
            table.remove(digits, n - 1)
            table.insert(digits, 1, digit)
        end
        local result = ""
        for i = 1, n do
            result = result .. tostring(digits[i])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaazfv_es.lua:34:
    expected: \"001\"\nactual: \"01nil\"\nstack traceback:\n\t/tmp/tmpaazfv_es.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb8kica6.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmphb8kica6.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return s:reverse()
        end
        local a = s:sub(1, shift)
        local b = s:sub(shift + 1)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf35vm27n.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpf35vm27n.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        local d = string.sub(digits, shift + 1, n)
        local e = string.sub(digits, 1, shift)
        return d .. e
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptipti9k3.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmptipti9k3.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local i = 0
        while x > 0 do
            i = i + 1
            digits[i] = x % 10
            x = math.floor(x / 10)
        end
        if shift > i then
            return table.concat(digits, "")
        end
        local j = 1
        while shift > 0 do
            local tmp = digits[i]
            for k = i, 2, -1 do
                digits[k] = digits[k - 1]
            end
            digits[1] = tmp
            shift = shift - 1
        end
        return table.concat(digits, "")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmh6gztc.lua:34:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpzmh6gztc.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n-shift+1) .. s:sub(1, n-shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0peuys0m.lua:21:
    expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmp0peuys0m.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = n
        end
        for i = 1, shift do
            local digit = digits[n]
            for j = n, 2, -1 do
                digits[j] = digits[j - 1]
            end
            digits[1] = digit
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6au94avo.lua:36:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp6au94avo.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift > len then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwf3yhn9l.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpwf3yhn9l.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift >= n then
            return string.reverse(digits)
        end
        local left = string.sub(digits, 1, shift)
        local right = string.sub(digits, shift + 1, n)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9hmvdxz.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpz9hmvdxz.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = string.reverse(tostring(x))
        local n = #digits
        if shift > n then
            return digits
        end
        return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulnx5t67.lua:20:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmpulnx5t67.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
      local s = tostring(x)
      local len = #s
      if shift > len then
        return string.reverse(s)
      end
      return string.sub(s, len - shift + 1) .. string.sub(s, 1, len - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        local n = 0
        while x > 0 do
            n = n + 1
            digits[n] = x % 10
            x = math.floor(x / 10)
        end
        if shift > n then
            shift = shift % n
        end
        if shift > 0 then
            local temp = {}
            for i = 1, n do
                temp[i] = digits[i]
            end
            for i = 1, n do
                digits[i] = temp[(i + shift - 1) % n + 1]
            end
        end
        local s = ''
        for i = 1, n do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6y_ayat9.lua:38:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmp6y_ayat9.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        local a = string.sub(digits, 1, shift)
        local b = string.sub(digits, shift + 1, n)
        return b .. a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1nwl7ht.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpc1nwl7ht.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift > len then
            return string.reverse(digits)
        end
        local left = string.sub(digits, 1, shift)
        local right = string.sub(digits, shift + 1, len)
        return right .. left
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h6eru43.lua:22:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp9h6eru43.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        if shift > #s then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgy5seto.lua:19:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpbgy5seto.lua:19:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        local result = digits:sub(n - shift + 1, n) .. digits:sub(1, n - shift)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilt80cej.lua:20:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmpilt80cej.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5jal7fq.lua:21:
    expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmps5jal7fq.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local n = #digits
        if shift > n then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7uyk1ogi.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp7uyk1ogi.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        while x > 0 do
            digits[#digits + 1] = x % 10
            x = math.floor(x / 10)
        end
        if shift > #digits then
            return table.concat(digits, '')
        end
        local result = {}
        for i = 1, #digits do
            result[i] = digits[(i + shift - 1) % #digits + 1]
        end
        return table.concat(result, '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09jy4b7r.lua:27:
    expected: \"001\"\nactual: \"100\"\nstack traceback:\n\t/tmp/tmp09jy4b7r.lua:27:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift >= len then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe252nko.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmppe252nko.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        local shift = shift % n
        if shift == 0 then
            return s
        elseif shift > n then
            return s:reverse()
        else
            return s:sub(n - shift + 1) .. s:sub(1, n - shift)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p845jid.lua:26:
    expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmp9p845jid.lua:26:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = {}
        while x > 0 do
            table.insert(digits, 1, x % 10)
            x = math.floor(x / 10)
        end
        if shift > #digits then
            return table.concat(digits)
        end
        local shifted = {}
        for i = 1, #digits do
            shifted[i] = digits[(i + shift - 1) % #digits + 1]
        end
        return table.concat(shifted)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe15rjgwd.lua:27:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpe15rjgwd.lua:27:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift > n then
            return string.reverse(s)
        end
        return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nmt5kdd.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp4nmt5kdd.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        local i = shift % n
        return s:sub(i + 1) .. s:sub(1, i)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8587d9n.lua:18:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpd8587d9n.lua:18:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift > len then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dbe_f9u.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp2dbe_f9u.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local digits = tostring(x)
        local len = #digits
        if shift >= len then
            return string.reverse(digits)
        end
        return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyw72iffb.lua:20:
    expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpyw72iffb.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local s = tostring(x)
        local n = #s
        if shift >= n then
            return s:reverse()
        end
        return s:sub(n - shift + 1) .. s:sub(1, n - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9sfl9s_.lua:21:
    expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpa9sfl9s_.lua:21:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Circular shift the digits of the integer x, shift the digits right by shift
    -- and return the result as a string.
    -- If shift > number of digits, return digits reversed.
    -- >>> circular_shift(12, 1)
    -- '21'
    -- >>> circular_shift(12, 2)
    -- '12'
    local function circular_shift(x, shift)
        local str = tostring(x)
        local len = #str
        if shift > len then
            return str:reverse()
        end
        return str:sub(len - shift + 1) .. str:sub(1, len - shift)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = circular_shift
        lu.assertEquals(candidate(100, 2), '001')
        lu.assertEquals(candidate(12, 2), '12')
        lu.assertEquals(candidate(97, 8), '79')
        lu.assertEquals(candidate(12, 1), '21')
        lu.assertEquals(candidate(11, 101), '11')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
