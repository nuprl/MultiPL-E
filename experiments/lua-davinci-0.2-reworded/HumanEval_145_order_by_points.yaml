---
name: HumanEval_145_order_by_points
language: lua
prompt: |
  -- Write a function which sorts the given table of integers
  -- in ascending order according to the sum of their digits.
  -- Note: if there are several items with similar sum of their digits,
  -- order them based on their index in original table.
  -- For example:
  -- >>> order_by_points({1, 11, -1, -11, -12})
  -- {-1, -11, 1, -12, 11}
  -- >>> order_by_points({})
  -- {}
  local function order_by_points(nums)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = order_by_points
      lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
      lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
      lu.assertEquals(candidate({}), {})
      lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
      lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
      lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      -- your code here
      local sum = {}
      for i, v in ipairs(nums) do
          local s = 0
          for j = 1, #tostring(v) do
              s = s + tonumber(tostring(v):sub(j, j))
          end
          sum[i] = s
      end
      local t = {}
      for i, v in ipairs(sum) do
          t[i] = {v, i}
      end
      table.sort(t, function(a, b)
          if a[1] == b[1] then
              return a[2] < b[2]
          else
              return a[1] < b[1]
          end
      end)
      local res = {}
      for i, v in ipairs(t) do
          res[i] = nums[v[2]]
      end
      return res
  end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
    local sum_of_digits = {}
    for i, v in ipairs(nums) do
      local sum = 0
      for j = 1, #tostring(v) do
        sum = sum + tonumber(tostring(v):sub(j, j))
      end
      sum_of_digits[i] = sum
    end
    local sorted = {}
    for i = 1, #nums do
      local min = math.min(unpack(sum_of_digits))
      local index = table.index_of(sum_of_digits, min)
      table.insert(sorted, nums[index])
      table.remove(sum_of_digits, index)
      table.remove(nums, index)
    end
    return sorted
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + (n % 10)
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
    local points = {}
    for i, num in ipairs(nums) do
      local sum = 0
      for digit in tostring(num):gmatch("%d") do
        sum = sum + tonumber(digit)
      end
      points[i] = sum
    end
    local sorted = {}
    for i, num in ipairs(nums) do
      local min = math.min(unpack(points))
      local min_index = table.indexof(points, min)
      table.insert(sorted, nums[min_index])
      table.remove(points, min_index)
      table.remove(nums, min_index)
    end
    return sorted
  end
- |2-
      local sum_of_digits = {}
      for i, v in ipairs(nums) do
          local sum = 0
          for digit in tostring(v):gmatch("%d") do
              sum = sum + tonumber(digit)
          end
          sum_of_digits[i] = sum
      end
      table.sort(nums, function(a, b)
          if sum_of_digits[a] == sum_of_digits[b] then
              return a < b
          else
              return sum_of_digits[a] < sum_of_digits[b]
          end
      end)
      return nums
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      -- your code here
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      -- TODO: implement the function here
  end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + (n % 10)
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function get_sum(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      local sum_table = {}
      local result = {}
      for i, v in ipairs(nums) do
          local sum = 0
          while v ~= 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          sum_table[i] = sum
      end
      local index = 1
      while #nums > 0 do
          local min_sum = math.huge
          local min_index = 0
          for i, v in ipairs(sum_table) do
              if v < min_sum then
                  min_sum = v
                  min_index = i
              end
          end
          result[index] = nums[min_index]
          table.remove(nums, min_index)
          table.remove(sum_table, min_index)
          index = index + 1
      end
      return result
  end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local s = 0
          while n > 0 do
              s = s + n % 10
              n = math.floor(n / 10)
          end
          return s
      end
- |2-
    local sums = {}
    for i, n in ipairs(nums) do
      sums[i] = sum_of_digits(n)
    end
    table.sort(sums)
    local result = {}
    for _, s in ipairs(sums) do
      for i, n in ipairs(nums) do
        if sum_of_digits(n) == s then
          table.insert(result, n)
          table.remove(nums, i)
          break
        end
      end
    end
    return result
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local sum_of_digits = {}
      for i, v in ipairs(nums) do
          local sum = 0
          for j = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(j, j))
          end
          sum_of_digits[i] = sum
      end
      local sorted_nums = {}
      for i, v in ipairs(sum_of_digits) do
          local min = math.min(unpack(sum_of_digits))
          local index = table.index_of(sum_of_digits, min)
          table.insert(sorted_nums, nums[index])
          sum_of_digits[index] = math.max(unpack(sum_of_digits))
      end
      return sorted_nums
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + (n % 10)
        n = math.floor(n / 10)
      end
      return sum
    end
- |2-
      local function get_sum(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
    local result = {}
    local sum_of_digits = {}
    for i, v in ipairs(nums) do
      local sum = 0
      for d in tostring(v):gmatch("%d") do
        sum = sum + tonumber(d)
      end
      sum_of_digits[i] = sum
    end
    table.sort(sum_of_digits)
    for i, v in ipairs(sum_of_digits) do
      for j, w in ipairs(nums) do
        local sum = 0
        for d in tostring(w):gmatch("%d") do
          sum = sum + tonumber(d)
        end
        if sum == v then
          result[i] = w
          nums[j] = nil
          break
        end
      end
    end
    return result
  end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function get_sum(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local sum_of_digits = {}
      for i, v in ipairs(nums) do
          sum_of_digits[i] = {v, sum_digits(v)}
      end
      table.sort(sum_of_digits, function(a, b)
          if a[2] == b[2] then
              return a[1] < b[1]
          else
              return a[2] < b[2]
          end
      end)
      local result = {}
      for i, v in ipairs(sum_of_digits) do
          result[i] = v[1]
      end
      return result
  end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + (n % 10)
        n = math.floor(n / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local s = 0
          while n > 0 do
              s = s + n % 10
              n = math.floor(n / 10)
          end
          return s
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local t = {}
      for i, v in ipairs(nums) do
          t[i] = {v, v % 10 + math.floor(v / 10)}
      end
      table.sort(t, function(a, b)
          if a[2] == b[2] then
              return a[1] < b[1]
          else
              return a[2] < b[2]
          end
      end)
      for i, v in ipairs(t) do
          t[i] = v[1]
      end
      return t
  end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(num)
      local sum = 0
      for digit in tostring(num):gmatch('%d') do
        sum = sum + tonumber(digit)
      end
      return sum
    end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local sum_of_digits = {}
      for i, v in ipairs(nums) do
          local sum = 0
          for j = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(j, j))
          end
          sum_of_digits[i] = sum
      end
      local function compare(a, b)
          if sum_of_digits[a] == sum_of_digits[b] then
              return a < b
          else
              return sum_of_digits[a] < sum_of_digits[b]
          end
      end
      local sorted_index = {}
      for i, v in ipairs(nums) do
          sorted_index[i] = i
      end
      table.sort(sorted_index, compare)
      local sorted_nums = {}
      for i, v in ipairs(sorted_index) do
          sorted_nums[i] = nums[v]
      end
      return sorted_nums
  end
- |2-
      local sum = {}
      for i, v in ipairs(nums) do
          local s = 0
          for c in tostring(v):gmatch(".") do
              s = s + tonumber(c)
          end
          sum[i] = s
      end
      table.sort(nums, function(a, b)
          return sum[a] < sum[b]
      end)
      return nums
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local sum_of_digits = {}
      for i, v in ipairs(nums) do
          local sum = 0
          for j = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(j, j))
          end
          sum_of_digits[i] = sum
      end
      local sorted_nums = {}
      for i, v in ipairs(sum_of_digits) do
          local min_index = i
          for j = i + 1, #sum_of_digits do
              if sum_of_digits[j] < sum_of_digits[min_index] then
                  min_index = j
              end
          end
          sum_of_digits[i], sum_of_digits[min_index] = sum_of_digits[min_index], sum_of_digits[i]
          sorted_nums[i] = nums[min_index]
      end
      return sorted_nums
  end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local sum_of_digits = {}
      for i, v in ipairs(nums) do
          local sum = 0
          for j = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(j, j))
          end
          sum_of_digits[i] = sum
      end
      local sorted_nums = {}
      for i, v in ipairs(sum_of_digits) do
          local min = math.min(unpack(sum_of_digits))
          local min_index = 0
          for j, v2 in ipairs(sum_of_digits) do
              if v2 == min then
                  min_index = j
                  break
              end
          end
          table.insert(sorted_nums, nums[min_index])
          table.remove(sum_of_digits, min_index)
          table.remove(nums, min_index)
      end
      return sorted_nums
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local sum_table = {}
      local sum_table_index = {}
      local sum_table_index_index = 1
      for i, v in ipairs(nums) do
          local sum = 0
          for j = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(j, j))
          end
          if sum_table[sum] == nil then
              sum_table[sum] = {}
              sum_table_index[sum_table_index_index] = sum
              sum_table_index_index = sum_table_index_index + 1
          end
          table.insert(sum_table[sum], v)
      end
      table.sort(sum_table_index)
      local result = {}
      for i, v in ipairs(sum_table_index) do
          for j, k in ipairs(sum_table[v]) do
              table.insert(result, k)
          end
      end
      return result
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function compare(a, b)
          local sum_a = 0
          local sum_b = 0
          for i = 1, #tostring(a) do
              sum_a = sum_a + tonumber(tostring(a):sub(i, i))
          end
          for i = 1, #tostring(b) do
              sum_b = sum_b + tonumber(tostring(b):sub(i, i))
          end
          if sum_a == sum_b then
              return a < b
          else
              return sum_a < sum_b
          end
      end
      table.sort(nums, compare)
      return nums
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local sum = {}
      for i, v in ipairs(nums) do
          local s = 0
          while v > 0 do
              s = s + v % 10
              v = math.floor(v / 10)
          end
          sum[i] = s
      end
      local function cmp(i, j)
          return sum[i] < sum[j] or (sum[i] == sum[j] and i < j)
      end
      local t = {}
      for i, v in ipairs(nums) do
          t[i] = i
      end
      table.sort(t, cmp)
      local ret = {}
      for i, v in ipairs(t) do
          ret[i] = nums[v]
      end
      return ret
  end
- |2-
      local sum = {}
      for i, v in ipairs(nums) do
          local s = 0
          for d in tostring(v):gmatch("%d") do
              s = s + tonumber(d)
          end
          sum[i] = s
      end
      table.sort(nums, function(a, b)
          return sum[a] < sum[b]
      end)
      return nums
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local nums_with_points = {}
      for i, num in ipairs(nums) do
          local points = 0
          for digit in tostring(num):gmatch("%d") do
              points = points + tonumber(digit)
          end
          nums_with_points[i] = {num, points}
      end
      table.sort(nums_with_points, function(a, b)
          if a[2] == b[2] then
              return a[1] < b[1]
          else
              return a[2] < b[2]
          end
      end)
      local result = {}
      for i, num_with_points in ipairs(nums_with_points) do
          result[i] = num_with_points[1]
      end
      return result
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local sum_of_digits = {}
      for i, num in ipairs(nums) do
          local sum = 0
          for digit in tostring(num):gmatch("%d") do
              sum = sum + tonumber(digit)
          end
          sum_of_digits[i] = sum
      end
      table.sort(nums, function(a, b)
          if sum_of_digits[a] == sum_of_digits[b] then
              return a < b
          else
              return sum_of_digits[a] < sum_of_digits[b]
          end
      end)
      return nums
  end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + (n % 10)
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local sums = {}
      for i, num in ipairs(nums) do
          sums[i] = num
      end
      table.sort(sums, function(a, b)
          local sum_a = 0
          local sum_b = 0
          for i = 1, #tostring(a) do
              sum_a = sum_a + tonumber(tostring(a):sub(i, i))
          end
          for i = 1, #tostring(b) do
              sum_b = sum_b + tonumber(tostring(b):sub(i, i))
          end
          if sum_a == sum_b then
              return a < b
          end
          return sum_a < sum_b
      end)
      return sums
  end
- |2-
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local sum_of_digits = {}
    for i, v in ipairs(nums) do
      local sum = 0
      for digit in tostring(v):gmatch("%d") do
        sum = sum + tonumber(digit)
      end
      sum_of_digits[i] = sum
    end
    table.sort(sum_of_digits)
    local result = {}
    for i, v in ipairs(sum_of_digits) do
      for j, k in ipairs(nums) do
        local sum = 0
        for digit in tostring(k):gmatch("%d") do
          sum = sum + tonumber(digit)
        end
        if sum == v then
          result[i] = k
          table.remove(nums, j)
          break
        end
      end
    end
    return result
  end
- |2-
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
- |2-
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
- |2-
    local function sum_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      local sums = {}
      for i, num in ipairs(nums) do
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          sums[i] = sum
      end
      table.sort(sums)
      local result = {}
      for i, sum in ipairs(sums) do
          for j, num in ipairs(nums) do
              local sum2 = 0
              while num > 0 do
                  sum2 = sum2 + num % 10
                  num = math.floor(num / 10)
              end
              if sum2 == sum then
                  result[i] = nums[j]
                  table.remove(nums, j)
                  break
              end
          end
      end
      return result
  end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_of_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
- |2-
      local function sum_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
      local function sum_of_digits(num)
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          return sum
      end
- |2-
    local function sum_of_digits(num)
      local sum = 0
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      return sum
    end
- |2-
      -- your code here
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
