name: HumanEval_151_double_the_difference
language: lua
results:
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmqj7d9d.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpdmqj7d9d.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxa1rqtxq.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpxa1rqtxq.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- YOUR CODE HERE\n    local sum = 0\n    for i, v in ipairs(lst) do\n  \
    \      if v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6ze_837.lua:27:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpx6ze_837.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq0dtmt7.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmprq0dtmt7.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf73rdv0.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpaf73rdv0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05p5wyvu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp05p5wyvu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevzujlaz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpevzujlaz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_03u2ip.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpz_03u2ip.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk7bu0dg.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpxk7bu0dg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ >= 0 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n \
    \   return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrj7usjg.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpjrj7usjg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb42vdttu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpb42vdttu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunym1zqz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpunym1zqz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgoh9mp2s.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpgoh9mp2s.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jm6yja8.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp7jm6yja8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
