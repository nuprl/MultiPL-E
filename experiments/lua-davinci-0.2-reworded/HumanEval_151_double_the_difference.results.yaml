---
language: lua
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmqj7d9d.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpdmqj7d9d.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxa1rqtxq.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpxa1rqtxq.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        -- YOUR CODE HERE
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6ze_837.lua:27:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpx6ze_837.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq0dtmt7.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmprq0dtmt7.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf73rdv0.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpaf73rdv0.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05p5wyvu.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp05p5wyvu.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevzujlaz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpevzujlaz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_03u2ip.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpz_03u2ip.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk7bu0dg.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpxk7bu0dg.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i = 1, #lst do
            if lst[i] % 2 == 1 and lst[i] >= 0 then
                sum = sum + lst[i] * lst[i]
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrj7usjg.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpjrj7usjg.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb42vdttu.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpb42vdttu.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _,v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunym1zqz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpunym1zqz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgoh9mp2s.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpgoh9mp2s.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jm6yja8.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp7jm6yja8.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if type(v) == "number" and v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        -- YOUR CODE HERE
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6ze_837.lua:27:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpx6ze_837.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v >= 0 and v % 1 == 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0li2ahhz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp0li2ahhz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        -- YOUR CODE HERE
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x9kjtp4.lua:27:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp7x9kjtp4.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7yew8go.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpk7yew8go.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9kdp9tqz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9kdp9tqz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevzujlaz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpevzujlaz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and math.floor(v) == v then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijbzbji6.lua:26:
    expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpijbzbji6.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i = 1, #lst do
            if lst[i] % 2 == 1 and lst[i] > 0 then
                sum = sum + lst[i] * lst[i]
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6irk7u4.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpj6irk7u4.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and math.floor(v) == v then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexgp4ph0.lua:26:
    expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpexgp4ph0.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, n in ipairs(lst) do
            if n % 2 == 1 and n >= 0 and n % 1 == 0 then
                sum = sum + n * n
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwgknzow.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpvwgknzow.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v >= 0 and v % 1 == 0 then
                if v % 2 == 1 then
                    sum = sum + v * v
                end
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmedpo7r1.lua:28:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpmedpo7r1.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v % 2 == 1 and v >= 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktaqo5vf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpktaqo5vf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum_of_squares = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum_of_squares = sum_of_squares + v * v
        end
      end
      return sum_of_squares * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtbyznvh.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmprtbyznvh.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i = 1, #lst do
        local x = lst[i]
        if type(x) == "number" and x > 0 and x % 1 == 0 then
          sum = sum + x * x
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwztg3mzo.lua:27:
    expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpwztg3mzo.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevzujlaz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpevzujlaz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and math.floor(v) == v then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexgp4ph0.lua:26:
    expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpexgp4ph0.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum_of_squares = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum_of_squares = sum_of_squares + v * v
            end
        end
        return sum_of_squares * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2_ogrg.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpsw2_ogrg.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      -- YOUR CODE HERE
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v >= 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom_2xl_c.lua:27:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpom_2xl_c.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v >= 0 and v % 1 == 0 then
                if v % 2 == 1 then
                    sum = sum + v * v
                end
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmedpo7r1.lua:28:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpmedpo7r1.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if type(v) == "number" and v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      -- YOUR CODE HERE
      local sum = 0
      for i,v in ipairs(lst) do
        if v%2 == 1 and v > 0 then
          sum = sum + v*v
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if type(v) == "number" and v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v % 2 == 1 and v >= 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktaqo5vf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpktaqo5vf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevzujlaz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpevzujlaz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v % 2 == 1 and v >= 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktaqo5vf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpktaqo5vf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v >= 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wpsnzdb.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5wpsnzdb.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and math.floor(v) == v then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijbzbji6.lua:26:
    expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpijbzbji6.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if type(v) == "number" and v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9to4yc4.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpt9to4yc4.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if type(v) == "number" and v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9kdp9tqz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9kdp9tqz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i = 1, #lst do
        local num = lst[i]
        if num > 0 and num % 1 == 0 then
          if num % 2 == 1 then
            sum = sum + num * num
          end
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4u2c5x2.lua:29:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpn4u2c5x2.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i = 1, #lst do
        if lst[i] % 2 == 1 and lst[i] >= 0 then
          sum = sum + lst[i] * lst[i]
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18aaa7pc.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp18aaa7pc.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v >= 0 and v == math.floor(v) then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso0_hnpo.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpso0_hnpo.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if type(v) == "number" and v % 2 == 1 and v >= 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdu7_ldz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpvdu7_ldz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if type(v) == "number" and v % 2 == 1 and v >= 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdu7_ldz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpvdu7_ldz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if (v % 2 == 1) and (v > 0) then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa999gf2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpaa999gf2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if type(v) == "number" and v % 2 == 1 and v >= 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdu7_ldz.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpvdu7_ldz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v % 2 == 1 and v >= 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2107cl3o.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2107cl3o.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if type(v) == "number" and v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if type(v) == "number" and v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i = 1, #lst do
            if lst[i] % 2 == 1 and lst[i] >= 0 then
                sum = sum + lst[i] ^ 2
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s6l6ifi.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5s6l6ifi.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v % 2 == 1 and v > 0 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i = 1, #lst do
            local num = lst[i]
            if num > 0 and num % 1 == 0 then
                if num % 2 == 1 then
                    sum = sum + num * num
                end
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwl0rleh.lua:29:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmptwl0rleh.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for _, v in ipairs(lst) do
        if v > 0 and v % 2 == 1 then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for i, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v > 0 and v % 2 == 1 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
      local sum = 0
      for i, v in ipairs(lst) do
        if v % 2 == 1 and v >= 0 and v == math.floor(v) then
          sum = sum + v * v
        end
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso0_hnpo.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpso0_hnpo.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Given a table of numbers, return the sum of squares of the numbers
    -- in the table that are odd. Ignore numbers that are negative or not integers.
    -- >>> double_the_difference({1, 3, 2, 0})
    -- 10
    -- >>> double_the_difference({-1, -2, 0})
    -- 0
    -- >>> double_the_difference({9, -2})
    -- 81
    -- >>> double_the_difference({0})
    -- 0
    -- If the input table is empty, return 0.
    local function double_the_difference(lst)
        local sum = 0
        for _, v in ipairs(lst) do
            if v % 2 == 1 and v > 0 then
                sum = sum + v * v
            end
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = double_the_difference
        lu.assertEquals(candidate({}), 0)
        lu.assertEquals(candidate({5.0, 4.0}), 25)
        lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
        lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
        lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
        lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
        lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:
    expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
