language: lua
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmqj7d9d.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpdmqj7d9d.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxa1rqtxq.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpxa1rqtxq.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- YOUR CODE HERE\n    local sum = 0\n    for i, v in ipairs(lst) do\n  \
    \      if v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6ze_837.lua:27:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpx6ze_837.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq0dtmt7.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmprq0dtmt7.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf73rdv0.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpaf73rdv0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05p5wyvu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp05p5wyvu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevzujlaz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpevzujlaz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_03u2ip.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpz_03u2ip.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk7bu0dg.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpxk7bu0dg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ >= 0 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n \
    \   return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrj7usjg.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpjrj7usjg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb42vdttu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpb42vdttu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunym1zqz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpunym1zqz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgoh9mp2s.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpgoh9mp2s.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jm6yja8.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp7jm6yja8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- YOUR CODE HERE\n    local sum = 0\n    for i, v in ipairs(lst) do\n  \
    \      if v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6ze_837.lua:27:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpx6ze_837.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 and\
    \ v % 1 == 0 then\n      sum = sum + v * v\n    end\n  end\n  return sum * 2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0li2ahhz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp0li2ahhz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- YOUR CODE HERE\n    local sum = 0\n    for i, v in ipairs(lst) do\n  \
    \      if v % 2 == 1 and v > 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x9kjtp4.lua:27:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp7x9kjtp4.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7yew8go.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpk7yew8go.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9kdp9tqz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9kdp9tqz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevzujlaz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpevzujlaz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and math.floor(v)\
    \ == v then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijbzbji6.lua:26:\
    \ expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpijbzbji6.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ > 0 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n  \
    \  return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6irk7u4.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpj6irk7u4.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and math.floor(v)\
    \ == v then\n      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexgp4ph0.lua:26:\
    \ expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpexgp4ph0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, n in ipairs(lst) do\n        if n % 2 == 1 and\
    \ n >= 0 and n % 1 == 0 then\n            sum = sum + n * n\n        end\n   \
    \ end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwgknzow.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpvwgknzow.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 1 == 0 then\n            if v % 2 == 1 then\n           \
    \     sum = sum + v * v\n            end\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmedpo7r1.lua:28:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpmedpo7r1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktaqo5vf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpktaqo5vf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum_of_squares = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v\
    \ % 2 == 1 then\n      sum_of_squares = sum_of_squares + v * v\n    end\n  end\n\
    \  return sum_of_squares * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtbyznvh.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmprtbyznvh.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local x = lst[i]\n    if type(x) ==\
    \ \"number\" and x > 0 and x % 1 == 0 then\n      sum = sum + x * x\n    end\n\
    \  end\n  return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwztg3mzo.lua:27:\
    \ expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpwztg3mzo.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevzujlaz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpevzujlaz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and math.floor(v)\
    \ == v then\n      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexgp4ph0.lua:26:\
    \ expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpexgp4ph0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum_of_squares = 0\n    for _, v in ipairs(lst) do\n        if v >\
    \ 0 and v % 2 == 1 then\n            sum_of_squares = sum_of_squares + v * v\n\
    \        end\n    end\n    return sum_of_squares * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2_ogrg.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpsw2_ogrg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- YOUR CODE HERE\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if v\
    \ % 2 == 1 and v >= 0 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom_2xl_c.lua:27:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpom_2xl_c.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 1 == 0 then\n            if v % 2 == 1 then\n           \
    \     sum = sum + v * v\n            end\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmedpo7r1.lua:28:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpmedpo7r1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- YOUR CODE HERE\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if v%2\
    \ == 1 and v > 0 then\n      sum = sum + v*v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktaqo5vf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpktaqo5vf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevzujlaz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpevzujlaz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktaqo5vf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpktaqo5vf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wpsnzdb.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5wpsnzdb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and math.floor(v)\
    \ == v then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijbzbji6.lua:26:\
    \ expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpijbzbji6.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9to4yc4.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpt9to4yc4.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9kdp9tqz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9kdp9tqz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if num > 0\
    \ and num % 1 == 0 then\n      if num % 2 == 1 then\n        sum = sum + num *\
    \ num\n      end\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4u2c5x2.lua:29:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpn4u2c5x2.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and lst[i] >= 0\
    \ then\n      sum = sum + lst[i] * lst[i]\n    end\n  end\n  return sum * 2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18aaa7pc.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp18aaa7pc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 and\
    \ v == math.floor(v) then\n      sum = sum + v * v\n    end\n  end\n  return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso0_hnpo.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpso0_hnpo.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuojxn68.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpzuojxn68.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v % 2 == 1 and v >= 0 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdu7_ldz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpvdu7_ldz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkxcqahf.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmplkxcqahf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v % 2 == 1 and v >= 0 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdu7_ldz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpvdu7_ldz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if (v % 2 == 1) and\
    \ (v > 0) then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa999gf2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpaa999gf2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v % 2 == 1 and v >= 0 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdu7_ldz.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpvdu7_ldz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y8xi9nn.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2y8xi9nn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2107cl3o.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2107cl3o.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imrvc2c.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp9imrvc2c.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gx4jpn3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp1gx4jpn3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ >= 0 then\n            sum = sum + lst[i] ^ 2\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s6l6ifi.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5s6l6ifi.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i6d_rez.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp5i6d_rez.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        local num = lst[i]\n     \
    \   if num > 0 and num % 1 == 0 then\n            if num % 2 == 1 then\n     \
    \           sum = sum + num * num\n            end\n        end\n    end\n   \
    \ return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwl0rleh.lua:29:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmptwl0rleh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnwbv16i.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphnwbv16i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5t07u0e.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpl5t07u0e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ey7jlv2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp6ey7jlv2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 and\
    \ v == math.floor(v) then\n      sum = sum + v * v\n    end\n  end\n  return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso0_hnpo.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpso0_hnpo.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36sal999.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp36sal999.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
