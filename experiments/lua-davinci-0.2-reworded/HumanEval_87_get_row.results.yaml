language: lua
name: HumanEval_87_get_row
results:
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] < b[1] then\n            return true\n        elseif a[1] > b[1] then\n\
    \            return false\n        else\n            return a[2] > b[2]\n    \
    \    end\n    end)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, item in ipairs(row) do\n      \
    \      if item == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] < b[1] then\n            return true\n        elseif a[1] > b[1]\
    \ then\n            return false\n        else\n            return a[2] > b[2]\n\
    \        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, value in ipairs(row) do\n      if value\
    \ == x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n\
    \  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, v in ipairs(row) do\n      if v == x then\n\
    \        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val ==\
    \ x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n \
    \ end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n            if\
    \ v == x then\n                table.insert(res, {i - 1, j - 1})\n           \
    \ end\n        end\n    end\n    table.sort(res, function(a, b)\n        if a[1]\
    \ == b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n      \
    \      if elem == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] < b[1] then\n            return true\n        elseif a[1] > b[1]\
    \ then\n            return false\n        else\n            return a[2] > b[2]\n\
    \        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val ==\
    \ x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n \
    \ end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, item in ipairs(row) do\n      \
    \      if item == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n            if\
    \ v == x then\n                table.insert(res, {i - 1, j - 1})\n           \
    \ end\n        end\n    end\n    table.sort(res, function(a, b)\n        if a[1]\
    \ == b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, column in ipairs(row) do\n    \
    \        if column == x then\n                table.insert(result, {i - 1, j -\
    \ 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tfor i,\
    \ row in ipairs(lst) do\n\t\tfor j, col in ipairs(row) do\n\t\t\tif col == x then\n\
    \t\t\t\ttable.insert(res, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, el in ipairs(row) do\n      if el == x then\n\
    \        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ local row = 0\n    for _, v in ipairs(lst) do\n        local col = 0\n     \
    \   for _, v2 in ipairs(v) do\n            if v2 == x then\n                table.insert(result,\
    \ {row, col})\n            end\n            col = col + 1\n        end\n     \
    \   row = row + 1\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ i, row in ipairs(lst) do\n\t\tfor j, value in ipairs(row) do\n\t\t\tif value\
    \ == x then\n\t\t\t\ttable.insert(result, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\
    \tend\n\ttable.sort(result, function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn\
    \ a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, item in ipairs(row) do\n      \
    \      if item == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n          \
    \  if elem == x then\n                table.insert(res, {i - 1, j - 1})\n    \
    \        end\n        end\n    end\n    table.sort(res, function(a, b)\n     \
    \   if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n     \
    \       return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val == x then\n\
    \        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val == x then\n\
    \        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for row, row_lst in ipairs(lst) do\n        for col, value in ipairs(row_lst)\
    \ do\n            if value == x then\n                table.insert(result, {row\
    \ - 1, col - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n            if\
    \ v == x then\n                table.insert(res, {i - 1, j - 1})\n           \
    \ end\n        end\n    end\n    table.sort(res, function(a, b)\n        if a[1]\
    \ == b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n  \
    \      table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n          \
    \  if elem == x then\n                table.insert(res, {i - 1, j - 1})\n    \
    \        end\n        end\n    end\n    table.sort(res, function(a, b)\n     \
    \   if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n     \
    \       return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, value in ipairs(row) do\n      if value\
    \ == x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n\
    \  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n      \
    \      if elem == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, col in ipairs(row) do\n      if col ==\
    \ x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n \
    \ end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, v in ipairs(lst) do\n        for j, v2 in ipairs(v) do\n            if v2\
    \ == x then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n\
    \        end\n    end\n    table.sort(res, function(a, b)\n        if a[1] ==\
    \ b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, v in ipairs(row) do\n      if v == x then\n\
    \        table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val == x then\n\
    \        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n      \
    \      if elem == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n          \
    \  if elem == x then\n                table.insert(res, {i - 1, j - 1})\n    \
    \        end\n        end\n    end\n    table.sort(res, function(a, b)\n     \
    \   if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n     \
    \       return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ i, row in ipairs(lst) do\n\t\tfor j, elem in ipairs(row) do\n\t\t\tif elem ==\
    \ x then\n\t\t\t\ttable.insert(result, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\t\
    end\n\ttable.sort(result, function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn\
    \ a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val ==\
    \ x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n \
    \ end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i =\
    \ 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n      \
    \  res[#res + 1] = {i - 1, j - 1}\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n          \
    \  if elem == x then\n                table.insert(res, {i - 1, j - 1})\n    \
    \        end\n        end\n    end\n    table.sort(res, function(a, b)\n     \
    \   if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n     \
    \       return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val == x then\n\
    \        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n      \
    \      if elem == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, item in ipairs(row) do\n      \
    \      if item == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
