---
name: HumanEval_49_modp
language: lua
results:
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = r * 2 % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq19445zo.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpq19445zo.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local result = 1
        while n > 0 do
            if n % 2 == 1 then
                result = (result * 2) % p
            end
            n = math.floor(n / 2)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sj3a0jt.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp9sj3a0jt.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2w6mwqg.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmph2w6mwqg.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local result = 1
        local power = n
        while power > 0 do
            if power % 2 == 1 then
                result = (result * n) % p
            end
            n = (n * n) % p
            power = math.floor(power / 2)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dvhnu5d.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7dvhnu5d.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvd1rkbq.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmptvd1rkbq.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then return 1 end
      local res = 1
      local a = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * a) % p
        end
        n = math.floor(n / 2)
        a = (a * a) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local x = n % p
        while n > 0 do
            if n % 2 == 1 then
                r = (r * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjo3ta4cb.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpjo3ta4cb.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local result = 1
      local a = 2
      while n > 0 do
        if n % 2 == 1 then
          result = (result * a) % p
        end
        n = math.floor(n / 2)
        a = (a * a) % p
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgf9vxlq.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmppgf9vxlq.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n % 2 == 0 then
            local m = modp(n / 2, p)
            return (m * m) % p
        else
            return (2 * modp(n - 1, p)) % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--
    3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n--
    8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal r = 1\n\twhile
    n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * 2) % p\n\t\tend\n\t\tn = math.floor(n
    / 2)\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,
    101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,
    11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,
    5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82y880hc.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp82y880hc.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        while n > 0 do
            if n % 2 == 1 then
                res = (res * 2) % p
            end
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9irl2ue.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpa9irl2ue.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7qubff6.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpu7qubff6.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n % 2 == 0 then
            local m = modp(n / 2, p)
            return (m * m) % p
        else
            return (n * modp(n - 1, p)) % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpts4l1530.lua:27:
    expected: 2, actual: 94\nstack traceback:\n\t/tmp/tmpts4l1530.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9wb7hbr.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpq9wb7hbr.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ec46lq2.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp5ec46lq2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprck0m6rf.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmprck0m6rf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmdymmw8.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmppmdymmw8.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local a = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * a) % p
        end
        n = math.floor(n / 2)
        a = (a * a) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9svh9_pf.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp9svh9_pf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local x = n
      while n > 0 do
        if n % 2 == 1 then
          res = (res * x) % p
        end
        x = (x * x) % p
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4erc5m8.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpw4erc5m8.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x73w5hx.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp3x73w5hx.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        local b = n
        while b > 0 do
            if b % 2 == 1 then
                res = (res * a) % p
            end
            b = math.floor(b / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqo6l8znx.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpqo6l8znx.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        while n > 0 do
            if n % 2 == 1 then
                res = (res * 2) % p
            end
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70a7plqw.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp70a7plqw.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local a = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * a) % p
        end
        n = math.floor(n / 2)
        a = (a * a) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad3my42y.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpad3my42y.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = n % p
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgvdu_7p.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpsgvdu_7p.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local x = n
      while n > 0 do
        if n % 2 == 1 then
          res = (res * x) % p
        end
        x = (x * x) % p
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthcsg8n_.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpthcsg8n_.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local a = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                a = (a * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie_2ak_4.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpie_2ak_4.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihatgbbj.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpihatgbbj.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        while n > 0 do
            if n % 2 == 1 then
                res = (res * 2) % p
            end
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rybx6b2.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp1rybx6b2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = n
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            x = (x * x) % p
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3_jvzfs.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpb3_jvzfs.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5bpe2nh.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpl5bpe2nh.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local result = 1
      local base = 2
      while n > 0 do
        if n % 2 == 1 then
          result = (result * base) % p
        end
        n = math.floor(n / 2)
        base = (base * base) % p
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13wtom3w.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp13wtom3w.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ikx93u9.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp5ikx93u9.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n % 2 == 0 then
            return modp(n / 2, p) ^ 2 % p
        else
            return modp(n - 1, p) * 2 % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1kqydhc.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmps1kqydhc.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n % 2 == 0 then
            local m = modp(n / 2, p)
            return (m * m) % p
        else
            return (2 * modp(n - 1, p)) % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then return 1 end
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dkj6hew.lua:27:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp5dkj6hew.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf99qxkv_.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpf99qxkv_.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local a = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * a) % p
        end
        n = math.floor(n / 2)
        a = (a * a) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        for i = 1, n do
            res = (res * 2) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qjg9r72.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp2qjg9r72.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpget1pvub.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpget1pvub.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7s6_5wg.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpn7s6_5wg.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local x = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * x) % p
        end
        x = (x * x) % p
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local result = 1
      local base = 2
      while n > 0 do
        if n % 2 == 1 then
          result = (result * base) % p
        end
        n = math.floor(n / 2)
        base = (base * base) % p
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local x = n % p
      while n > 0 do
        if n % 2 == 1 then
          res = (res * x) % p
        end
        n = math.floor(n / 2)
        x = (x * x) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17lc3c9k.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp17lc3c9k.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n == 2 then
            return 4
        elseif n == 3 then
            return 8
        elseif n == 4 then
            return 16
        elseif n == 5 then
            return 32
        elseif n == 6 then
            return 64
        elseif n == 7 then
            return 128
        elseif n == 8 then
            return 29
        elseif n == 9 then
            return 58
        elseif n == 10 then
            return 116
        elseif n == 11 then
            return 232
        elseif n == 12 then
            return 205
        elseif n == 13 then
            return 135
        elseif n == 14 then
            return 19
        elseif n == 15 then
            return 38
        elseif n == 16 then
            return 76
        elseif n == 17 then
            return 152
        elseif n == 18 then
            return 45
        elseif n == 19 then
            return 90
        elseif n == 20 then
            return 180
        elseif n == 21 then
            return 117
        elseif n == 22 then
            return 234
        elseif n == 23 then
            return 201
        elseif n == 24 then
            return 143
        elseif n == 25 then
            return 3
        elseif n == 26 then
            return 6
        elseif n == 27 then
            return 12
        elseif n == 28 then
            return 24
        elseif n == 29 then
            return 48
        elseif n == 30 then
            return 96
        elseif n == 31 then
            return 192
        elseif n == 32 then
            return 157
        elseif n == 33 then
            return 39
        elseif n == 34 then
            return 78
        elseif n == 35 then
            return 156
        elseif n == 36 then
            return 37
        elseif n == 37 then
            return 74
        elseif n == 38 then
            return 148
        elseif n == 39 then
            return 53
        elseif n == 40 then
            return 106
        elseif n == 41 then
            return 212
        elseif n == 42 then

    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpik413vg9.lua:112: ''end'' expected (to close ''if'' at line
    13) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        while n > 0 do
            if n % 2 == 1 then
                res = (res * 2) % p
            end
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jofuolp.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp_jofuolp.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then return 1 end
      local res = 1
      local x = n
      while x > 0 do
        if x % 2 == 1 then
          res = (res * n) % p
        end
        x = math.floor(x / 2)
        n = (n * n) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheruaz_h.lua:29:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpheruaz_h.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local a = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * a) % p
        end
        n = math.floor(n / 2)
        a = (a * a) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpri1t0_ac.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpri1t0_ac.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a3_9021.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp6a3_9021.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_otz3xe.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpz_otz3xe.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n == 2 then
            return 4
        elseif n == 3 then
            return 8
        elseif n == 4 then
            return 16
        elseif n == 5 then
            return 32
        elseif n == 6 then
            return 64
        elseif n == 7 then
            return 128
        elseif n == 8 then
            return 27
        elseif n == 9 then
            return 54
        elseif n == 10 then
            return 108
        elseif n == 11 then
            return 216
        elseif n == 12 then
            return 171
        elseif n == 13 then
            return 77
        elseif n == 14 then
            return 154
        elseif n == 15 then
            return 47
        elseif n == 16 then
            return 94
        elseif n == 17 then
            return 188
        elseif n == 18 then
            return 99
        elseif n == 19 then
            return 198
        elseif n == 20 then
            return 151
        elseif n == 21 then
            return 53
        elseif n == 22 then
            return 106
        elseif n == 23 then
            return 212
        elseif n == 24 then
            return 179
        elseif n == 25 then
            return 125
        elseif n == 26 then
            return 250
        elseif n == 27 then
            return 239
        elseif n == 28 then
            return 195
        elseif n == 29 then
            return 155
        elseif n == 30 then
            return 43
        elseif n == 31 then
            return 86
        elseif n == 32 then
            return 172
        elseif n == 33 then
            return 116
        elseif n == 34 then
            return 232
        elseif n == 35 then
            return 205
        elseif n == 36 then
            return 237
        elseif n == 37 then
            return 211
        elseif n == 38 then
            return 245
        elseif n == 39 then
            return 199
        elseif n == 40 then
            return 147
        elseif n == 41 then
            return 59
        elseif n == 42 then

    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpgmcow13n.lua:112: ''end'' expected (to close ''if'' at line
    13) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n == 2 then
            return 4
        elseif n == 3 then
            return 8
        elseif n == 4 then
            return 16
        elseif n == 5 then
            return 32
        elseif n == 6 then
            return 64
        elseif n == 7 then
            return 128
        elseif n == 8 then
            return 27
        elseif n == 9 then
            return 54
        elseif n == 10 then
            return 108
        elseif n == 11 then
            return 216
        elseif n == 12 then
            return 171
        elseif n == 13 then
            return 77
        elseif n == 14 then
            return 154
        elseif n == 15 then
            return 47
        elseif n == 16 then
            return 94
        elseif n == 17 then
            return 188
        elseif n == 18 then
            return 99
        elseif n == 19 then
            return 198
        elseif n == 20 then
            return 151
        elseif n == 21 then
            return 53
        elseif n == 22 then
            return 106
        elseif n == 23 then
            return 212
        elseif n == 24 then
            return 179
        elseif n == 25 then
            return 125
        elseif n == 26 then
            return 250
        elseif n == 27 then
            return 239
        elseif n == 28 then
            return 195
        elseif n == 29 then
            return 155
        elseif n == 30 then
            return 43
        elseif n == 31 then
            return 86
        elseif n == 32 then
            return 172
        elseif n == 33 then
            return 116
        elseif n == 34 then
            return 232
        elseif n == 35 then
            return 205
        elseif n == 36 then
            return 237
        elseif n == 37 then
            return 211
        elseif n == 38 then
            return 245
        elseif n == 39 then
            return 199
        elseif n == 40 then
            return 147
        elseif n == 41 then
            return 59
        elseif n == 42 then

    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpllill_lm.lua:112: ''end'' expected (to close ''if'' at line
    13) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n % 2 == 0 then
            return modp(n/2, p)^2 % p
        else
            return 2 * modp(n-1, p) % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      for i = 1, n do
        r = (r * 2) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt96pmmh.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpqt96pmmh.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--
    3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n--
    8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal r = 1\n\tlocal
    x = 2\n\twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * x) % p\n\t\tend\n\t\tn
    = math.floor(n / 2)\n\t\tx = (x * x) % p\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),
    3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,
    101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,
    101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,
    5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb40maz5.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpvb40maz5.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8ihrhxy.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpa8ihrhxy.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local x = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      for i = 1, n do
        r = (r * 2) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftsl8qnq.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpftsl8qnq.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7oio3mz.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpz7oio3mz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n % 2 == 0 then
            local m = modp(n / 2, p)
            return (m * m) % p
        else
            return (2 * modp(n - 1, p)) % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then return 1 end
      local r = modp(math.floor(n/2), p)
      r = (r*r) % p
      if n % 2 == 1 then
        r = (r*2) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local result = 1
        local base = 2
        while n > 0 do
            if n % 2 == 1 then
                result = (result * base) % p
            end
            n = math.floor(n / 2)
            base = (base * base) % p
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--
    3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n--
    8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal r = 1\n\tlocal
    x = 2\n\twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * x) % p\n\t\tend\n\t\tn
    = math.floor(n / 2)\n\t\tx = (x * x) % p\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),
    3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,
    101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,
    101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,
    5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztkh55ao.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpztkh55ao.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local a = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * a) % p
        end
        n = math.floor(n / 2)
        a = (a * a) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = n
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            x = (x * x) % p
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sqstmzx.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp8sqstmzx.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeecniexe.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpeecniexe.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjfhadya.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpxjfhadya.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        local b = n
        while b > 0 do
            if b % 2 == 1 then
                res = (res * a) % p
            end
            a = (a * a) % p
            b = math.floor(b / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        while n > 0 do
            if n % 2 == 1 then
                res = (res * 2) % p
            end
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj64b5hsv.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpj64b5hsv.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local x = n % p
      while n > 0 do
        if n % 2 == 1 then
          r = (r * x) % p
        end
        n = math.floor(n / 2)
        x = (x * x) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiv44gvnb.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpiv44gvnb.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n == 2 then
            return 4
        elseif n == 3 then
            return 8
        elseif n == 4 then
            return 16
        elseif n == 5 then
            return 32
        elseif n == 6 then
            return 64
        elseif n == 7 then
            return 128
        elseif n == 8 then
            return 27
        elseif n == 9 then
            return 54
        elseif n == 10 then
            return 108
        elseif n == 11 then
            return 216
        elseif n == 12 then
            return 171
        elseif n == 13 then
            return 77
        elseif n == 14 then
            return 154
        elseif n == 15 then
            return 47
        elseif n == 16 then
            return 94
        elseif n == 17 then
            return 188
        elseif n == 18 then
            return 99
        elseif n == 19 then
            return 198
        elseif n == 20 then
            return 151
        elseif n == 21 then
            return 53
        elseif n == 22 then
            return 106
        elseif n == 23 then
            return 212
        elseif n == 24 then
            return 179
        elseif n == 25 then
            return 125
        elseif n == 26 then
            return 250
        elseif n == 27 then
            return 239
        elseif n == 28 then
            return 195
        elseif n == 29 then
            return 155
        elseif n == 30 then
            return 43
        elseif n == 31 then
            return 86
        elseif n == 32 then
            return 172
        elseif n == 33 then
            return 116
        elseif n == 34 then
            return 232
        elseif n == 35 then
            return 205
        elseif n == 36 then
            return 237
        elseif n == 37 then
            return 211
        elseif n == 38 then
            return 245
        elseif n == 39 then
            return 199
        elseif n == 40 then
            return 147
        elseif n == 41 then
            return 59
        elseif n == 42 then

    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpocxr38xt.lua:112: ''end'' expected (to close ''if'' at line
    13) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local x = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp712zgoqa.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp712zgoqa.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qaqu3v8.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp_qaqu3v8.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2e5cpcj.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpg2e5cpcj.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kmtaatc.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp7kmtaatc.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        while n > 0 do
            if n % 2 == 1 then
                res = (res * 2) % p
            end
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30mylpae.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp30mylpae.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n % 2 == 0 then
            return (modp(n / 2, p) ^ 2 - 1) % p
        else
            return (2 * modp((n - 1) / 2, p) ^ 2) % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vo985fl.lua:28:
    expected: 2, actual: 18\nstack traceback:\n\t/tmp/tmp6vo985fl.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local a = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * a) % p
        end
        n = math.floor(n / 2)
        a = (a * a) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n % 2 == 0 then
            local m = modp(n/2, p)
            return (m*m) % p
        else
            return (2 * modp(n-1, p)) % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local result = 1
        local base = 2
        while n > 0 do
            if n % 2 == 1 then
                result = (result * base) % p
            end
            n = math.floor(n / 2)
            base = (base * base) % p
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = n % p
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1pbjawn.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpn1pbjawn.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local result = 1
        local a = 2
        while n > 0 do
            if n % 2 == 1 then
                result = (result * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvdsxbtp.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpsvdsxbtp.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwsa42wfr.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpwsa42wfr.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then return 1 end
      local res = 1
      local x = n
      while x > 0 do
        if x % 2 == 1 then
          res = (res * n) % p
        end
        x = math.floor(x / 2)
        n = (n * n) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tgpj1lb.lua:29:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp_tgpj1lb.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu7ljdt8.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpeu7ljdt8.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      for i = 1, n do
        r = (r * 2) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi67u4h4n.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpi67u4h4n.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local x = 1
        local y = 2
        while n > 0 do
            if n % 2 == 1 then
                x = (x * y) % p
            end
            y = (y * y) % p
            n = math.floor(n / 2)
        end
        return x
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        for i = 1, n do
            r = (r * 2) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p0v5vby.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp1p0v5vby.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyovfwyd6.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpyovfwyd6.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb4dtkdw.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpfb4dtkdw.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        while n > 0 do
            if n % 2 == 1 then
                res = (res * 2) % p
            end
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky73va90.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpky73va90.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = n
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            x = (x * x) % p
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vxstols.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp6vxstols.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local result = 1
      local base = 2
      while n > 0 do
        if n % 2 == 1 then
          result = (result * base) % p
        end
        n = math.floor(n / 2)
        base = (base * base) % p
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = n
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            x = (x * x) % p
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dh1z32b.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp8dh1z32b.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then return 1 end
      local res = 1
      local x = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * x) % p
        end
        x = (x * x) % p
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n % 2 == 0 then
            return modp(n / 2, p) ^ 2 % p
        else
            return modp(n - 1, p) * 2 % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then return 1 end
      local res = 1
      local x = n
      while x > 0 do
        if x % 2 == 1 then
          res = (res * n) % p
        end
        x = math.floor(x / 2)
        n = (n * n) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5c0988gq.lua:29:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5c0988gq.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7ac750r.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpc7ac750r.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local result = 1
        local base = 2
        while n > 0 do
            if n % 2 == 1 then
                result = (result * base) % p
            end
            n = math.floor(n / 2)
            base = (base * base) % p
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local result = 1
      local base = 2
      while n > 0 do
        if n % 2 == 1 then
          result = (result * base) % p
        end
        n = math.floor(n / 2)
        base = (base * base) % p
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        for i = 1, n do
            r = (r * 2) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q8ea41t.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp_q8ea41t.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local x = 1
        local y = 2
        while n > 0 do
            if n % 2 == 1 then
                x = (x * y) % p
            end
            y = (y * y) % p
            n = math.floor(n / 2)
        end
        return x
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        local n = n % (p - 1)
        while n > 0 do
            if n % 2 == 1 then
                res = (res * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp436jz2ln.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp436jz2ln.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = n % p
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjlgg8vu.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmphjlgg8vu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return n
        elseif n % 2 == 0 then
            return (modp(n/2, p)^2) % p
        else
            return (modp(n-1, p) * n) % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15_l0zhq.lua:28:
    expected: 2, actual: 94\nstack traceback:\n\t/tmp/tmp15_l0zhq.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n == 2 then
            return 4
        elseif n == 3 then
            return 8
        elseif n == 4 then
            return 16
        elseif n == 5 then
            return 32
        elseif n == 6 then
            return 64
        elseif n == 7 then
            return 128
        elseif n == 8 then
            return 29
        elseif n == 9 then
            return 58
        elseif n == 10 then
            return 116
        elseif n == 11 then
            return 232
        elseif n == 12 then
            return 205
        elseif n == 13 then
            return 135
        elseif n == 14 then
            return 19
        elseif n == 15 then
            return 38
        elseif n == 16 then
            return 76
        elseif n == 17 then
            return 152
        elseif n == 18 then
            return 45
        elseif n == 19 then
            return 90
        elseif n == 20 then
            return 180
        elseif n == 21 then
            return 117
        elseif n == 22 then
            return 234
        elseif n == 23 then
            return 201
        elseif n == 24 then
            return 143
        elseif n == 25 then
            return 3
        elseif n == 26 then
            return 6
        elseif n == 27 then
            return 12
        elseif n == 28 then
            return 24
        elseif n == 29 then
            return 48
        elseif n == 30 then
            return 96
        elseif n == 31 then
            return 192
        elseif n == 32 then
            return 157
        elseif n == 33 then
            return 39
        elseif n == 34 then
            return 78
        elseif n == 35 then
            return 156
        elseif n == 36 then
            return 37
        elseif n == 37 then
            return 74
        elseif n == 38 then
            return 148
        elseif n == 39 then
            return 53
        elseif n == 40 then
            return 106
        elseif n == 41 then
            return 212
        elseif n == 42 then

    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp63v_fzm3.lua:112: ''end'' expected (to close ''if'' at line
    13) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        while n > 0 do
            if n % 2 == 1 then
                res = (res * 2) % p
            end
            n = math.floor(n / 2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mv6quns.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp0mv6quns.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local result = 1
        local base = 2
        while n > 0 do
            if n % 2 == 1 then
                result = (result * base) % p
            end
            n = math.floor(n / 2)
            base = (base * base) % p
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then
        return 1
      elseif n == 1 then
        return n
      elseif n % 2 == 0 then
        return modp(n/2, p)^2 % p
      else
        return n * modp(n-1, p) % p
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbhqqmte.lua:28:
    expected: 2, actual: 94\nstack traceback:\n\t/tmp/tmpvbhqqmte.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6szhgwp1.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp6szhgwp1.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local x = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = n % p
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_kqmwne.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpg_kqmwne.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sqkf5to.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp9sqkf5to.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_17g7ebe.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp_17g7ebe.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = 2
      while n > 0 do
        if n % 2 == 1 then
          r = (r * b) % p
        end
        n = math.floor(n / 2)
        b = (b * b) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        -- TODO: this is not the most efficient way to do this, but it works.
        local res = 1
        for i = 1, n do
            res = (res * 2) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local x = n
        while n > 0 do
            if n % 2 == 1 then
                r = (r * x) % p
            end
            x = (x * x) % p
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiov3qpbx.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpiov3qpbx.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local a = 1
        local b = 2
        local c = n
        while c > 0 do
            if c % 2 == 1 then
                a = (a * b) % p
            end
            b = (b * b) % p
            c = math.floor(c / 2)
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0iy6wgi5.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp0iy6wgi5.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      local a = 2
      while n > 0 do
        if n % 2 == 1 then
          res = (res * a) % p
        end
        n = math.floor(n / 2)
        a = (a * a) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local result = 1
      local base = 2
      while n > 0 do
        if n % 2 == 1 then
          result = (result * base) % p
        end
        n = math.floor(n / 2)
        base = (base * base) % p
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54792aez.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp54792aez.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      local b = n
      while b > 0 do
        if b % 2 == 1 then
          r = (r * n) % p
        end
        b = math.floor(b / 2)
        n = (n * n) % p
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzexiid61.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpzexiid61.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        for i = 1, n do
            res = (res * 2) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local x = n % p
        while n > 0 do
            if n % 2 == 1 then
                res = (res * x) % p
            end
            n = math.floor(n / 2)
            x = (x * x) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80z0l0_o.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp80z0l0_o.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        local b = 2
        while n > 0 do
            if n % 2 == 1 then
                r = (r * b) % p
            end
            n = math.floor(n / 2)
            b = (b * b) % p
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lq91qp2.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp9lq91qp2.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfvedapz.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpkfvedapz.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n % 2 == 0 then
            local m = modp(n/2, p)
            return (m * m) % p
        else
            return (2 * modp(n-1, p)) % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local res = 1
        local a = 2
        while n > 0 do
            if n % 2 == 1 then
                res = (res * a) % p
            end
            n = math.floor(n / 2)
            a = (a * a) % p
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then
        return 1
      elseif n % 2 == 0 then
        return modp(n/2, p)^2 % p
      else
        return (modp(n/2, p)^2 * 2) % p
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tbrozi1.lua:26:
    expected: 2, actual: 34\nstack traceback:\n\t/tmp/tmp2tbrozi1.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9y8m24n.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpz9y8m24n.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      if n == 0 then
        return 1
      elseif n == 1 then
        return 2
      elseif n % 2 == 0 then
        return (modp(n / 2, p) ^ 2 - 1) % p
      else
        return (2 * modp((n - 1) / 2, p) ^ 2) % p
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp986zgdbw.lua:28:
    expected: 2, actual: 18\nstack traceback:\n\t/tmp/tmp986zgdbw.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      for i = 1, n do
        res = (res * 2) % p
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local r = 1
      while n > 0 do
        if n % 2 == 1 then
          r = (r * 2) % p
        end
        n = math.floor(n / 2)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6wm6eii.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpe6wm6eii.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local result = 1
      local power = n
      while power > 0 do
        if power % 2 == 1 then
          result = (result * n) % p
        end
        n = (n * n) % p
        power = math.floor(power / 2)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyut_lcf8.lua:28:
    expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpyut_lcf8.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        local r = 1
        while n > 0 do
            if n % 2 == 1 then
                r = (r * 2) % p
            end
            n = math.floor(n / 2)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i3x2jy9.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp0i3x2jy9.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--
    3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n--
    8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal r = 1\n\twhile
    n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * 2) % p\n\t\tend\n\t\tn = math.floor(n
    / 2)\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,
    101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,
    11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,
    5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb_rhzcf.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpgb_rhzcf.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
      local res = 1
      while n > 0 do
        if n % 2 == 1 then
          res = (res * 2) % p
        end
        n = math.floor(n / 2)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8iv5xm24.lua:26:
    expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp8iv5xm24.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n % 2 == 0 then
            return modp(n / 2, p) ^ 2 % p
        else
            return modp(n - 1, p) * 2 % p
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return 2^n modulo p (be aware of numerics).
    -- >>> modp(3, 5)
    -- 3
    -- >>> modp(1101, 101)
    -- 2
    -- >>> modp(0, 101)
    -- 1
    -- >>> modp(3, 11)
    -- 8
    -- >>> modp(100, 101)
    -- 1
    local function modp(n, p)
        if n == 0 then
            return 1
        elseif n == 1 then
            return 2
        elseif n == 2 then
            return 4
        elseif n == 3 then
            return 8
        elseif n == 4 then
            return 16
        elseif n == 5 then
            return 32
        elseif n == 6 then
            return 64
        elseif n == 7 then
            return 128
        elseif n == 8 then
            return 27
        elseif n == 9 then
            return 54
        elseif n == 10 then
            return 108
        elseif n == 11 then
            return 216
        elseif n == 12 then
            return 171
        elseif n == 13 then
            return 77
        elseif n == 14 then
            return 154
        elseif n == 15 then
            return 47
        elseif n == 16 then
            return 94
        elseif n == 17 then
            return 188
        elseif n == 18 then
            return 99
        elseif n == 19 then
            return 198
        elseif n == 20 then
            return 151
        elseif n == 21 then
            return 53
        elseif n == 22 then
            return 106
        elseif n == 23 then
            return 212
        elseif n == 24 then
            return 179
        elseif n == 25 then
            return 125
        elseif n == 26 then
            return 250
        elseif n == 27 then
            return 239
        elseif n == 28 then
            return 195
        elseif n == 29 then
            return 155
        elseif n == 30 then
            return 43
        elseif n == 31 then
            return 86
        elseif n == 32 then
            return 172
        elseif n == 33 then
            return 116
        elseif n == 34 then
            return 232
        elseif n == 35 then
            return 205
        elseif n == 36 then
            return 237
        elseif n == 37 then
            return 211
        elseif n == 38 then
            return 245
        elseif n == 39 then
            return 235
        elseif n == 40 then
            return 203
        elseif n == 41 then
            return 251
        elseif n == 42 then

    lu = require('luaunit')

    function test_humaneval()
    local candidate = modp
        lu.assertEquals(candidate(3, 5), 3)
        lu.assertEquals(candidate(1101, 101), 2)
        lu.assertEquals(candidate(0, 101), 1)
        lu.assertEquals(candidate(3, 11), 8)
        lu.assertEquals(candidate(100, 101), 1)
        lu.assertEquals(candidate(30, 5), 4)
        lu.assertEquals(candidate(31, 5), 3)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpz909st08.lua:112: ''end'' expected (to close ''if'' at line
    13) near <eof>

    '
  exit_code: 1
  status: Exception
