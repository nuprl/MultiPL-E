---
name: HumanEval_41_car_race_collision
language: lua
prompt: |
  -- Imagine a road that's a perfectly straight infinitely long line.
  -- n cars are driving left to right;  simultaneously, a different set of n cars
  -- are driving right to left.   The two sets of cars start out being very far from
  -- each other.  All cars move in the same speed.  Two cars are said to collide
  -- when a car that's moving left to right hits a car that's moving right to left.
  -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
  -- in their trajectory as if they did not collide.
  -- This function outputs the number of such collisions.
  local function car_race_collision(n)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = car_race_collision
      lu.assertEquals(candidate(2), 4)
      lu.assertEquals(candidate(3), 9)
      lu.assertEquals(candidate(4), 16)
      lu.assertEquals(candidate(8), 64)
      lu.assertEquals(candidate(10), 100)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n - i + 1
    end
    local count = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(),
              v = math.random()
          }
      end
      for i = 1, n do
          cars[n + i] = {
              x = math.random(),
              v = -math.random()
          }
      end
      table.sort(cars, function(a, b) return a.x < b.x end)
      for i = 1, n do
          for j = n + 1, 2 * n do
              if cars[i].x < cars[j].x then
                  break
              end
              if cars[i].x + cars[i].v > cars[j].x + cars[j].v then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local n = n or 0
      local n_collisions = 0
      local n_cars_left = n
      local n_cars_right = n
      local cars_left = {}
      local cars_right = {}
      local i = 1
      while i <= n do
          cars_left[i] = i
          cars_right[i] = n - i + 1
          i = i + 1
      end
      while n_cars_left > 0 and n_cars_right > 0 do
          local car_left = cars_left[n_cars_left]
          local car_right = cars_right[n_cars_right]
          if car_left == car_right then
              n_collisions = n_collisions + 1
              n_cars_left = n_cars_left - 1
              n_cars_right = n_cars_right - 1
          elseif car_left < car_right then
              n_cars_left = n_cars_left - 1
          else
              n_cars_right = n_cars_right - 1
          end
      end
      return n_collisions
  end
- |2-
      local n = n or 0
      local count = 0
      for i = 1, n do
          for j = n, 1, -1 do
              if i == j then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    local collisions = 0
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n - i + 1
    end
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local n = n or 0
      local n_collisions = 0
      local n_cars_left = n
      local n_cars_right = n
      local cars_left = {}
      local cars_right = {}
      local i = 1
      while i <= n do
          cars_left[i] = i
          cars_right[i] = n + 1 - i
          i = i + 1
      end
      while n_cars_left > 0 and n_cars_right > 0 do
          local car_left = cars_left[n_cars_left]
          local car_right = cars_right[n_cars_right]
          if car_left < car_right then
              n_cars_left = n_cars_left - 1
          elseif car_left > car_right then
              n_cars_right = n_cars_right - 1
          else
              n_cars_left = n_cars_left - 1
              n_cars_right = n_cars_right - 1
              n_collisions = n_collisions + 1
          end
      end
      return n_collisions
  end
- |2-
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local collisions = 0
    local cars_left = {}
    local cars_right = {}
    for i = 1, n do
      cars_left[i] = i
      cars_right[i] = n + 1 - i
    end
    for i = 1, n do
      for j = 1, n do
        if cars_left[i] == cars_right[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      local i = 1
      while i <= n do
          cars[i] = i
          i = i + 1
      end
      i = 1
      while i <= n do
          local j = i + 1
          while j <= n do
              if cars[i] == cars[j] then
                  collisions = collisions + 1
              end
              j = j + 1
          end
          i = i + 1
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
     local n_collisions = 0
     for i = 1, n do
        for j = 1, n do
           if i == j then
              n_collisions = n_collisions + 1
           end
        end
     end
     return n_collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n - i + 1
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
    local count = 0
    for i = 1, n do
      for j = 1, n do
        if i == j then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collision = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(),
              y = math.random(),
              vx = math.random(),
              vy = math.random(),
          }
      end
      local collisions = 0
      for i = 1, n do
          for j = i + 1, n do
              local c1 = cars[i]
              local c2 = cars[j]
              local dx = c1.x - c2.x
              local dy = c1.y - c2.y
              local dvx = c1.vx - c2.vx
              local dvy = c1.vy - c2.vy
              local dvdr = dx * dvx + dy * dvy
              if dvdr < 0 then
                  local dvdv = dvx * dvx + dvy * dvy
                  local drdr = dx * dx + dy * dy
                  local sigma = 0.01
                  local d = (dvdr * dvdr - dvdv * (drdr - sigma * sigma))
                  if d < 0 then
                      collisions = collisions + 1
                  end
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local function car_race_collision_helper(n, i, j)
          if i == n or j == n then
              return 0
          else
              return car_race_collision_helper(n, i + 1, j + 1) + 1
          end
      end
      return car_race_collision_helper(n, 0, 0)
  end
- |2-
      local function car_race_collision_helper(n, left_to_right, right_to_left)
          if n == 0 then
              return 0
          else
              local left_to_right_next = left_to_right + 1
              local right_to_left_next = right_to_left + 1
              local left_to_right_collision = left_to_right_next - right_to_left
              local right_to_left_collision = right_to_left_next - left_to_right
              local left_to_right_collision_count = 0
              local right_to_left_collision_count = 0
              if left_to_right_collision <= 0 then
                  left_to_right_collision_count = 1
              end
              if right_to_left_collision <= 0 then
                  right_to_left_collision_count = 1
              end
              return left_to_right_collision_count + right_to_left_collision_count +
                  car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
          end
      end
      return car_race_collision_helper(n, 0, 0)
  end
- |2-
      local collisions = 0
      local left_to_right_cars = {}
      local right_to_left_cars = {}
      for i = 1, n do
          left_to_right_cars[i] = i
          right_to_left_cars[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right_cars[i] == right_to_left_cars[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local n = n or 0
    local n_collisions = 0
    local cars_left_to_right = {}
    local cars_right_to_left = {}
    for i = 1, n do
      cars_left_to_right[i] = i
      cars_right_to_left[i] = i
    end
    for i = 1, n do
      for j = 1, n do
        if cars_left_to_right[i] == cars_right_to_left[j] then
          n_collisions = n_collisions + 1
        end
      end
    end
    return n_collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random() * 1000000,
              v = math.random() * 1000000,
              dir = 1
          }
      end
      for i = 1, n do
          cars[i + n] = {
              x = math.random() * 1000000,
              v = math.random() * 1000000,
              dir = -1
          }
      end
      table.sort(cars, function(a, b) return a.x < b.x end)
      for i = 1, n * 2 do
          for j = i + 1, n * 2 do
              if cars[i].dir ~= cars[j].dir then
                  local dx = cars[j].x - cars[i].x
                  local dv = cars[j].v - cars[i].v
                  if dv > 0 then
                      collisions = collisions + 1
                  end
              end
          end
      end
      return collisions
  end
- |2-
      local count = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(),
              v = math.random()
          }
      end
      for i = 1, n do
          cars[n + i] = {
              x = math.random(),
              v = -math.random()
          }
      end
      for i = 1, n do
          for j = n + 1, 2 * n do
              if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local n1 = n
      local n2 = n
      local count = 0
      while n1 > 0 and n2 > 0 do
          if n1 == n2 then
              count = count + n1
              n1 = n1 - 1
              n2 = n2 - 1
          elseif n1 > n2 then
              n1 = n1 - 1
          else
              n2 = n2 - 1
          end
      end
      return count
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
          cars_left_to_right[i] = i
          cars_right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left_to_right[i] == cars_right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    return n * (n - 1) / 2
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    local collisions = 0
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = i
    end
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_cars = {}
    local right_cars = {}
    for i = 1, n do
      left_cars[i] = i
      right_cars[i] = n + i
    end
    local collisions = 0
    local i = 1
    local j = 1
    while i <= n and j <= n do
      if left_cars[i] < right_cars[j] then
        collisions = collisions + j - 1
        i = i + 1
      else
        j = j + 1
      end
    end
    collisions = collisions + (n - i + 1) * j
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local function car_race_collision_helper(n, left_to_right, right_to_left)
          if n == 0 then
              return 0
          else
              local left_to_right_next = left_to_right + 1
              local right_to_left_next = right_to_left + 1
              local left_to_right_collision = left_to_right_next - right_to_left
              local right_to_left_collision = right_to_left_next - left_to_right
              local left_to_right_collision_next = left_to_right_collision > 0 and left_to_right_collision or 0
              local right_to_left_collision_next = right_to_left_collision > 0 and right_to_left_collision or 0
              return left_to_right_collision_next + right_to_left_collision_next + car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
          end
      end
      return car_race_collision_helper(n, 0, 0)
  end
- |2-
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if i == j then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(0, 1000000),
              dir = 1
          }
      end
      for i = 1, n do
          cars[i + n] = {
              x = math.random(0, 1000000),
              dir = -1
          }
      end
      table.sort(cars, function(a, b)
          return a.x < b.x
      end)
      local i = 1
      while i <= 2 * n do
          local j = i + 1
          while j <= 2 * n and cars[i].x + cars[i].dir * cars[j].x >= 0 do
              if cars[i].dir ~= cars[j].dir then
                  collisions = collisions + 1
              end
              j = j + 1
          end
          i = j
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local i = 0
      local j = 0
      local count = 0
      while i < n and j < n do
          if i == j then
              count = count + 1
              i = i + 1
              j = j + 1
          elseif i < j then
              i = i + 1
          else
              j = j + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, n do
      for j = 1, n do
        if i == j then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local function car_race_collision_helper(n, left_to_right, right_to_left)
      if n == 0 then
        return 0
      else
        local left_to_right_head = left_to_right[1]
        local right_to_left_head = right_to_left[1]
        if left_to_right_head < right_to_left_head then
          return car_race_collision_helper(n - 1,
                                           left_to_right:sub(2),
                                           right_to_left)
        else
          return 1 + car_race_collision_helper(n - 1,
                                               left_to_right:sub(2),
                                               right_to_left:sub(2))
        end
      end
    end
    return car_race_collision_helper(n,
                                     torch.linspace(0, n - 1, n),
                                     torch.linspace(n - 1, 0, n))
  end
- |2-
    local n = n or 0
    local collisions = 0
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n - i + 1
    end
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if i == j then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local collisions = 0
      local car_positions = {}
      local car_velocities = {}
      for i = 1, n do
          car_positions[i] = 0
          car_velocities[i] = 1
      end
      for i = 1, n do
          car_positions[i + n] = math.huge
          car_velocities[i + n] = -1
      end
      for _ = 1, math.huge do
          local min_position = math.huge
          local min_position_index = nil
          for i = 1, 2 * n do
              if car_positions[i] < min_position then
                  min_position = car_positions[i]
                  min_position_index = i
              end
          end
          if min_position_index == nil then
              break
          end
          local min_position_velocity = car_velocities[min_position_index]
          for i = 1, 2 * n do
              if i ~= min_position_index and car_positions[i] == min_position then
                  if car_velocities[i] ~= min_position_velocity then
                      collisions = collisions + 1
                  end
              end
          end
          car_positions[min_position_index] = car_positions[min_position_index] + min_position_velocity
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local cars_left_to_right = {}
    local cars_right_to_left = {}
    for i = 1, n do
      cars_left_to_right[i] = i
      cars_right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if cars_left_to_right[i] == cars_right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local collisions = 0
    local cars = {}
    for i = 1, n do
      cars[i] = {
        x = math.random(1, 100000),
        dir = 1
      }
    end
    for i = 1, n do
      cars[n + i] = {
        x = math.random(1, 100000),
        dir = -1
      }
    end
    for i = 1, n do
      for j = n + 1, 2 * n do
        if cars[i].x < cars[j].x and cars[i].dir == 1 and cars[j].dir == -1 then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local function car_race_collision_helper(n, left_to_right_cars, right_to_left_cars)
          if n == 0 then
              return 0
          else
              local left_to_right_car = left_to_right_cars[1]
              local right_to_left_car = right_to_left_cars[1]
              if left_to_right_car < right_to_left_car then
                  left_to_right_cars[1] = left_to_right_car + 1
                  return car_race_collision_helper(n, left_to_right_cars, right_to_left_cars)
              else
                  right_to_left_cars[1] = right_to_left_car - 1
                  return 1 + car_race_collision_helper(n, left_to_right_cars, right_to_left_cars)
              end
          end
      end
      local left_to_right_cars = {}
      local right_to_left_cars = {}
      for i = 1, n do
          left_to_right_cars[i] = 0
          right_to_left_cars[i] = n - 1
      end
      return car_race_collision_helper(n, left_to_right_cars, right_to_left_cars)
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(),
              v = math.random()
          }
      end
      for i = 1, n do
          cars[n + i] = {
              x = math.random(),
              v = -math.random()
          }
      end
      for i = 1, n do
          for j = n + 1, 2 * n do
              if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
          cars_left_to_right[i] = i
          cars_right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if cars_left_to_right[i] == cars_right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
          cars_left_to_right[i] = i
          cars_right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left_to_right[i] == cars_right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    local i
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    local j
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      -- TODO: implement this function
      return 0
  end
- |2-
      local function car_race_collision_helper(n, left_to_right, right_to_left)
          if n == 0 then
              return 0
          else
              return car_race_collision_helper(n - 1, left_to_right + 1, right_to_left - 1) +
                  (left_to_right == right_to_left and 1 or 0)
          end
      end
      return car_race_collision_helper(n, 0, n - 1)
  end
- |2-
      local collisions = 0
      local cars_left = {}
      local cars_right = {}
      for i = 1, n do
          cars_left[i] = i
          cars_right[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left[i] == cars_right[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local function car_race_collision_helper(n, left, right)
      if n == 0 then
        return 0
      else
        local left_car_position = left + 1
        local right_car_position = right - 1
        local left_car_collision = left_car_position - right_car_position
        local right_car_collision = right_car_position - left_car_position
        local left_car_collision_count = 0
        local right_car_collision_count = 0
        if left_car_collision <= 0 then
          left_car_collision_count = 1
        end
        if right_car_collision <= 0 then
          right_car_collision_count = 1
        end
        return left_car_collision_count + right_car_collision_count + car_race_collision_helper(n - 1, left_car_position, right_car_position)
      end
    end
    return car_race_collision_helper(n, -n, n)
  end
- |2-
      local count = 0
      local cars = {}
      for i = 1, n do
          cars[i] = true
      end
      for i = 1, n do
          for j = 1, n do
              if cars[i] and cars[j] then
                  count = count + 1
                  cars[i] = false
                  cars[j] = false
              end
          end
      end
      return count
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collision = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collision = collision + 1
        end
      end
    end
    return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(),
              v = math.random()
          }
      end
      for i = 1, n do
          cars[n + i] = {
              x = math.random(),
              v = -math.random()
          }
      end
      table.sort(cars, function(a, b) return a.x < b.x end)
      for i = 1, n * 2 - 1 do
          local a = cars[i]
          local b = cars[i + 1]
          if a.v > 0 and b.v < 0 then
              collisions = collisions + 1
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collision = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local function car_race_collision_helper(n, left_to_right, right_to_left)
          if n == 0 then
              return 0
          else
              local left_to_right_next = left_to_right + 1
              local right_to_left_next = right_to_left + 1
              local left_to_right_collision = left_to_right_next - right_to_left
              local right_to_left_collision = right_to_left_next - left_to_right
              local collision = left_to_right_collision + right_to_left_collision
              local next_collision = car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
              return collision + next_collision
          end
      end
      return car_race_collision_helper(n, 0, 0)
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    local i
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n - i + 1
    end
    local collisions = 0
    for i = 1, n do
      if left_to_right[i] > right_to_left[i] then
        collisions = collisions + 1
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- "\tlocal collisions = 0\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i == j
  then\n\t\t\t\tcollisions = collisions + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn collisions\nend"
- |2-
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local collisions = 0
    local cars_left_to_right = {}
    local cars_right_to_left = {}
    for i = 1, n do
      cars_left_to_right[i] = true
      cars_right_to_left[i] = true
    end
    while true do
      local left_to_right_collision = false
      local right_to_left_collision = false
      for i = 1, n do
        if cars_left_to_right[i] then
          if cars_right_to_left[i] then
            collisions = collisions + 1
            left_to_right_collision = true
            right_to_left_collision = true
          end
        end
      end
      if not left_to_right_collision then
        break
      end
      if not right_to_left_collision then
        break
      end
      for i = 1, n do
        if cars_left_to_right[i] then
          cars_left_to_right[i] = false
        end
        if cars_right_to_left[i] then
          cars_right_to_left[i] = false
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      -- TODO: Write this function.
      -- Hint: You can use a queue to simulate the cars moving left to right.
      -- Hint: You can use a stack to simulate the cars moving right to left.
      -- Hint: You can use a counter to count the number of collisions.
      -- Hint: You can use a queue to simulate the cars moving left to right.
      -- Hint: You can use a stack to simulate the cars moving right to left.
      -- Hint: You can use a counter to count the number of collisions.
      -- Hint: You can use a queue to simulate the cars moving left to right.
      -- Hint: You can use a stack to simulate the cars moving right to left.
      -- Hint: You can use a counter to count the number of collisions.
      -- Hint: You can use a queue to simulate the cars moving left to right.
      -- Hint: You can use a stack to simulate the cars moving right to left.
      -- Hint: You can use a counter to count the number of collisions.
      -- Hint: You can use a queue to simulate the cars moving left to right.
      -- Hint: You can use a stack to simulate the cars moving right to left.
      -- Hint: You can use a counter to count the number of collisions.
      -- Hint: You can use a queue to simulate the cars moving left to right.
      -- Hint: You can use a stack to simulate the cars moving right to left.
      -- Hint: You can use a counter to count the number of collisions.
      -- Hint: You can use a queue to simulate the cars moving left to right.
      -- Hint: You can use a stack to simulate the cars moving right to left.
      -- Hint: You can use a counter to count the number of collisions.
      -- Hint: You can use a queue to simulate the cars moving left to right.
      -- Hint: You can use a stack to simulate the cars moving right to left.
      -- Hint: You can use a counter to count the number of collisions.
      -- Hint: You can use a queue to simulate the cars moving left to right.
      -- Hint: You can use a stack to simulate the cars moving right to
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local count = 0
    for i = 1, n do
      for j = 1, n do
        if i == j then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(),
              v = math.random()
          }
      end
      for i = 1, n do
          cars[n + i] = {
              x = math.random(),
              v = -math.random()
          }
      end
      for i = 1, n do
          for j = n + 1, 2 * n do
              if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars_left = {}
      local cars_right = {}
      for i = 1, n do
          cars_left[i] = i
          cars_right[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left[i] == cars_right[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_cars = {}
    local right_cars = {}
    local collisions = 0
    for i = 1, n do
      left_cars[i] = i
      right_cars[i] = n + 1 - i
    end
    for i = 1, n do
      for j = 1, n do
        if left_cars[i] == right_cars[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
    local cars = {}
    for i = 1, n do
      cars[i] = {
        x = 0,
        dx = 1,
      }
    end
    for i = n + 1, 2 * n do
      cars[i] = {
        x = 0,
        dx = -1,
      }
    end
    local collisions = 0
    for i = 1, n do
      for j = n + 1, 2 * n do
        if cars[i].x == cars[j].x then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
          cars_left_to_right[i] = i
          cars_right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left_to_right[i] == cars_right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local n_collisions = 0
    local cars_left_to_right = {}
    local cars_right_to_left = {}
    for i = 1, n do
      cars_left_to_right[i] = true
      cars_right_to_left[i] = true
    end
    local i = 1
    local j = 1
    while i <= n and j <= n do
      if cars_left_to_right[i] and cars_right_to_left[j] then
        n_collisions = n_collisions + 1
        cars_left_to_right[i] = false
        cars_right_to_left[j] = false
      end
      i = i + 1
      j = j + 1
    end
    return n_collisions
  end
- |2-
    local function car_race_collision_helper(n, left_to_right, right_to_left)
      if n == 0 then
        return 0
      else
        local left_to_right_next = left_to_right + 1
        local right_to_left_next = right_to_left + 1
        local left_to_right_collision = left_to_right_next - right_to_left
        local right_to_left_collision = right_to_left_next - left_to_right
        local collision = left_to_right_collision + right_to_left_collision
        return collision + car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
      end
    end
    return car_race_collision_helper(n, 0, 0)
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local function car_race_collision_helper(n, left_to_right, right_to_left)
      if n == 0 then
        return 0
      else
        local left_to_right_next = left_to_right + 1
        local right_to_left_next = right_to_left + 1
        local collision = left_to_right_next == right_to_left_next and 1 or 0
        return collision + car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
      end
    end
    return car_race_collision_helper(n, 0, 0)
  end
- |2-
      local n = n or 0
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local function car_race_collision_helper(n, left_to_right, right_to_left)
      if n == 0 then
        return 0
      else
        local left_to_right_next = left_to_right + 1
        local right_to_left_next = right_to_left + 1
        local left_to_right_collision = left_to_right_next - right_to_left
        local right_to_left_collision = right_to_left_next - left_to_right
        local collision = left_to_right_collision + right_to_left_collision
        return collision + car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
      end
    end
    return car_race_collision_helper(n, 0, 0)
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local collisions = 0
    local cars = {}
    for i = 1, n do
      cars[i] = {x = i, dir = 1}
    end
    for i = n + 1, 2 * n do
      cars[i] = {x = 2 * n - i + 1, dir = -1}
    end
    while true do
      local moved = false
      for i = 1, 2 * n do
        local car = cars[i]
        if car.x ~= 0 and car.x ~= 2 * n + 1 then
          car.x = car.x + car.dir
          moved = true
        end
      end
      if not moved then
        break
      end
      for i = 1, 2 * n do
        local car = cars[i]
        if car.x == 0 or car.x == 2 * n + 1 then
          for j = 1, 2 * n do
            local other = cars[j]
            if other.x == car.x then
              collisions = collisions + 1
            end
          end
        end
      end
    end
    return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              pos = math.random(1, 1000000),
              dir = 1
          }
      end
      for i = 1, n do
          cars[i + n] = {
              pos = math.random(1, 1000000),
              dir = -1
          }
      end
      table.sort(cars, function(a, b) return a.pos < b.pos end)
      for i = 1, n * 2 do
          for j = i + 1, n * 2 do
              if cars[i].dir == 1 and cars[j].dir == -1 then
                  if cars[i].pos < cars[j].pos then
                      collisions = collisions + 1
                  end
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collision = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local n_collisions = 0
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          n_collisions = n_collisions + 1
        end
      end
    end
    return n_collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    local collisions = 0
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n - i + 1
    end
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              pos = 0,
              dir = 1,
          }
      end
      for i = 1, n do
          cars[i + n] = {
              pos = 0,
              dir = -1,
          }
      end
      for i = 1, 2 * n do
          for j = i + 1, 2 * n do
              if cars[i].dir ~= cars[j].dir then
                  if cars[i].pos == cars[j].pos then
                      collisions = collisions + 1
                  end
              end
          end
          cars[i].pos = cars[i].pos + cars[i].dir
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collision = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collision = collision + 1
        end
      end
    end
    return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local n = n or 0
    local n_collisions = 0
    local cars_left_to_right = {}
    local cars_right_to_left = {}
    for i = 1, n do
      cars_left_to_right[i] = i
      cars_right_to_left[i] = i
    end
    for i = 1, n do
      for j = 1, n do
        if cars_left_to_right[i] == cars_right_to_left[j] then
          n_collisions = n_collisions + 1
        end
      end
    end
    return n_collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(),
              v = math.random()
          }
      end
      for i = 1, n do
          cars[n + i] = {
              x = math.random(),
              v = -math.random()
          }
      end
      for i = 1, n do
          for j = n + 1, 2 * n do
              if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      local i
      for i = 1, n do
          cars[i] = {
              x = math.random(0, 1000000),
              v = math.random(1, 1000000)
          }
      end
      for i = 1, n do
          cars[i + n] = {
              x = math.random(0, 1000000),
              v = -math.random(1, 1000000)
          }
      end
      table.sort(cars, function(a, b) return a.x < b.x end)
      for i = 1, n * 2 - 1 do
          if cars[i].v > 0 and cars[i + 1].v < 0 then
              collisions = collisions + 1
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              left = true,
              pos = i
          }
      end
      for i = n + 1, 2 * n do
          cars[i] = {
              left = false,
              pos = i
          }
      end
      while true do
          local done = true
          for i = 1, 2 * n do
              local car = cars[i]
              if car.left then
                  car.pos = car.pos + 1
              else
                  car.pos = car.pos - 1
              end
              if car.pos == 0 or car.pos == 2 * n + 1 then
                  car.pos = nil
              else
                  done = false
              end
          end
          if done then
              break
          end
          for i = 1, 2 * n do
              local car = cars[i]
              if car.pos then
                  for j = i + 1, 2 * n do
                      local other = cars[j]
                      if other.pos and car.pos == other.pos then
                          collisions = collisions + 1
                      end
                  end
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local function car_race_collision_helper(n, left_to_right, right_to_left)
          if n == 0 then
              return 0
          else
              local left_to_right_collision = car_race_collision_helper(n - 1, left_to_right + 1, right_to_left)
              local right_to_left_collision = car_race_collision_helper(n - 1, left_to_right, right_to_left + 1)
              return left_to_right_collision + right_to_left_collision
          end
      end
      return car_race_collision_helper(n, 0, 0)
  end
- |2-
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if i == j then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local collisions = 0
    local cars_left = {}
    local cars_right = {}
    for i = 1, n do
      cars_left[i] = i
      cars_right[i] = i
    end
    for i = 1, n do
      for j = 1, n do
        if cars_left[i] == cars_right[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local collisions = 0
    local cars_left_to_right = {}
    local cars_right_to_left = {}
    for i = 1, n do
      cars_left_to_right[i] = i
      cars_right_to_left[i] = n - i + 1
    end
    for i = 1, n do
      for j = 1, n do
        if cars_left_to_right[i] == cars_right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
    local left_to_right_cars = {}
    local right_to_left_cars = {}
    for i = 1, n do
      left_to_right_cars[i] = i
      right_to_left_cars[i] = i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right_cars[i] == right_to_left_cars[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local collisions = 0
    local cars_left_to_right = {}
    local cars_right_to_left = {}
    for i = 1, n do
      cars_left_to_right[i] = i
      cars_right_to_left[i] = n + 1 - i
    end
    for i = 1, n do
      for j = 1, n do
        if cars_left_to_right[i] == cars_right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local n = n or 0
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random() * 1000000,
              v = math.random() * 1000000,
              dir = 1
          }
      end
      for i = 1, n do
          cars[i + n] = {
              x = math.random() * 1000000,
              v = math.random() * 1000000,
              dir = -1
          }
      end
      table.sort(cars, function(a, b) return a.x < b.x end)
      for i = 1, n * 2 do
          for j = i + 1, n * 2 do
              if cars[i].dir ~= cars[j].dir then
                  local dx = cars[j].x - cars[i].x
                  local dv = cars[j].v - cars[i].v
                  if dv > 0 then
                      local t = dx / dv
                      if t > 0 then
                          collisions = collisions + 1
                      end
                  end
              end
          end
      end
      return collisions
  end
- |2-
      local cars_left = {}
      local cars_right = {}
      local collisions = 0
      for i = 1, n do
          cars_left[i] = i
          cars_right[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left[i] == cars_right[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local collisions = 0
    local cars = {}
    for i = 1, n do
      cars[i] = {
        x = math.random() * 1000000,
        v = math.random() * 100,
        dir = 1,
      }
    end
    for i = n + 1, 2 * n do
      cars[i] = {
        x = math.random() * 1000000,
        v = math.random() * 100,
        dir = -1,
      }
    end
    for i = 1, 2 * n do
      for j = i + 1, 2 * n do
        local c1 = cars[i]
        local c2 = cars[j]
        if c1.dir ~= c2.dir then
          local d = c1.x - c2.x
          local v = c1.v - c2.v
          if d * v < 0 then
            local t = -d / v
            if t > 0 then
              collisions = collisions + 1
            end
          end
        end
      end
    end
    return collisions
  end
- |2-
      local collisions = 0
      local cars_left = {}
      local cars_right = {}
      for i = 1, n do
          cars_left[i] = i
          cars_right[i] = i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left[i] == cars_right[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n - i + 1
    end
    local collision = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collision = collision + 1
        end
      end
    end
    return collision
  end
- |2-
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if i == j then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      -- The cars are numbered from 1 to n.  We use a table to keep track of the
      -- cars that are moving left to right.  The key is the car number, and the
      -- value is the car's position.
      local left_to_right = {}
      for i = 1, n do
          left_to_right[i] = i
      end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local count = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars_left = {}
      local cars_right = {}
      for i = 1, n do
          cars_left[i] = i
          cars_right[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left[i] == cars_right[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
    local n = n or 0
    local collisions = 0
    local cars = {}
    for i = 1, n do
      cars[i] = {
        x = math.random(0, 100),
        y = math.random(0, 100),
        vx = math.random(0, 100),
        vy = math.random(0, 100),
      }
    end
    for i = 1, n do
      for j = 1, n do
        if cars[i].vx > 0 and cars[j].vx < 0 then
          if cars[i].x < cars[j].x then
            collisions = collisions + 1
          end
        end
      end
    end
    return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = i
    end
    local collision = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collision = collision + 1
        end
      end
    end
    return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collision = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- "    local collisions = 0\n    local cars = {}\n    local cars_left = {}\n    local
  cars_right = {}\n    for i = 1, n do\n        cars[i] = {\n            x = math.random(),\n
  \           v = math.random(),\n            direction = math.random() > 0.5 and
  \"left\" or \"right\"\n        }\n        if cars[i].direction == \"left\" then\n
  \           cars_left[i] = cars[i]\n        else\n            cars_right[i] = cars[i]\n
  \       end\n    end\n    local time = 0\n    while #cars_left > 0 and #cars_right
  > 0 do\n        local min_time = math.huge\n        local min_time_car = nil\n        for
  _, car in pairs(cars_left) do\n            local t = (1 - car.x) / car.v\n            if
  t < min_time then\n                min_time = t\n                min_time_car =
  car\n            end\n        end\n        for _, car in pairs(cars_right) do\n
  \           local t = car.x / car.v\n            if t < min_time then\n                min_time
  = t\n                min_time_car = car\n            end\n        end\n        time
  = time + min_time\n        min_time_car.x = min_time_car.x + min_time * min_time_car.v\n
  \       if min_time_car.x >= 1 then\n            cars_left[min_time_car] = nil\n
  \       elseif min_time_car.x <= 0 then\n            cars_right[min_time_car] =
  nil\n        end\n        for _, car in pairs(cars_left) do\n            car.x =
  car.x + min_time * car.v\n        end\n        for _, car in pairs(cars_right) do\n
  \           car.x = car.x - min_time * car.v\n        end\n        for _, car in
  pairs(cars_left) do\n            if car.x >= 1 then\n                cars_left[car]
  = nil\n            end\n        end\n        for _, car in pairs(cars_right) do\n
  \          "
- |2-
      local left_to_right_cars = {}
      local right_to_left_cars = {}
      for i = 1, n do
          left_to_right_cars[i] = i
          right_to_left_cars[i] = i
      end
      local collisions = 0
      local i = 1
      local j = 1
      while i <= n and j <= n do
          if left_to_right_cars[i] < right_to_left_cars[j] then
              i = i + 1
          elseif left_to_right_cars[i] > right_to_left_cars[j] then
              j = j + 1
          else
              collisions = collisions + 1
              i = i + 1
              j = j + 1
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
          cars_left_to_right[i] = i
          cars_right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left_to_right[i] == cars_right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(),
              v = math.random()
          }
      end
      for i = 1, n do
          cars[n + i] = {
              x = math.random(),
              v = -math.random()
          }
      end
      for i = 1, n do
          for j = n + 1, 2 * n do
              if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local n_collisions = 0
    for i = 1, n do
      for j = 1, n do
        if i == j then
          n_collisions = n_collisions + 1
        end
      end
    end
    return n_collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local collisions = 0
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if i == j then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    local collisions = 0
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local function car_race_collision_helper(n, left_to_right, right_to_left)
          if n == 0 then
              return 0
          else
              local l = left_to_right[n]
              local r = right_to_left[n]
              if l < r then
                  return car_race_collision_helper(n - 1, left_to_right, right_to_left)
              else
                  return 1 + car_race_collision_helper(n - 1, left_to_right, right_to_left)
              end
          end
      end
      return car_race_collision_helper(n, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {10, 9, 8, 7, 6, 5, 4, 3, 2, 1})
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              x = math.random(),
              v = math.random()
          }
      end
      for i = 1, n do
          cars[n + i] = {
              x = math.random(),
              v = -math.random()
          }
      end
      table.sort(cars, function(a, b) return a.x < b.x end)
      for i = 1, n do
          for j = i + 1, n + i do
              if cars[i].v > 0 and cars[j].v < 0 then
                  local t = (cars[i].x - cars[j].x) / (cars[j].v - cars[i].v)
                  if t > 0 then
                      collisions = collisions + 1
                  end
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local i = 1
    local j = 1
    local count = 0
    while i <= n and j <= n do
      if left_to_right[i] < right_to_left[j] then
        i = i + 1
      elseif left_to_right[i] > right_to_left[j] then
        j = j + 1
      else
        count = count + 1
        i = i + 1
        j = j + 1
      end
    end
    return count
  end
- |2-
    local left_to_right = {}
    local right_to_left = {}
    for i = 1, n do
      left_to_right[i] = i
      right_to_left[i] = n + 1 - i
    end
    local collisions = 0
    for i = 1, n do
      for j = 1, n do
        if left_to_right[i] == right_to_left[j] then
          collisions = collisions + 1
        end
      end
    end
    return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
- |2-
      local collisions = 0
      local cars_left = {}
      local cars_right = {}
      for i = 1, n do
          cars_left[i] = i
          cars_right[i] = n + 1 - i
      end
      for i = 1, n do
          for j = 1, n do
              if cars_left[i] == cars_right[j] then
                  collisions = collisions + 1
              end
          end
      end
      return collisions
  end
- |2-
      local collisions = 0
      local cars = {}
      for i = 1, n do
          cars[i] = {
              pos = math.random(1, 1000000),
              dir = 1,
          }
      end
      for i = 1, n do
          cars[i + n] = {
              pos = math.random(1, 1000000),
              dir = -1,
          }
      end
      for i = 1, n do
          for j = 1, n do
              if cars[i].dir == 1 and cars[j + n].dir == -1 then
                  if cars[i].pos > cars[j + n].pos then
                      collisions = collisions + 1
                  end
              end
          end
      end
      return collisions
  end
- |2-
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
          left_to_right[i] = i
          right_to_left[i] = n - i + 1
      end
      local collision = 0
      for i = 1, n do
          for j = 1, n do
              if left_to_right[i] == right_to_left[j] then
                  collision = collision + 1
              end
          end
      end
      return collision
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
