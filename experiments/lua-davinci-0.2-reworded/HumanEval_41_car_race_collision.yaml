name: HumanEval_41_car_race_collision
language: lua
prompt: "-- Imagine a road that's a perfectly straight infinitely long line.\n-- n\
  \ cars are driving left to right;  simultaneously, a different set of n cars\n--\
  \ are driving right to left.   The two sets of cars start out being very far from\n\
  -- each other.  All cars move in the same speed.  Two cars are said to collide\n\
  -- when a car that's moving left to right hits a car that's moving right to left.\n\
  -- However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n-- in their trajectory as if they did not collide.\n-- This function outputs\
  \ the number of such collisions.\nlocal function car_race_collision(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = car_race_collision\n\
  \    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 9)\n  \
  \  lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n  \
  \  lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local left_to_right = {}\n  local right_to_left = {}\n  for i = 1,\
    \ n do\n    left_to_right[i] = i\n    right_to_left[i] = n - i + 1\n  end\n  local\
    \ count = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        count = count + 1\n      end\n    end\n  end\n\
    \  return count\nend", "    local collisions = 0\n    local cars = {}\n    for\
    \ i = 1, n do\n        cars[i] = {\n            x = math.random(),\n         \
    \   v = math.random()\n        }\n    end\n    for i = 1, n do\n        cars[n\
    \ + i] = {\n            x = math.random(),\n            v = -math.random()\n \
    \       }\n    end\n    table.sort(cars, function(a, b) return a.x < b.x end)\n\
    \    for i = 1, n do\n        for j = n + 1, 2 * n do\n            if cars[i].x\
    \ < cars[j].x then\n                break\n            end\n            if cars[i].x\
    \ + cars[i].v > cars[j].x + cars[j].v then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   local n = n or 0\n    local n_collisions = 0\n    local n_cars_left = n\n\
    \    local n_cars_right = n\n    local cars_left = {}\n    local cars_right =\
    \ {}\n    local i = 1\n    while i <= n do\n        cars_left[i] = i\n       \
    \ cars_right[i] = n - i + 1\n        i = i + 1\n    end\n    while n_cars_left\
    \ > 0 and n_cars_right > 0 do\n        local car_left = cars_left[n_cars_left]\n\
    \        local car_right = cars_right[n_cars_right]\n        if car_left == car_right\
    \ then\n            n_collisions = n_collisions + 1\n            n_cars_left =\
    \ n_cars_left - 1\n            n_cars_right = n_cars_right - 1\n        elseif\
    \ car_left < car_right then\n            n_cars_left = n_cars_left - 1\n     \
    \   else\n            n_cars_right = n_cars_right - 1\n        end\n    end\n\
    \    return n_collisions\nend", "    local n = n or 0\n    local count = 0\n \
    \   for i = 1, n do\n        for j = n, 1, -1 do\n            if i == j then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \  local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n      \
    \      if i == j then\n                collisions = collisions + 1\n         \
    \   end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i + 1\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  local collisions = 0\n  for i = 1, n do\n\
    \    left_to_right[i] = i\n    right_to_left[i] = n - i + 1\n  end\n  for i =\
    \ 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local n = n or 0\n    local n_collisions = 0\n    local\
    \ n_cars_left = n\n    local n_cars_right = n\n    local cars_left = {}\n    local\
    \ cars_right = {}\n    local i = 1\n    while i <= n do\n        cars_left[i]\
    \ = i\n        cars_right[i] = n + 1 - i\n        i = i + 1\n    end\n    while\
    \ n_cars_left > 0 and n_cars_right > 0 do\n        local car_left = cars_left[n_cars_left]\n\
    \        local car_right = cars_right[n_cars_right]\n        if car_left < car_right\
    \ then\n            n_cars_left = n_cars_left - 1\n        elseif car_left > car_right\
    \ then\n            n_cars_right = n_cars_right - 1\n        else\n          \
    \  n_cars_left = n_cars_left - 1\n            n_cars_right = n_cars_right - 1\n\
    \            n_collisions = n_collisions + 1\n        end\n    end\n    return\
    \ n_collisions\nend", "    local collisions = 0\n    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n - i + 1\n    end\n    for i = 1, n do\n    \
    \    for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local collisions = 0\n    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local collisions = 0\n  local cars_left\
    \ = {}\n  local cars_right = {}\n  for i = 1, n do\n    cars_left[i] = i\n   \
    \ cars_right[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n \
    \     if cars_left[i] == cars_right[j] then\n        collisions = collisions +\
    \ 1\n      end\n    end\n  end\n  return collisions\nend", "    local collisions\
    \ = 0\n    local cars = {}\n    local i = 1\n    while i <= n do\n        cars[i]\
    \ = i\n        i = i + 1\n    end\n    i = 1\n    while i <= n do\n        local\
    \ j = i + 1\n        while j <= n do\n            if cars[i] == cars[j] then\n\
    \                collisions = collisions + 1\n            end\n            j =\
    \ j + 1\n        end\n        i = i + 1\n    end\n    return collisions\nend",
  "    local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n    end\n\
    \    local count = 0\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if left_to_right[i] == right_to_left[j] then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "  local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n\
    \ do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  local\
    \ collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local left_to_right = {}\n   \
    \ local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n   \
    \ for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] ==\
    \ right_to_left[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        for j = 1, n do\n            if i == j then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "   local n_collisions = 0\n   for i = 1, n do\n      for\
    \ j = 1, n do\n         if i == j then\n            n_collisions = n_collisions\
    \ + 1\n         end\n      end\n   end\n   return n_collisions\nend", "  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for\
    \ i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local count = 0\n    for i = 1, n do\n        for j =\
    \ 1, n do\n            if i == j then\n                count = count + 1\n   \
    \         end\n        end\n    end\n    return count\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n - i + 1\n\
    \  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n     \
    \ if left_to_right[i] == right_to_left[j] then\n        collisions = collisions\
    \ + 1\n      end\n    end\n  end\n  return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i + 1\n    end\n    local count = 0\n  \
    \  for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] ==\
    \ right_to_left[j] then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n - i + 1\n    end\n    local count = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  local left_to_right = {}\n  local right_to_left =\
    \ {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n +\
    \ 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n\
    \      if left_to_right[i] == right_to_left[j] then\n        collisions = collisions\
    \ + 1\n      end\n    end\n  end\n  return collisions\nend", "  local count =\
    \ 0\n  for i = 1, n do\n    for j = 1, n do\n      if i == j then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    local collision = 0\n    for i = 1,\
    \ n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n \
    \   end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local cars\
    \ = {}\n    for i = 1, n do\n        cars[i] = {\n            x = math.random(),\n\
    \            y = math.random(),\n            vx = math.random(),\n           \
    \ vy = math.random(),\n        }\n    end\n    local collisions = 0\n    for i\
    \ = 1, n do\n        for j = i + 1, n do\n            local c1 = cars[i]\n   \
    \         local c2 = cars[j]\n            local dx = c1.x - c2.x\n           \
    \ local dy = c1.y - c2.y\n            local dvx = c1.vx - c2.vx\n            local\
    \ dvy = c1.vy - c2.vy\n            local dvdr = dx * dvx + dy * dvy\n        \
    \    if dvdr < 0 then\n                local dvdv = dvx * dvx + dvy * dvy\n  \
    \              local drdr = dx * dx + dy * dy\n                local sigma = 0.01\n\
    \                local d = (dvdr * dvdr - dvdv * (drdr - sigma * sigma))\n   \
    \             if d < 0 then\n                    collisions = collisions + 1\n\
    \                end\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local function car_race_collision_helper(n, i, j)\n        if i ==\
    \ n or j == n then\n            return 0\n        else\n            return car_race_collision_helper(n,\
    \ i + 1, j + 1) + 1\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local function car_race_collision_helper(n, left_to_right,\
    \ right_to_left)\n        if n == 0 then\n            return 0\n        else\n\
    \            local left_to_right_next = left_to_right + 1\n            local right_to_left_next\
    \ = right_to_left + 1\n            local left_to_right_collision = left_to_right_next\
    \ - right_to_left\n            local right_to_left_collision = right_to_left_next\
    \ - left_to_right\n            local left_to_right_collision_count = 0\n     \
    \       local right_to_left_collision_count = 0\n            if left_to_right_collision\
    \ <= 0 then\n                left_to_right_collision_count = 1\n            end\n\
    \            if right_to_left_collision <= 0 then\n                right_to_left_collision_count\
    \ = 1\n            end\n            return left_to_right_collision_count + right_to_left_collision_count\
    \ +\n                car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)\n\
    \        end\n    end\n    return car_race_collision_helper(n, 0, 0)\nend", " \
    \   local collisions = 0\n    local left_to_right_cars = {}\n    local right_to_left_cars\
    \ = {}\n    for i = 1, n do\n        left_to_right_cars[i] = i\n        right_to_left_cars[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right_cars[i] == right_to_left_cars[j] then\n               \
    \ collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "  local n = n or 0\n  local n_collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = i\n  end\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if cars_left_to_right[i] == cars_right_to_left[j] then\n       \
    \ n_collisions = n_collisions + 1\n      end\n    end\n  end\n  return n_collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local collisions = 0\n    local cars = {}\n    for i\
    \ = 1, n do\n        cars[i] = {\n            x = math.random() * 1000000,\n \
    \           v = math.random() * 1000000,\n            dir = 1\n        }\n   \
    \ end\n    for i = 1, n do\n        cars[i + n] = {\n            x = math.random()\
    \ * 1000000,\n            v = math.random() * 1000000,\n            dir = -1\n\
    \        }\n    end\n    table.sort(cars, function(a, b) return a.x < b.x end)\n\
    \    for i = 1, n * 2 do\n        for j = i + 1, n * 2 do\n            if cars[i].dir\
    \ ~= cars[j].dir then\n                local dx = cars[j].x - cars[i].x\n    \
    \            local dv = cars[j].v - cars[i].v\n                if dv > 0 then\n\
    \                    collisions = collisions + 1\n                end\n      \
    \      end\n        end\n    end\n    return collisions\nend", "    local count\
    \ = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n       \
    \     x = math.random(),\n            v = math.random()\n        }\n    end\n\
    \    for i = 1, n do\n        cars[n + i] = {\n            x = math.random(),\n\
    \            v = -math.random()\n        }\n    end\n    for i = 1, n do\n   \
    \     for j = n + 1, 2 * n do\n            if cars[i].x < cars[j].x and cars[i].v\
    \ > cars[j].v then\n                count = count + 1\n            end\n     \
    \   end\n    end\n    return count\nend", "    local n1 = n\n    local n2 = n\n\
    \    local count = 0\n    while n1 > 0 and n2 > 0 do\n        if n1 == n2 then\n\
    \            count = count + n1\n            n1 = n1 - 1\n            n2 = n2\
    \ - 1\n        elseif n1 > n2 then\n            n1 = n1 - 1\n        else\n  \
    \          n2 = n2 - 1\n        end\n    end\n    return count\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n    end\n   \
    \ local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local collisions = 0\n    local cars_left_to_right = {}\n    local\
    \ cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  return n * (n - 1) / 2\nend",
  "    local left_to_right = {}\n    local right_to_left = {}\n    local collisions\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "  local left_to_right = {}\n  local right_to_left = {}\n  local collisions\
    \ = 0\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = i\n\
    \  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n\
    \  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n     \
    \ if left_to_right[i] == right_to_left[j] then\n        collisions = collisions\
    \ + 1\n      end\n    end\n  end\n  return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local left_cars\
    \ = {}\n  local right_cars = {}\n  for i = 1, n do\n    left_cars[i] = i\n   \
    \ right_cars[i] = n + i\n  end\n  local collisions = 0\n  local i = 1\n  local\
    \ j = 1\n  while i <= n and j <= n do\n    if left_cars[i] < right_cars[j] then\n\
    \      collisions = collisions + j - 1\n      i = i + 1\n    else\n      j = j\
    \ + 1\n    end\n  end\n  collisions = collisions + (n - i + 1) * j\n  return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    local collisions\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \        if n == 0 then\n            return 0\n        else\n            local\
    \ left_to_right_next = left_to_right + 1\n            local right_to_left_next\
    \ = right_to_left + 1\n            local left_to_right_collision = left_to_right_next\
    \ - right_to_left\n            local right_to_left_collision = right_to_left_next\
    \ - left_to_right\n            local left_to_right_collision_next = left_to_right_collision\
    \ > 0 and left_to_right_collision or 0\n            local right_to_left_collision_next\
    \ = right_to_left_collision > 0 and right_to_left_collision or 0\n           \
    \ return left_to_right_collision_next + right_to_left_collision_next + car_race_collision_helper(n\
    \ - 1, left_to_right_next, right_to_left_next)\n        end\n    end\n    return\
    \ car_race_collision_helper(n, 0, 0)\nend", "    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if i == j then\n         \
    \       collisions = collisions + 1\n            end\n        end\n    end\n \
    \   return collisions\nend", "  local collisions = 0\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if i == j then\n        collisions = collisions + 1\n   \
    \   end\n    end\n  end\n  return collisions\nend", "    local left_to_right =\
    \ {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n       \
    \     x = math.random(0, 1000000),\n            dir = 1\n        }\n    end\n\
    \    for i = 1, n do\n        cars[i + n] = {\n            x = math.random(0,\
    \ 1000000),\n            dir = -1\n        }\n    end\n    table.sort(cars, function(a,\
    \ b)\n        return a.x < b.x\n    end)\n    local i = 1\n    while i <= 2 *\
    \ n do\n        local j = i + 1\n        while j <= 2 * n and cars[i].x + cars[i].dir\
    \ * cars[j].x >= 0 do\n            if cars[i].dir ~= cars[j].dir then\n      \
    \          collisions = collisions + 1\n            end\n            j = j + 1\n\
    \        end\n        i = j\n    end\n    return collisions\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    local collisions = 0\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if left_to_right[i] == right_to_left[j] then\n                collisions =\
    \ collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local collisions = 0\n    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local i = 0\n    local j = 0\n    local count = 0\n    while i < n\
    \ and j < n do\n        if i == j then\n            count = count + 1\n      \
    \      i = i + 1\n            j = j + 1\n        elseif i < j then\n         \
    \   i = i + 1\n        else\n            j = j + 1\n        end\n    end\n   \
    \ return count\nend", "  local count = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if i == j then\n        count = count + 1\n      end\n    end\n  end\n\
    \  return count\nend", "  local function car_race_collision_helper(n, left_to_right,\
    \ right_to_left)\n    if n == 0 then\n      return 0\n    else\n      local left_to_right_head\
    \ = left_to_right[1]\n      local right_to_left_head = right_to_left[1]\n    \
    \  if left_to_right_head < right_to_left_head then\n        return car_race_collision_helper(n\
    \ - 1,\n                                         left_to_right:sub(2),\n     \
    \                                    right_to_left)\n      else\n        return\
    \ 1 + car_race_collision_helper(n - 1,\n                                     \
    \        left_to_right:sub(2),\n                                             right_to_left:sub(2))\n\
    \      end\n    end\n  end\n  return car_race_collision_helper(n,\n          \
    \                         torch.linspace(0, n - 1, n),\n                     \
    \              torch.linspace(n - 1, 0, n))\nend", "  local n = n or 0\n  local\
    \ collisions = 0\n  local left_to_right = {}\n  local right_to_left = {}\n  for\
    \ i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n - i + 1\n  end\n\
    \  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if i == j then\n        collisions = collisions + 1\n      end\n\
    \    end\n  end\n  return collisions\nend", "    local collisions = 0\n    local\
    \ car_positions = {}\n    local car_velocities = {}\n    for i = 1, n do\n   \
    \     car_positions[i] = 0\n        car_velocities[i] = 1\n    end\n    for i\
    \ = 1, n do\n        car_positions[i + n] = math.huge\n        car_velocities[i\
    \ + n] = -1\n    end\n    for _ = 1, math.huge do\n        local min_position\
    \ = math.huge\n        local min_position_index = nil\n        for i = 1, 2 *\
    \ n do\n            if car_positions[i] < min_position then\n                min_position\
    \ = car_positions[i]\n                min_position_index = i\n            end\n\
    \        end\n        if min_position_index == nil then\n            break\n \
    \       end\n        local min_position_velocity = car_velocities[min_position_index]\n\
    \        for i = 1, 2 * n do\n            if i ~= min_position_index and car_positions[i]\
    \ == min_position then\n                if car_velocities[i] ~= min_position_velocity\
    \ then\n                    collisions = collisions + 1\n                end\n\
    \            end\n        end\n        car_positions[min_position_index] = car_positions[min_position_index]\
    \ + min_position_velocity\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local left_to_right = {}\n \
    \   local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n\
    \  for i = 1, n do\n    for j = 1, n do\n      if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local collisions = 0\n  local cars = {}\n  for\
    \ i = 1, n do\n    cars[i] = {\n      x = math.random(1, 100000),\n      dir =\
    \ 1\n    }\n  end\n  for i = 1, n do\n    cars[n + i] = {\n      x = math.random(1,\
    \ 100000),\n      dir = -1\n    }\n  end\n  for i = 1, n do\n    for j = n + 1,\
    \ 2 * n do\n      if cars[i].x < cars[j].x and cars[i].dir == 1 and cars[j].dir\
    \ == -1 then\n        collisions = collisions + 1\n      end\n    end\n  end\n\
    \  return collisions\nend", "    local function car_race_collision_helper(n, left_to_right_cars,\
    \ right_to_left_cars)\n        if n == 0 then\n            return 0\n        else\n\
    \            local left_to_right_car = left_to_right_cars[1]\n            local\
    \ right_to_left_car = right_to_left_cars[1]\n            if left_to_right_car\
    \ < right_to_left_car then\n                left_to_right_cars[1] = left_to_right_car\
    \ + 1\n                return car_race_collision_helper(n, left_to_right_cars,\
    \ right_to_left_cars)\n            else\n                right_to_left_cars[1]\
    \ = right_to_left_car - 1\n                return 1 + car_race_collision_helper(n,\
    \ left_to_right_cars, right_to_left_cars)\n            end\n        end\n    end\n\
    \    local left_to_right_cars = {}\n    local right_to_left_cars = {}\n    for\
    \ i = 1, n do\n        left_to_right_cars[i] = 0\n        right_to_left_cars[i]\
    \ = n - 1\n    end\n    return car_race_collision_helper(n, left_to_right_cars,\
    \ right_to_left_cars)\nend", "    local collisions = 0\n    local cars = {}\n\
    \    for i = 1, n do\n        cars[i] = {\n            x = math.random(),\n  \
    \          v = math.random()\n        }\n    end\n    for i = 1, n do\n      \
    \  cars[n + i] = {\n            x = math.random(),\n            v = -math.random()\n\
    \        }\n    end\n    for i = 1, n do\n        for j = n + 1, 2 * n do\n  \
    \          if cars[i].x < cars[j].x and cars[i].v > cars[j].v then\n         \
    \       collisions = collisions + 1\n            end\n        end\n    end\n \
    \   return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    local collisions = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local cars_left_to_right = {}\n\
    \    local cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n - i + 1\n    end\n    local collisions\
    \ = 0\n    for i = 1, n do\n        for j = 1, n do\n            if cars_left_to_right[i]\
    \ == cars_right_to_left[j] then\n                collisions = collisions + 1\n\
    \            end\n        end\n    end\n    return collisions\nend", "    local\
    \ collisions = 0\n    local cars_left_to_right = {}\n    local cars_right_to_left\
    \ = {}\n    for i = 1, n do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left_to_right[i] == cars_right_to_left[j] then\n               \
    \ collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local collisions = 0\n    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n    \
    \    for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  local i\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collisions = 0\n  local j\n  for i = 1, n do\n \
    \   for j = 1, n do\n      if left_to_right[i] == right_to_left[j] then\n    \
    \    collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "    -- TODO: implement this function\n    return 0\nend", "    local function\
    \ car_race_collision_helper(n, left_to_right, right_to_left)\n        if n ==\
    \ 0 then\n            return 0\n        else\n            return car_race_collision_helper(n\
    \ - 1, left_to_right + 1, right_to_left - 1) +\n                (left_to_right\
    \ == right_to_left and 1 or 0)\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, n - 1)\nend", "    local collisions = 0\n    local cars_left = {}\n    local\
    \ cars_right = {}\n    for i = 1, n do\n        cars_left[i] = i\n        cars_right[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left[i] == cars_right[j] then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n    end\n\
    \    local count = 0\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if left_to_right[i] == right_to_left[j] then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "  local function car_race_collision_helper(n, left, right)\n    if n ==\
    \ 0 then\n      return 0\n    else\n      local left_car_position = left + 1\n\
    \      local right_car_position = right - 1\n      local left_car_collision =\
    \ left_car_position - right_car_position\n      local right_car_collision = right_car_position\
    \ - left_car_position\n      local left_car_collision_count = 0\n      local right_car_collision_count\
    \ = 0\n      if left_car_collision <= 0 then\n        left_car_collision_count\
    \ = 1\n      end\n      if right_car_collision <= 0 then\n        right_car_collision_count\
    \ = 1\n      end\n      return left_car_collision_count + right_car_collision_count\
    \ + car_race_collision_helper(n - 1, left_car_position, right_car_position)\n\
    \    end\n  end\n  return car_race_collision_helper(n, -n, n)\nend", "    local\
    \ count = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = true\n\
    \    end\n    for i = 1, n do\n        for j = 1, n do\n            if cars[i]\
    \ and cars[j] then\n                count = count + 1\n                cars[i]\
    \ = false\n                cars[j] = false\n            end\n        end\n   \
    \ end\n    return count\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collision = 0\n  for i = 1, n do\n    for j = 1, n do\n\
    \      if left_to_right[i] == right_to_left[j] then\n        collision = collision\
    \ + 1\n      end\n    end\n  end\n  return collision\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i + 1\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local collisions\
    \ = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n       \
    \     x = math.random(),\n            v = math.random()\n        }\n    end\n\
    \    for i = 1, n do\n        cars[n + i] = {\n            x = math.random(),\n\
    \            v = -math.random()\n        }\n    end\n    table.sort(cars, function(a,\
    \ b) return a.x < b.x end)\n    for i = 1, n * 2 - 1 do\n        local a = cars[i]\n\
    \        local b = cars[i + 1]\n        if a.v > 0 and b.v < 0 then\n        \
    \    collisions = collisions + 1\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    local collision = 0\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "    local function car_race_collision_helper(n,\
    \ left_to_right, right_to_left)\n        if n == 0 then\n            return 0\n\
    \        else\n            local left_to_right_next = left_to_right + 1\n    \
    \        local right_to_left_next = right_to_left + 1\n            local left_to_right_collision\
    \ = left_to_right_next - right_to_left\n            local right_to_left_collision\
    \ = right_to_left_next - left_to_right\n            local collision = left_to_right_collision\
    \ + right_to_left_collision\n            local next_collision = car_race_collision_helper(n\
    \ - 1, left_to_right_next, right_to_left_next)\n            return collision +\
    \ next_collision\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, 0)\nend", "  local left_to_right = {}\n  local right_to_left = {}\n  local\
    \ i\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n - i\
    \ + 1\n  end\n  local collisions = 0\n  for i = 1, n do\n    if left_to_right[i]\
    \ > right_to_left[i] then\n      collisions = collisions + 1\n    end\n  end\n\
    \  return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    local collision = 0\n    for i = 1, n do\n       \
    \ for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collision = collision + 1\n            end\n        end\n   \
    \ end\n    return collision\nend", "\tlocal collisions = 0\n\tfor i = 1, n do\n\
    \t\tfor j = 1, n do\n\t\t\tif i == j then\n\t\t\t\tcollisions = collisions + 1\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn collisions\nend", "    local collisions =\
    \ 0\n    for i = 1, n do\n        for j = 1, n do\n            if i == j then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    local collisions = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = true\n    cars_right_to_left[i] = true\n  end\n  while true do\n    local\
    \ left_to_right_collision = false\n    local right_to_left_collision = false\n\
    \    for i = 1, n do\n      if cars_left_to_right[i] then\n        if cars_right_to_left[i]\
    \ then\n          collisions = collisions + 1\n          left_to_right_collision\
    \ = true\n          right_to_left_collision = true\n        end\n      end\n \
    \   end\n    if not left_to_right_collision then\n      break\n    end\n    if\
    \ not right_to_left_collision then\n      break\n    end\n    for i = 1, n do\n\
    \      if cars_left_to_right[i] then\n        cars_left_to_right[i] = false\n\
    \      end\n      if cars_right_to_left[i] then\n        cars_right_to_left[i]\
    \ = false\n      end\n    end\n  end\n  return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    -- TODO: Write\
    \ this function.\n    -- Hint: You can use a queue to simulate the cars moving\
    \ left to right.\n    -- Hint: You can use a stack to simulate the cars moving\
    \ right to left.\n    -- Hint: You can use a counter to count the number of collisions.\n\
    \    -- Hint: You can use a queue to simulate the cars moving left to right.\n\
    \    -- Hint: You can use a stack to simulate the cars moving right to left.\n\
    \    -- Hint: You can use a counter to count the number of collisions.\n    --\
    \ Hint: You can use a queue to simulate the cars moving left to right.\n    --\
    \ Hint: You can use a stack to simulate the cars moving right to left.\n    --\
    \ Hint: You can use a counter to count the number of collisions.\n    -- Hint:\
    \ You can use a queue to simulate the cars moving left to right.\n    -- Hint:\
    \ You can use a stack to simulate the cars moving right to left.\n    -- Hint:\
    \ You can use a counter to count the number of collisions.\n    -- Hint: You can\
    \ use a queue to simulate the cars moving left to right.\n    -- Hint: You can\
    \ use a stack to simulate the cars moving right to left.\n    -- Hint: You can\
    \ use a counter to count the number of collisions.\n    -- Hint: You can use a\
    \ queue to simulate the cars moving left to right.\n    -- Hint: You can use a\
    \ stack to simulate the cars moving right to left.\n    -- Hint: You can use a\
    \ counter to count the number of collisions.\n    -- Hint: You can use a queue\
    \ to simulate the cars moving left to right.\n    -- Hint: You can use a stack\
    \ to simulate the cars moving right to left.\n    -- Hint: You can use a counter\
    \ to count the number of collisions.\n    -- Hint: You can use a queue to simulate\
    \ the cars moving left to right.\n    -- Hint: You can use a stack to simulate\
    \ the cars moving right to left.\n    -- Hint: You can use a counter to count\
    \ the number of collisions.\n    -- Hint: You can use a queue to simulate the\
    \ cars moving left to right.\n    -- Hint: You can use a stack to simulate the\
    \ cars moving right to", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local count = 0\n  for i = 1, n do\n\
    \    for j = 1, n do\n      if i == j then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend", "    local collisions = 0\n    local cars\
    \ = {}\n    for i = 1, n do\n        cars[i] = {\n            x = math.random(),\n\
    \            v = math.random()\n        }\n    end\n    for i = 1, n do\n    \
    \    cars[n + i] = {\n            x = math.random(),\n            v = -math.random()\n\
    \        }\n    end\n    for i = 1, n do\n        for j = n + 1, 2 * n do\n  \
    \          if cars[i].x < cars[j].x and cars[i].v > cars[j].v then\n         \
    \       collisions = collisions + 1\n            end\n        end\n    end\n \
    \   return collisions\nend", "    local collisions = 0\n    local cars_left =\
    \ {}\n    local cars_right = {}\n    for i = 1, n do\n        cars_left[i] = i\n\
    \        cars_right[i] = n + 1 - i\n    end\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if cars_left[i] == cars_right[j] then\n           \
    \     collisions = collisions + 1\n            end\n        end\n    end\n   \
    \ return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local left_cars = {}\n  local right_cars\
    \ = {}\n  local collisions = 0\n  for i = 1, n do\n    left_cars[i] = i\n    right_cars[i]\
    \ = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_cars[i]\
    \ == right_cars[j] then\n        collisions = collisions + 1\n      end\n    end\n\
    \  end\n  return collisions\nend", "  local cars = {}\n  for i = 1, n do\n   \
    \ cars[i] = {\n      x = 0,\n      dx = 1,\n    }\n  end\n  for i = n + 1, 2 *\
    \ n do\n    cars[i] = {\n      x = 0,\n      dx = -1,\n    }\n  end\n  local collisions\
    \ = 0\n  for i = 1, n do\n    for j = n + 1, 2 * n do\n      if cars[i].x == cars[j].x\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local collisions = 0\n    local cars_left_to_right =\
    \ {}\n    local cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local n_collisions = 0\n  local\
    \ cars_left_to_right = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n\
    \    cars_left_to_right[i] = true\n    cars_right_to_left[i] = true\n  end\n \
    \ local i = 1\n  local j = 1\n  while i <= n and j <= n do\n    if cars_left_to_right[i]\
    \ and cars_right_to_left[j] then\n      n_collisions = n_collisions + 1\n    \
    \  cars_left_to_right[i] = false\n      cars_right_to_left[j] = false\n    end\n\
    \    i = i + 1\n    j = j + 1\n  end\n  return n_collisions\nend", "  local function\
    \ car_race_collision_helper(n, left_to_right, right_to_left)\n    if n == 0 then\n\
    \      return 0\n    else\n      local left_to_right_next = left_to_right + 1\n\
    \      local right_to_left_next = right_to_left + 1\n      local left_to_right_collision\
    \ = left_to_right_next - right_to_left\n      local right_to_left_collision =\
    \ right_to_left_next - left_to_right\n      local collision = left_to_right_collision\
    \ + right_to_left_collision\n      return collision + car_race_collision_helper(n\
    \ - 1, left_to_right_next, right_to_left_next)\n    end\n  end\n  return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local left_to_right = {}\n    local right_to_left = {}\n \
    \   local collisions = 0\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n - i + 1\n    end\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local function car_race_collision_helper(n, left_to_right,\
    \ right_to_left)\n    if n == 0 then\n      return 0\n    else\n      local left_to_right_next\
    \ = left_to_right + 1\n      local right_to_left_next = right_to_left + 1\n  \
    \    local collision = left_to_right_next == right_to_left_next and 1 or 0\n \
    \     return collision + car_race_collision_helper(n - 1, left_to_right_next,\
    \ right_to_left_next)\n    end\n  end\n  return car_race_collision_helper(n, 0,\
    \ 0)\nend", "    local n = n or 0\n    local collisions = 0\n    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i + 1\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n - i + 1\n    end\n    local collision = 0\n    for i\
    \ = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collision = collision + 1\n            end\n        end\n\
    \    end\n    return collision\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n - i + 1\n    end\n    local count = 0\n    for i = 1,\
    \ n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  local function car_race_collision_helper(n, left_to_right,\
    \ right_to_left)\n    if n == 0 then\n      return 0\n    else\n      local left_to_right_next\
    \ = left_to_right + 1\n      local right_to_left_next = right_to_left + 1\n  \
    \    local left_to_right_collision = left_to_right_next - right_to_left\n    \
    \  local right_to_left_collision = right_to_left_next - left_to_right\n      local\
    \ collision = left_to_right_collision + right_to_left_collision\n      return\
    \ collision + car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)\n\
    \    end\n  end\n  return car_race_collision_helper(n, 0, 0)\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n    end\n   \
    \ local count = 0\n    for i = 1, n do\n        for j = 1, n do\n            if\
    \ left_to_right[i] == right_to_left[j] then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "  local collisions\
    \ = 0\n  local cars = {}\n  for i = 1, n do\n    cars[i] = {x = i, dir = 1}\n\
    \  end\n  for i = n + 1, 2 * n do\n    cars[i] = {x = 2 * n - i + 1, dir = -1}\n\
    \  end\n  while true do\n    local moved = false\n    for i = 1, 2 * n do\n  \
    \    local car = cars[i]\n      if car.x ~= 0 and car.x ~= 2 * n + 1 then\n  \
    \      car.x = car.x + car.dir\n        moved = true\n      end\n    end\n   \
    \ if not moved then\n      break\n    end\n    for i = 1, 2 * n do\n      local\
    \ car = cars[i]\n      if car.x == 0 or car.x == 2 * n + 1 then\n        for j\
    \ = 1, 2 * n do\n          local other = cars[j]\n          if other.x == car.x\
    \ then\n            collisions = collisions + 1\n          end\n        end\n\
    \      end\n    end\n  end\n  return collisions\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n - i + 1\n    end\n    local count = 0\n    for i = 1, n do\n        for j\
    \ = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n      \
    \          count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    local left_to_right = {}\n    local right_to_left = {}\n \
    \   for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local count = 0\n    for i = 1, n do\n        for j\
    \ = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n      \
    \          count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "  local left_to_right = {}\n  local right_to_left = {}\n  for\
    \ i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n\
    \  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local collisions = 0\n    local\
    \ cars = {}\n    for i = 1, n do\n        cars[i] = {\n            pos = math.random(1,\
    \ 1000000),\n            dir = 1\n        }\n    end\n    for i = 1, n do\n  \
    \      cars[i + n] = {\n            pos = math.random(1, 1000000),\n         \
    \   dir = -1\n        }\n    end\n    table.sort(cars, function(a, b) return a.pos\
    \ < b.pos end)\n    for i = 1, n * 2 do\n        for j = i + 1, n * 2 do\n   \
    \         if cars[i].dir == 1 and cars[j].dir == -1 then\n                if cars[i].pos\
    \ < cars[j].pos then\n                    collisions = collisions + 1\n      \
    \          end\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    local collision\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n - i + 1\n    end\n    local collision = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    local collisions = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local n_collisions = 0\n  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        n_collisions\
    \ = n_collisions + 1\n      end\n    end\n  end\n  return n_collisions\nend",
  "  local left_to_right = {}\n  local right_to_left = {}\n  local collisions = 0\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n - i + 1\n\
    \  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local collisions = 0\n    local cars = {}\n    for i\
    \ = 1, n do\n        cars[i] = {\n            pos = 0,\n            dir = 1,\n\
    \        }\n    end\n    for i = 1, n do\n        cars[i + n] = {\n          \
    \  pos = 0,\n            dir = -1,\n        }\n    end\n    for i = 1, 2 * n do\n\
    \        for j = i + 1, 2 * n do\n            if cars[i].dir ~= cars[j].dir then\n\
    \                if cars[i].pos == cars[j].pos then\n                    collisions\
    \ = collisions + 1\n                end\n            end\n        end\n      \
    \  cars[i].pos = cars[i].pos + cars[i].dir\n    end\n    return collisions\nend",
  "    local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n     \
    \       if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n\
    \  end\n  local collision = 0\n  for i = 1, n do\n    for j = 1, n do\n      if\
    \ left_to_right[i] == right_to_left[j] then\n        collision = collision + 1\n\
    \      end\n    end\n  end\n  return collision\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local n =\
    \ n or 0\n  local n_collisions = 0\n  local cars_left_to_right = {}\n  local cars_right_to_left\
    \ = {}\n  for i = 1, n do\n    cars_left_to_right[i] = i\n    cars_right_to_left[i]\
    \ = i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if cars_left_to_right[i]\
    \ == cars_right_to_left[j] then\n        n_collisions = n_collisions + 1\n   \
    \   end\n    end\n  end\n  return n_collisions\nend", "    local collisions =\
    \ 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n         \
    \   x = math.random(),\n            v = math.random()\n        }\n    end\n  \
    \  for i = 1, n do\n        cars[n + i] = {\n            x = math.random(),\n\
    \            v = -math.random()\n        }\n    end\n    for i = 1, n do\n   \
    \     for j = n + 1, 2 * n do\n            if cars[i].x < cars[j].x and cars[i].v\
    \ > cars[j].v then\n                collisions = collisions + 1\n            end\n\
    \        end\n    end\n    return collisions\nend", "    local left_to_right =\
    \ {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local cars = {}\n    local i\n    for i = 1, n do\n        cars[i]\
    \ = {\n            x = math.random(0, 1000000),\n            v = math.random(1,\
    \ 1000000)\n        }\n    end\n    for i = 1, n do\n        cars[i + n] = {\n\
    \            x = math.random(0, 1000000),\n            v = -math.random(1, 1000000)\n\
    \        }\n    end\n    table.sort(cars, function(a, b) return a.x < b.x end)\n\
    \    for i = 1, n * 2 - 1 do\n        if cars[i].v > 0 and cars[i + 1].v < 0 then\n\
    \            collisions = collisions + 1\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    local collisions\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local collisions = 0\n    local cars = {}\n    for i\
    \ = 1, n do\n        cars[i] = {\n            left = true,\n            pos =\
    \ i\n        }\n    end\n    for i = n + 1, 2 * n do\n        cars[i] = {\n  \
    \          left = false,\n            pos = i\n        }\n    end\n    while true\
    \ do\n        local done = true\n        for i = 1, 2 * n do\n            local\
    \ car = cars[i]\n            if car.left then\n                car.pos = car.pos\
    \ + 1\n            else\n                car.pos = car.pos - 1\n            end\n\
    \            if car.pos == 0 or car.pos == 2 * n + 1 then\n                car.pos\
    \ = nil\n            else\n                done = false\n            end\n   \
    \     end\n        if done then\n            break\n        end\n        for i\
    \ = 1, 2 * n do\n            local car = cars[i]\n            if car.pos then\n\
    \                for j = i + 1, 2 * n do\n                    local other = cars[j]\n\
    \                    if other.pos and car.pos == other.pos then\n            \
    \            collisions = collisions + 1\n                    end\n          \
    \      end\n            end\n        end\n    end\n    return collisions\nend",
  "    local collisions = 0\n    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \        if n == 0 then\n            return 0\n        else\n            local\
    \ left_to_right_collision = car_race_collision_helper(n - 1, left_to_right + 1,\
    \ right_to_left)\n            local right_to_left_collision = car_race_collision_helper(n\
    \ - 1, left_to_right, right_to_left + 1)\n            return left_to_right_collision\
    \ + right_to_left_collision\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, 0)\nend", "  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n\
    \      if i == j then\n        collisions = collisions + 1\n      end\n    end\n\
    \  end\n  return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local count = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "  local collisions = 0\n  local cars_left = {}\n  local cars_right\
    \ = {}\n  for i = 1, n do\n    cars_left[i] = i\n    cars_right[i] = i\n  end\n\
    \  for i = 1, n do\n    for j = 1, n do\n      if cars_left[i] == cars_right[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collision = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n - i + 1\n  end\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if cars_left_to_right[i] == cars_right_to_left[j] then\n\
    \        collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "  local left_to_right_cars = {}\n  local right_to_left_cars = {}\n  for\
    \ i = 1, n do\n    left_to_right_cars[i] = i\n    right_to_left_cars[i] = i\n\
    \  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n     \
    \ if left_to_right_cars[i] == right_to_left_cars[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    local collisions = 0\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if cars_left_to_right[i] == cars_right_to_left[j] then\n\
    \        collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "    local n = n or 0\n    local collisions = 0\n    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local collisions = 0\n    local cars\
    \ = {}\n    for i = 1, n do\n        cars[i] = {\n            x = math.random()\
    \ * 1000000,\n            v = math.random() * 1000000,\n            dir = 1\n\
    \        }\n    end\n    for i = 1, n do\n        cars[i + n] = {\n          \
    \  x = math.random() * 1000000,\n            v = math.random() * 1000000,\n  \
    \          dir = -1\n        }\n    end\n    table.sort(cars, function(a, b) return\
    \ a.x < b.x end)\n    for i = 1, n * 2 do\n        for j = i + 1, n * 2 do\n \
    \           if cars[i].dir ~= cars[j].dir then\n                local dx = cars[j].x\
    \ - cars[i].x\n                local dv = cars[j].v - cars[i].v\n            \
    \    if dv > 0 then\n                    local t = dx / dv\n                 \
    \   if t > 0 then\n                        collisions = collisions + 1\n     \
    \               end\n                end\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local cars_left = {}\n    local cars_right\
    \ = {}\n    local collisions = 0\n    for i = 1, n do\n        cars_left[i] =\
    \ i\n        cars_right[i] = n + 1 - i\n    end\n    for i = 1, n do\n       \
    \ for j = 1, n do\n            if cars_left[i] == cars_right[j] then\n       \
    \         collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local collisions = 0\n  local cars = {}\n  for\
    \ i = 1, n do\n    cars[i] = {\n      x = math.random() * 1000000,\n      v =\
    \ math.random() * 100,\n      dir = 1,\n    }\n  end\n  for i = n + 1, 2 * n do\n\
    \    cars[i] = {\n      x = math.random() * 1000000,\n      v = math.random()\
    \ * 100,\n      dir = -1,\n    }\n  end\n  for i = 1, 2 * n do\n    for j = i\
    \ + 1, 2 * n do\n      local c1 = cars[i]\n      local c2 = cars[j]\n      if\
    \ c1.dir ~= c2.dir then\n        local d = c1.x - c2.x\n        local v = c1.v\
    \ - c2.v\n        if d * v < 0 then\n          local t = -d / v\n          if\
    \ t > 0 then\n            collisions = collisions + 1\n          end\n       \
    \ end\n      end\n    end\n  end\n  return collisions\nend", "    local collisions\
    \ = 0\n    local cars_left = {}\n    local cars_right = {}\n    for i = 1, n do\n\
    \        cars_left[i] = i\n        cars_right[i] = i\n    end\n    for i = 1,\
    \ n do\n        for j = 1, n do\n            if cars_left[i] == cars_right[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n - i + 1\n  end\n  local collision = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collision\
    \ = collision + 1\n      end\n    end\n  end\n  return collision\nend", "  local\
    \ collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if i == j then\n\
    \        collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "    -- The cars are numbered from 1 to n.  We use a table to keep track\
    \ of the\n    -- cars that are moving left to right.  The key is the car number,\
    \ and the\n    -- value is the car's position.\n    local left_to_right = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n    end", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        for j = 1, n do\n            if i == j then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local count = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    local collisions = 0\n    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n        for j\
    \ = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n      \
    \          collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local collisions = 0\n    local cars_left =\
    \ {}\n    local cars_right = {}\n    for i = 1, n do\n        cars_left[i] = i\n\
    \        cars_right[i] = n + 1 - i\n    end\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if cars_left[i] == cars_right[j] then\n           \
    \     collisions = collisions + 1\n            end\n        end\n    end\n   \
    \ return collisions\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ n = n or 0\n  local collisions = 0\n  local cars = {}\n  for i = 1, n do\n \
    \   cars[i] = {\n      x = math.random(0, 100),\n      y = math.random(0, 100),\n\
    \      vx = math.random(0, 100),\n      vy = math.random(0, 100),\n    }\n  end\n\
    \  for i = 1, n do\n    for j = 1, n do\n      if cars[i].vx > 0 and cars[j].vx\
    \ < 0 then\n        if cars[i].x < cars[j].x then\n          collisions = collisions\
    \ + 1\n        end\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = i\n  end\n  local collision = 0\n  for i = 1, n\
    \ do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j] then\n\
    \        collision = collision + 1\n      end\n    end\n  end\n  return collision\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    local collision\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local collisions = 0\n    local cars = {}\n    local cars_left = {}\n\
    \    local cars_right = {}\n    for i = 1, n do\n        cars[i] = {\n       \
    \     x = math.random(),\n            v = math.random(),\n            direction\
    \ = math.random() > 0.5 and \"left\" or \"right\"\n        }\n        if cars[i].direction\
    \ == \"left\" then\n            cars_left[i] = cars[i]\n        else\n       \
    \     cars_right[i] = cars[i]\n        end\n    end\n    local time = 0\n    while\
    \ #cars_left > 0 and #cars_right > 0 do\n        local min_time = math.huge\n\
    \        local min_time_car = nil\n        for _, car in pairs(cars_left) do\n\
    \            local t = (1 - car.x) / car.v\n            if t < min_time then\n\
    \                min_time = t\n                min_time_car = car\n          \
    \  end\n        end\n        for _, car in pairs(cars_right) do\n            local\
    \ t = car.x / car.v\n            if t < min_time then\n                min_time\
    \ = t\n                min_time_car = car\n            end\n        end\n    \
    \    time = time + min_time\n        min_time_car.x = min_time_car.x + min_time\
    \ * min_time_car.v\n        if min_time_car.x >= 1 then\n            cars_left[min_time_car]\
    \ = nil\n        elseif min_time_car.x <= 0 then\n            cars_right[min_time_car]\
    \ = nil\n        end\n        for _, car in pairs(cars_left) do\n            car.x\
    \ = car.x + min_time * car.v\n        end\n        for _, car in pairs(cars_right)\
    \ do\n            car.x = car.x - min_time * car.v\n        end\n        for _,\
    \ car in pairs(cars_left) do\n            if car.x >= 1 then\n               \
    \ cars_left[car] = nil\n            end\n        end\n        for _, car in pairs(cars_right)\
    \ do\n           ", "    local left_to_right_cars = {}\n    local right_to_left_cars\
    \ = {}\n    for i = 1, n do\n        left_to_right_cars[i] = i\n        right_to_left_cars[i]\
    \ = i\n    end\n    local collisions = 0\n    local i = 1\n    local j = 1\n \
    \   while i <= n and j <= n do\n        if left_to_right_cars[i] < right_to_left_cars[j]\
    \ then\n            i = i + 1\n        elseif left_to_right_cars[i] > right_to_left_cars[j]\
    \ then\n            j = j + 1\n        else\n            collisions = collisions\
    \ + 1\n            i = i + 1\n            j = j + 1\n        end\n    end\n  \
    \  return collisions\nend", "    local collisions = 0\n    local cars_left_to_right\
    \ = {}\n    local cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \  local collisions = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i]\
    \ = {\n            x = math.random(),\n            v = math.random()\n       \
    \ }\n    end\n    for i = 1, n do\n        cars[n + i] = {\n            x = math.random(),\n\
    \            v = -math.random()\n        }\n    end\n    for i = 1, n do\n   \
    \     for j = n + 1, 2 * n do\n            if cars[i].x < cars[j].x and cars[i].v\
    \ > cars[j].v then\n                collisions = collisions + 1\n            end\n\
    \        end\n    end\n    return collisions\nend", "  local n_collisions = 0\n\
    \  for i = 1, n do\n    for j = 1, n do\n      if i == j then\n        n_collisions\
    \ = n_collisions + 1\n      end\n    end\n  end\n  return n_collisions\nend",
  "    local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n     \
    \       if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "  local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n\
    \ do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  local\
    \ collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local left_to_right = {}\n   \
    \ local right_to_left = {}\n    local collisions = 0\n    for i = 1, n do\n  \
    \      left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n \
    \   for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local collisions\
    \ = 0\n  local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n\
    \ do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  for\
    \ i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collision = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "  local collisions = 0\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if i == j then\n        collisions = collisions + 1\n   \
    \   end\n    end\n  end\n  return collisions\nend", "    local left_to_right =\
    \ {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    local collisions = 0\n    for i = 1,\
    \ n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n \
    \   end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  local collisions = 0\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local function car_race_collision_helper(n,\
    \ left_to_right, right_to_left)\n        if n == 0 then\n            return 0\n\
    \        else\n            local l = left_to_right[n]\n            local r = right_to_left[n]\n\
    \            if l < r then\n                return car_race_collision_helper(n\
    \ - 1, left_to_right, right_to_left)\n            else\n                return\
    \ 1 + car_race_collision_helper(n - 1, left_to_right, right_to_left)\n       \
    \     end\n        end\n    end\n    return car_race_collision_helper(n, {1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10}, {10, 9, 8, 7, 6, 5, 4, 3, 2, 1})\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n        \
    \    if left_to_right[i] == right_to_left[j] then\n                collision =\
    \ collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local collisions = 0\n    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local collisions = 0\n    local cars = {}\n    for i = 1, n do\n  \
    \      cars[i] = {\n            x = math.random(),\n            v = math.random()\n\
    \        }\n    end\n    for i = 1, n do\n        cars[n + i] = {\n          \
    \  x = math.random(),\n            v = -math.random()\n        }\n    end\n  \
    \  table.sort(cars, function(a, b) return a.x < b.x end)\n    for i = 1, n do\n\
    \        for j = i + 1, n + i do\n            if cars[i].v > 0 and cars[j].v <\
    \ 0 then\n                local t = (cars[i].x - cars[j].x) / (cars[j].v - cars[i].v)\n\
    \                if t > 0 then\n                    collisions = collisions +\
    \ 1\n                end\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n\
    \  end\n  local i = 1\n  local j = 1\n  local count = 0\n  while i <= n and j\
    \ <= n do\n    if left_to_right[i] < right_to_left[j] then\n      i = i + 1\n\
    \    elseif left_to_right[i] > right_to_left[j] then\n      j = j + 1\n    else\n\
    \      count = count + 1\n      i = i + 1\n      j = j + 1\n    end\n  end\n \
    \ return count\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n\
    \  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n     \
    \ if left_to_right[i] == right_to_left[j] then\n        collisions = collisions\
    \ + 1\n      end\n    end\n  end\n  return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local collisions\
    \ = 0\n    local cars_left = {}\n    local cars_right = {}\n    for i = 1, n do\n\
    \        cars_left[i] = i\n        cars_right[i] = n + 1 - i\n    end\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if cars_left[i] == cars_right[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local collisions = 0\n    local\
    \ cars = {}\n    for i = 1, n do\n        cars[i] = {\n            pos = math.random(1,\
    \ 1000000),\n            dir = 1,\n        }\n    end\n    for i = 1, n do\n \
    \       cars[i + n] = {\n            pos = math.random(1, 1000000),\n        \
    \    dir = -1,\n        }\n    end\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if cars[i].dir == 1 and cars[j + n].dir == -1 then\n       \
    \         if cars[i].pos > cars[j + n].pos then\n                    collisions\
    \ = collisions + 1\n                end\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    local collision = 0\n    for i = 1, n do\n       \
    \ for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collision = collision + 1\n            end\n        end\n   \
    \ end\n    return collision\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
