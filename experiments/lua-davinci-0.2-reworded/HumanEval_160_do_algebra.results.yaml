name: HumanEval_160_do_algebra
language: lua
results:
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfni6f7z.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpbfni6f7z.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbruoa8yl.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpbruoa8yl.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpceqoozdc.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpceqoozdc.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_60ujq1.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpz_60ujq1.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7x91go1.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpk7x91go1.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08eyqz9s.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp08eyqz9s.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpus4c53vb.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpus4c53vb.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xbk_t86.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp5xbk_t86.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwafw6xuy.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpwafw6xuy.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local res = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      res = res + operand[i + 1]\n    elseif operator[i] == '-'\
    \ then\n      res = res - operand[i + 1]\n    elseif operator[i] == '*' then\n\
    \      res = res * operand[i + 1]\n    elseif operator[i] == '//' then\n     \
    \ res = math.floor(res / operand[i + 1])\n    elseif operator[i] == '**' then\n\
    \      res = res ^ operand[i + 1]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0w0j0t8.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpi0w0j0t8.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps61bw2f3.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmps61bw2f3.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit2a783u.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpit2a783u.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpseiv7f43.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpseiv7f43.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xry9qj7.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp_xry9qj7.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrqxhbfh.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpsrqxhbfh.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q9fnb_9.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp3q9fnb_9.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd63kjtbn.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpd63kjtbn.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi0r1xee.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpmi0r1xee.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzr9y6tke.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpzr9y6tke.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a5rhv5s.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp2a5rhv5s.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1co1qm0.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpo1co1qm0.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2e7cyqv.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpw2e7cyqv.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_9jhn32.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp6_9jhn32.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx1kzmzw.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpnx1kzmzw.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo646id6.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpmo646id6.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmu7us8ro.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpmu7us8ro.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n\tlocal result = operand[1]\n\tfor i = 1, #operator do\n\t\tif operator[i]\
    \ == '+' then\n\t\t\tresult = result + operand[i + 1]\n\t\telseif operator[i]\
    \ == '-' then\n\t\t\tresult = result - operand[i + 1]\n\t\telseif operator[i]\
    \ == '*' then\n\t\t\tresult = result * operand[i + 1]\n\t\telseif operator[i]\
    \ == '//' then\n\t\t\tresult = math.floor(result / operand[i + 1])\n\t\telseif\
    \ operator[i] == '**' then\n\t\t\tresult = result ^ operand[i + 1]\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprb1t_096.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmprb1t_096.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiubjoia.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpgiubjoia.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscowil26.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpscowil26.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0as85rvb.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp0as85rvb.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc41gx7zy.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpc41gx7zy.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag_6y05f.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpag_6y05f.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9p92ti4.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpi9p92ti4.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhh5roxe.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpdhh5roxe.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdyr9a58.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpsdyr9a58.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8hw4qt7.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp_8hw4qt7.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrrqw85g.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpmrrqw85g.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sva8bh4.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp8sva8bh4.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiw3qqx31.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpiw3qqx31.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_alxy288.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp_alxy288.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrpm83q7.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpfrpm83q7.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_s0_ot6.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpd_s0_ot6.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tq5rlsm.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp8tq5rlsm.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpho7orv6_.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpho7orv6_.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooud3qcs.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpooud3qcs.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   local op = operator[i]\n        local a = operand[i]\n        local b = operand[i\
    \ + 1]\n        if op == '+' then\n            result = result + b\n        elseif\
    \ op == '-' then\n            result = result - b\n        elseif op == '*' then\n\
    \            result = result * b\n        elseif op == '//' then\n           \
    \ result = result // b\n        elseif op == '**' then\n            result = result\
    \ ^ b\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8c_eoh7.lua:44:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpn8c_eoh7.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbklei5y8.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpbklei5y8.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxd5vz4r.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpdxd5vz4r.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1u31wqf.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpa1u31wqf.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86_mfqkv.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp86_mfqkv.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplr8jx9mp.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmplr8jx9mp.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf23l5d6.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmplf23l5d6.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kt75czr.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp3kt75czr.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclon2b6q.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpclon2b6q.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jmhqp5s.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp_jmhqp5s.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk48k__ia.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpk48k__ia.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyodga676.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpyodga676.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5ttdpkz.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpg5ttdpkz.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmlcfrxf4.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpmlcfrxf4.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr30tj598.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpr30tj598.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8zranwp.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpb8zranwp.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjur7pm6r.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpjur7pm6r.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe92aiuiu.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpe92aiuiu.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaafnwam6.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpaafnwam6.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtmo8fmu.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpqtmo8fmu.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpol0zy75r.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpol0zy75r.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprod1zjh6.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmprod1zjh6.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi44g4pe.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpzi44g4pe.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqu4od4a5.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpqu4od4a5.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i7mrfw9.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp7i7mrfw9.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l1heok8.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp5l1heok8.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kaw4lls.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp4kaw4lls.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5lfypi1g.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp5lfypi1g.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4yaawp0.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpe4yaawp0.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnok84de6.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpnok84de6.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphubg6dfa.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmphubg6dfa.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt10zquua.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpt10zquua.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4b6_zrpn.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp4b6_zrpn.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwcarrmd.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpzwcarrmd.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_194weh.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpi_194weh.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpend6enm8.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpend6enm8.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72g3qrwu.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp72g3qrwu.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nh0w0ox.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp7nh0w0ox.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg3zpf7y.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpzg3zpf7y.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3okmo7uv.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp3okmo7uv.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w559xmw.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp9w559xmw.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1a60xbp0.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp1a60xbp0.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd1qnj0q.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmptd1qnj0q.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wz9msqj.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp0wz9msqj.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_1w8p3t.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp6_1w8p3t.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb0asek6.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpvb0asek6.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp5oh5td.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpqp5oh5td.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9txp78z.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpm9txp78z.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao1navf4.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpao1navf4.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxz8fex4v.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpxz8fex4v.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvch4vob.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpnvch4vob.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m85tm0b.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp9m85tm0b.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3o4q7ju.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpr3o4q7ju.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod6z6waj.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpod6z6waj.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qucvauv.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp3qucvauv.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   local op = operator[i]\n        local op1 = operand[i + 1]\n        if op\
    \ == '+' then\n            result = result + op1\n        elseif op == '-' then\n\
    \            result = result - op1\n        elseif op == '*' then\n          \
    \  result = result * op1\n        elseif op == '//' then\n            result =\
    \ math.floor(result / op1)\n        elseif op == '**' then\n            result\
    \ = result ^ op1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw59xtusl.lua:43:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpw59xtusl.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqmbsttv.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpoqmbsttv.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejm040gm.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpejm040gm.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nm89yd8.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp0nm89yd8.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_gcrchg.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp4_gcrchg.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdrib6br.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmppdrib6br.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgbo4t2x.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpvgbo4t2x.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnt2yk_q8.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpnt2yk_q8.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhnyzq2k.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpnhnyzq2k.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc2gn7ue.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpxc2gn7ue.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1oaug4g.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpu1oaug4g.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4uvt0u9.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpk4uvt0u9.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6s0ddxqq.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp6s0ddxqq.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggu_2d_i.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpggu_2d_i.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pbee98.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp_1pbee98.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpco4slm19.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpco4slm19.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5hsfysu.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpf5hsfysu.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzfmzwc8.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmphzfmzwc8.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrvj548_.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpqrvj548_.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn04csif.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpfn04csif.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9it231d.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpw9it231d.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspm00w_o.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpspm00w_o.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bxqtjgz.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp1bxqtjgz.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z69v0zt.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp9z69v0zt.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpis4p0l.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpwpis4p0l.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxn8a3oo.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpjxn8a3oo.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwfso2j7.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpkwfso2j7.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3p_ky0n1.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp3p_ky0n1.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3plihdif.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp3plihdif.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl8r076j.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpzl8r076j.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo14jy_ni.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpo14jy_ni.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6oasaa4.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpg6oasaa4.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_giywu5.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp6_giywu5.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzbff12a.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpkzbff12a.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqd6iz9hi.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpqd6iz9hi.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vlpgh9y.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp7vlpgh9y.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7q17fx3.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpk7q17fx3.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwebbgqi_.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpwebbgqi_.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sjoxoy0.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp8sjoxoy0.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplczp8raq.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmplczp8raq.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38gil4j7.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp38gil4j7.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jpoaqia.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp7jpoaqia.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9khig9p.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpx9khig9p.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhyeg22h.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmplhyeg22h.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsencqw55.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpsencqw55.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfq2zbg7.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpkfq2zbg7.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fk49nlk.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp7fk49nlk.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkshb692z.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpkshb692z.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmk6sokq.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpgmk6sokq.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lcxr1nm.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp9lcxr1nm.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90r5k1ih.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp90r5k1ih.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwryok0db.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpwryok0db.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6sfq5ht.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpf6sfq5ht.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgt57k1fr.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpgt57k1fr.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg917dy12.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpg917dy12.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgykyf9z.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpwgykyf9z.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsrio13i.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpfsrio13i.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjb2_1zu.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpsjb2_1zu.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqokh3nz.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpyqokh3nz.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4d_hdq4h.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp4d_hdq4h.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i=1,#operator do\n        if\
    \ operator[i] == '+' then\n            result = result + operand[i+1]\n      \
    \  elseif operator[i] == '-' then\n            result = result - operand[i+1]\n\
    \        elseif operator[i] == '*' then\n            result = result * operand[i+1]\n\
    \        elseif operator[i] == '//' then\n            result = math.floor(result\
    \ / operand[i+1])\n        elseif operator[i] == '**' then\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulrzjhot.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpulrzjhot.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ogtam6c.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp8ogtam6c.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqf04rj7.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmprqf04rj7.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmhz8rwj.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpmmhz8rwj.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8voiqtgw.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp8voiqtgw.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ymvsqv_.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp7ymvsqv_.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp921r1eke.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp921r1eke.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks8zipcd.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpks8zipcd.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5x6mu75x.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp5x6mu75x.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0yia_4e.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpp0yia_4e.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcd66eepu.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpcd66eepu.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1_8glw0.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpu1_8glw0.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprko2tls3.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmprko2tls3.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4is7fz7i.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp4is7fz7i.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2evezu7.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpm2evezu7.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8tto38c.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpl8tto38c.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_wfrokp.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpm_wfrokp.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb597s30p.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpb597s30p.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_ju8_sw.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpc_ju8_sw.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_x38sk1.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp4_x38sk1.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbxtfz_c.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpjbxtfz_c.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm89n6ya.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpvm89n6ya.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcku2uez.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpxcku2uez.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2mwh8um.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpo2mwh8um.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysb0jta1.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpysb0jta1.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4th44_mh.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp4th44_mh.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6zynqg8.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpd6zynqg8.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoy2czdtg.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpoy2czdtg.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswm7burn.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpswm7burn.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw74zg_l.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpsw74zg_l.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpjbvhcy.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpqpjbvhcy.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eo61wuu.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp4eo61wuu.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmv0eg0s.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpsmv0eg0s.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb90ez8p.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmppb90ez8p.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp495wyq75.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp495wyq75.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = result // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3jigce1.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpn3jigce1.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6nf9ptt.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpa6nf9ptt.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpun7ypmt1.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpun7ypmt1.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfastp6ac.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpfastp6ac.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      result = math.floor(result / operand[i + 1])\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp3gjjde.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpwp3gjjde.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
