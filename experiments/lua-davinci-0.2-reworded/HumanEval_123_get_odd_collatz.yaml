---
name: HumanEval_123_get_odd_collatz
language: lua
prompt: "-- Given a positive integer n, return a sorted table that has the odd numbers
  in collatz sequence.\n-- The Collatz conjecture is a conjecture in mathematics that
  concerns a sequence defined\n-- as follows: start with any positive integer n. Then
  each term is obtained from the \n-- previous term as follows: if the previous term
  is even, the next term is one half of \n-- the previous term. If the previous term
  is odd, the next term is 3 times the previous\n-- term plus 1. The conjecture is
  that no matter what value of n, the sequence will always reach 1.\n-- Note: \n--
  1. Collatz(1) is [1].\n-- 2. returned table sorted in increasing order.\n-- For
  example:\n-- get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,
  16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n-- >>> get_odd_collatz(5)\n--
  {1, 5}\nlocal function get_odd_collatz(n)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = get_odd_collatz
      lu.assertEquals(candidate(14), {1, 5, 7, 11, 13, 17})
      lu.assertEquals(candidate(5), {1, 5})
      lu.assertEquals(candidate(12), {1, 3, 5})
      lu.assertEquals(candidate(1), {1})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
    local t = {}
    local function collatz(n)
      if n == 1 then return end
      if n % 2 == 1 then
        t[#t+1] = n
      end
      collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
    end
    collatz(n)
    table.sort(t)
    return t
  end
- |2-
      local t = {}
      local i = n
      while i ~= 1 do
          if i % 2 == 1 then
              table.insert(t, i)
          end
          if i % 2 == 0 then
              i = i / 2
          else
              i = 3 * i + 1
          end
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n > 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n / 2
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local m = n
      while m ~= 1 do
          if m % 2 == 1 then
              t[#t+1] = m
          end
          m = m % 2 == 0 and m / 2 or 3 * m + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
    local t = {}
    local function collatz(n)
      if n == 1 then
        return
      end
      if n % 2 == 1 then
        table.insert(t, n)
      end
      collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
    end
    collatz(n)
    table.sort(t)
    return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local i = n
      while i ~= 1 do
          if i % 2 == 1 then
              table.insert(t, i)
          end
          if i % 2 == 0 then
              i = i / 2
          else
              i = i * 3 + 1
          end
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local i = n
      while i ~= 1 do
          if i % 2 == 1 then
              table.insert(t, i)
          end
          if i % 2 == 0 then
              i = i / 2
          else
              i = 3 * i + 1
          end
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local c = n
      while c > 1 do
          if c % 2 == 1 then
              table.insert(t, c)
          end
          c = c % 2 == 0 and c / 2 or 3 * c + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n / 2
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local result = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(result, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(result)
      return result
  end
- |2-
    local t = {}
    while n ~= 1 do
      if n % 2 == 1 then
        t[#t+1] = n
      end
      n = n % 2 == 0 and n / 2 or 3 * n + 1
    end
    t[#t+1] = 1
    return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
    local t = {}
    local function collatz(n)
      if n == 1 then
        return
      end
      if n % 2 == 1 then
        table.insert(t, n)
      end
      if n % 2 == 0 then
        collatz(n / 2)
      else
        collatz(3 * n + 1)
      end
    end
    collatz(n)
    table.sort(t)
    return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
    local t = {}
    while n ~= 1 do
      if n % 2 == 1 then
        t[#t+1] = n
      end
      n = n % 2 == 0 and n / 2 or 3 * n + 1
    end
    t[#t+1] = 1
    return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
    local t = {}
    local i = 1
    while n ~= 1 do
      if n % 2 == 1 then
        t[i] = n
        i = i + 1
      end
      n = n / 2
    end
    t[i] = 1
    return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
    local t = {}
    local function collatz(n)
      if n == 1 then
        return
      end
      if n % 2 == 1 then
        t[#t+1] = n
      end
      collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
    end
    collatz(n)
    table.sort(t)
    return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local result = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(result, n)
          end
          collatz(n % 2 == 0 and n / 2 or n * 3 + 1)
      end
      collatz(n)
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or n * 3 + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
    local t = {}
    local function collatz(n)
      if n == 1 then
        return
      end
      if n % 2 == 1 then
        t[#t+1] = n
      end
      collatz(n % 2 == 0 and n / 2 or n * 3 + 1)
    end
    collatz(n)
    table.sort(t)
    return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or n * 3 + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or n * 3 + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n > 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n / 2
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
    local t = {}
    while n > 1 do
      if n % 2 == 1 then
        t[#t+1] = n
      end
      n = n % 2 == 0 and n / 2 or 3 * n + 1
    end
    t[#t+1] = 1
    return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
    local t = {}
    local i = 1
    while n ~= 1 do
      if n % 2 == 1 then
        t[i] = n
        i = i + 1
      end
      n = n % 2 == 0 and n / 2 or 3 * n + 1
    end
    t[i] = 1
    return t
  end
- |2-
    local t = {}
    while n > 1 do
      if n % 2 == 1 then
        t[#t+1] = n
      end
      n = n % 2 == 0 and n / 2 or 3 * n + 1
    end
    t[#t+1] = 1
    return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local c = n
      while c ~= 1 do
          if c % 2 == 1 then
              t[#t+1] = c
          end
          c = c % 2 == 0 and c / 2 or c * 3 + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
    local t = {}
    local function collatz(n)
      if n == 1 then
        return
      end
      if n % 2 == 1 then
        table.insert(t, n)
      end
      collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
    end
    collatz(n)
    return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local i = n
      while i > 1 do
          if i % 2 == 1 then
              table.insert(t, i)
          end
          i = i % 2 == 0 and i / 2 or 3 * i + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or n * 3 + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local result = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(result, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then return end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local i = n
      while i > 1 do
          if i % 2 == 1 then
              table.insert(t, i)
          end
          i = i % 2 == 0 and i / 2 or 3 * i + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- "\tlocal t = {}\n\tlocal i = 1\n\twhile n ~= 1 do\n\t\tif n % 2 == 1 then\n\t\t\tt[i]
  = n\n\t\t\ti = i + 1\n\t\tend\n\t\tn = n % 2 == 0 and n / 2 or 3 * n + 1\n\tend\n\tt[i]
  = 1\n\treturn t\nend"
- |2-
    local t = {}
    local function collatz(n)
      if n == 1 then
        return
      end
      if n % 2 == 1 then
        t[#t+1] = n
      end
      collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
    end
    collatz(n)
    table.sort(t)
    return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      local temp = n
      while temp ~= 1 do
          if temp % 2 == 1 then
              table.insert(result, temp)
          end
          temp = temp % 2 == 0 and temp / 2 or temp * 3 + 1
      end
      table.insert(result, 1)
      return result
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n / 2
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              t[#t+1] = 1
              return
          end
          if n % 2 == 0 then
              collatz(n/2)
          else
              t[#t+1] = n
              collatz((3*n+1)/2)
          end
      end
      collatz(n)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- "\tlocal t = {}\n\tlocal function collatz(n)\n\t\tif n == 1 then\n\t\t\treturn\n\t\tend\n\t\tif
  n % 2 == 1 then\n\t\t\tt[#t+1] = n\n\t\tend\n\t\tcollatz(n % 2 == 0 and n / 2 or
  3 * n + 1)\n\tend\n\tcollatz(n)\n\treturn t\nend"
- |2-
      local result = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              result[#result + 1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(result, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(result, 1)
      return result
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      return t
  end
- |2-
      local result = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(result, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      while n ~= 1 do
          table.insert(t, n)
          if n % 2 == 0 then
              n = n / 2
          else
              n = 3 * n + 1
          end
      end
      table.insert(t, 1)
      local r = {}
      for i = 1, #t do
          if t[i] % 2 == 1 then
              table.insert(r, t[i])
          end
      end
      return r
  end
- |2-
    local t = {}
    while n ~= 1 do
      if n % 2 == 1 then
        t[#t+1] = n
      end
      n = n % 2 == 0 and n / 2 or n * 3 + 1
    end
    t[#t+1] = 1
    return t
  end
- |2-
      local t = {}
      local i = n
      while i > 1 do
          if i % 2 == 1 then
              table.insert(t, i)
          end
          i = math.floor(i / 2)
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n / 2
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or n * 3 + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
    local t = {}
    while n ~= 1 do
      if n % 2 == 1 then
        t[#t+1] = n
      end
      n = n % 2 == 0 and n / 2 or 3 * n + 1
    end
    t[#t+1] = 1
    return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
    local t = {}
    while n ~= 1 do
      if n % 2 == 1 then
        t[#t+1] = n
      end
      n = n % 2 == 0 and n / 2 or 3 * n + 1
    end
    t[#t+1] = 1
    return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- "\tlocal t = {}\n\twhile n ~= 1 do\n\t\tif n % 2 == 1 then\n\t\t\tt[#t+1] = n\n\t\tend\n\t\tn
  = n % 2 == 0 and n / 2 or 3 * n + 1\n\tend\n\tt[#t+1] = 1\n\treturn t\nend"
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or n * 3 + 1
      end
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n / 2
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          table.insert(t, n)
          if n % 2 == 0 then
              n = n / 2
          else
              n = 3 * n + 1
          end
      end
      table.insert(t, 1)
      local r = {}
      for i, v in ipairs(t) do
          if v % 2 == 1 then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local t = {}
    local function collatz(n)
      if n == 1 then
        return
      end
      if n % 2 == 1 then
        t[#t+1] = n
      end
      collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
    end
    collatz(n)
    table.sort(t)
    return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          table.insert(t, n)
          if n % 2 == 0 then
              n = n / 2
          else
              n = 3 * n + 1
          end
      end
      table.insert(t, 1)
      local t2 = {}
      for i, v in ipairs(t) do
          if v % 2 == 1 then
              table.insert(t2, v)
          end
      end
      return t2
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then return end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local num = n
      while num ~= 1 do
          if num % 2 == 1 then
              table.insert(t, num)
          end
          if num % 2 == 0 then
              num = num / 2
          else
              num = 3 * num + 1
          end
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n > 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n / 2
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- "\tlocal result = {}\n\tlocal t = {}\n\tlocal i = 1\n\twhile n ~= 1 do\n\t\tt[i]
  = n\n\t\tif n % 2 == 0 then\n\t\t\tn = n / 2\n\t\telse\n\t\t\tn = 3 * n + 1\n\t\tend\n\t\ti
  = i + 1\n\tend\n\tt[i] = 1\n\tfor i = 1, #t do\n\t\tif t[i] % 2 == 1 then\n\t\t\tresult[#result
  + 1] = t[i]\n\t\tend\n\tend\n\treturn result\nend"
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n / 2
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              t[#t+1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local result = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              result[#result + 1] = n
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n > 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
    local t = {}
    local function collatz(n)
      if n == 1 then
        return
      end
      if n % 2 == 1 then
        t[#t+1] = n
      end
      collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
    end
    collatz(n)
    table.sort(t)
    return t
  end
- |2-
      local t = {}
      local i = 1
      while n ~= 1 do
          if n % 2 == 1 then
              t[i] = n
              i = i + 1
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[i] = 1
      return t
  end
- |2-
      local t = {}
      local function collatz(n)
          if n == 1 then
              return
          end
          if n % 2 == 1 then
              table.insert(t, n)
          end
          collatz(n % 2 == 0 and n / 2 or 3 * n + 1)
      end
      collatz(n)
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              table.insert(t, n)
          end
          n = n % 2 == 0 and n / 2 or n * 3 + 1
      end
      table.insert(t, 1)
      return t
  end
- |2-
      local t = {}
      while n ~= 1 do
          if n % 2 == 1 then
              t[#t+1] = n
          end
          n = n % 2 == 0 and n / 2 or 3 * n + 1
      end
      t[#t+1] = 1
      return t
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
