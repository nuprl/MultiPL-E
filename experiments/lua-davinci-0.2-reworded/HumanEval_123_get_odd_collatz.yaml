name: HumanEval_123_get_odd_collatz
language: lua
prompt: "-- Given a positive integer n, return a sorted table that has the odd numbers\
  \ in collatz sequence.\n-- The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n-- as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n-- previous term as follows: if the previous\
  \ term is even, the next term is one half of \n-- the previous term. If the previous\
  \ term is odd, the next term is 3 times the previous\n-- term plus 1. The conjecture\
  \ is that no matter what value of n, the sequence will always reach 1.\n-- Note:\
  \ \n-- 1. Collatz(1) is [1].\n-- 2. returned table sorted in increasing order.\n\
  -- For example:\n-- get_odd_collatz(5) returns [1, 5] # The collatz sequence for\
  \ 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n-- >>> get_odd_collatz(5)\n\
  -- {1, 5}\nlocal function get_odd_collatz(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_odd_collatz\n\
  \    lu.assertEquals(candidate(14), {1, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(5),\
  \ {1, 5})\n    lu.assertEquals(candidate(12), {1, 3, 5})\n    lu.assertEquals(candidate(1),\
  \ {1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    local i = 1\n    while n ~= 1 do\n        if\
    \ n % 2 == 1 then\n            t[i] = n\n            i = i + 1\n        end\n\
    \        n = n % 2 == 0 and n / 2 or 3 * n + 1\n    end\n    t[i] = 1\n    return\
    \ t\nend", "    local t = {}\n    while n ~= 1 do\n        if n % 2 == 1 then\n\
    \            table.insert(t, n)\n        end\n        n = n % 2 == 0 and n / 2\
    \ or 3 * n + 1\n    end\n    table.insert(t, 1)\n    return t\nend", "    local\
    \ t = {}\n    local i = 1\n    while n ~= 1 do\n        if n % 2 == 1 then\n \
    \           t[i] = n\n            i = i + 1\n        end\n        n = n % 2 ==\
    \ 0 and n / 2 or 3 * n + 1\n    end\n    t[i] = 1\n    return t\nend", "  local\
    \ t = {}\n  local function collatz(n)\n    if n == 1 then return end\n    if n\
    \ % 2 == 1 then\n      t[#t+1] = n\n    end\n    collatz(n % 2 == 0 and n / 2\
    \ or 3 * n + 1)\n  end\n  collatz(n)\n  table.sort(t)\n  return t\nend", "   \
    \ local t = {}\n    local i = n\n    while i ~= 1 do\n        if i % 2 == 1 then\n\
    \            table.insert(t, i)\n        end\n        if i % 2 == 0 then\n   \
    \         i = i / 2\n        else\n            i = 3 * i + 1\n        end\n  \
    \  end\n    table.insert(t, 1)\n    return t\nend", "    local t = {}\n    while\
    \ n ~= 1 do\n        if n % 2 == 1 then\n            table.insert(t, n)\n    \
    \    end\n        n = n % 2 == 0 and n / 2 or 3 * n + 1\n    end\n    table.insert(t,\
    \ 1)\n    return t\nend", "    local t = {}\n    local i = 1\n    while n > 1\
    \ do\n        if n % 2 == 1 then\n            t[i] = n\n            i = i + 1\n\
    \        end\n        n = n / 2\n    end\n    t[i] = 1\n    return t\nend", " \
    \   local t = {}\n    local m = n\n    while m ~= 1 do\n        if m % 2 == 1\
    \ then\n            t[#t+1] = m\n        end\n        m = m % 2 == 0 and m / 2\
    \ or 3 * m + 1\n    end\n    t[#t+1] = 1\n    return t\nend", "    local t = {}\n\
    \    local function collatz(n)\n        if n == 1 then\n            return\n \
    \       end\n        if n % 2 == 1 then\n            table.insert(t, n)\n    \
    \    end\n        collatz(n % 2 == 0 and n / 2 or 3 * n + 1)\n    end\n    collatz(n)\n\
    \    table.sort(t)\n    return t\nend", "    local t = {}\n    local function\
    \ collatz(n)\n        if n == 1 then\n            return\n        end\n      \
    \  if n % 2 == 1 then\n            table.insert(t, n)\n        end\n        collatz(n\
    \ % 2 == 0 and n / 2 or 3 * n + 1)\n    end\n    collatz(n)\n    table.sort(t)\n\
    \    return t\nend", "    local t = {}\n    while n ~= 1 do\n        if n % 2\
    \ == 1 then\n            t[#t+1] = n\n        end\n        n = n % 2 == 0 and\
    \ n / 2 or 3 * n + 1\n    end\n    t[#t+1] = 1\n    return t\nend", "  local t\
    \ = {}\n  local function collatz(n)\n    if n == 1 then\n      return\n    end\n\
    \    if n % 2 == 1 then\n      table.insert(t, n)\n    end\n    collatz(n % 2\
    \ == 0 and n / 2 or 3 * n + 1)\n  end\n  collatz(n)\n  table.sort(t)\n  return\
    \ t\nend", "    local t = {}\n    while n ~= 1 do\n        if n % 2 == 1 then\n\
    \            t[#t+1] = n\n        end\n        n = n % 2 == 0 and n / 2 or 3 *\
    \ n + 1\n    end\n    t[#t+1] = 1\n    return t\nend", "    local t = {}\n   \
    \ local function collatz(n)\n        if n == 1 then\n            return\n    \
    \    end\n        if n % 2 == 1 then\n            t[#t+1] = n\n        end\n \
    \       collatz(n % 2 == 0 and n / 2 or 3 * n + 1)\n    end\n    collatz(n)\n\
    \    return t\nend", "    local t = {}\n    local function collatz(n)\n      \
    \  if n == 1 then\n            return\n        end\n        if n % 2 == 1 then\n\
    \            table.insert(t, n)\n        end\n        collatz(n % 2 == 0 and n\
    \ / 2 or 3 * n + 1)\n    end\n    collatz(n)\n    table.sort(t)\n    return t\n\
    end", "    local t = {}\n    while n ~= 1 do\n        if n % 2 == 1 then\n   \
    \         table.insert(t, n)\n        end\n        n = n % 2 == 0 and n / 2 or\
    \ 3 * n + 1\n    end\n    table.insert(t, 1)\n    return t\nend", "    local t\
    \ = {}\n    local function collatz(n)\n        if n == 1 then\n            return\n\
    \        end\n        if n % 2 == 1 then\n            table.insert(t, n)\n   \
    \     end\n        collatz(n % 2 == 0 and n / 2 or 3 * n + 1)\n    end\n    collatz(n)\n\
    \    table.sort(t)\n    return t\nend", "    local t = {}\n    while n ~= 1 do\n\
    \        if n % 2 == 1 then\n            t[#t+1] = n\n        end\n        n =\
    \ n % 2 == 0 and n / 2 or 3 * n + 1\n    end\n    t[#t+1] = 1\n    return t\n\
    end", "    local t = {}\n    local function collatz(n)\n        if n == 1 then\n\
    \            return\n        end\n        if n % 2 == 1 then\n            table.insert(t,\
    \ n)\n        end\n        collatz(n % 2 == 0 and n / 2 or 3 * n + 1)\n    end\n\
    \    collatz(n)\n    table.sort(t)\n    return t\nend", "    local t = {}\n  \
    \  local i = n\n    while i ~= 1 do\n        if i % 2 == 1 then\n            table.insert(t,\
    \ i)\n        end\n        if i % 2 == 0 then\n            i = i / 2\n       \
    \ else\n            i = i * 3 + 1\n        end\n    end\n    table.insert(t, 1)\n\
    \    return t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
