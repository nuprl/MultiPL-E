---
name: HumanEval_55_fib
language: lua
results:
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n < 2 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n <= 1 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n <= 1 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      local a, b = 0, 1
      for i = 1, n do
        a, b = b, a + b
      end
      return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        local a, b = 0, 1
        for i = 1, n do
            a, b = b, a + b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        local a, b = 0, 1
        for i = 1, n do
            a, b = b, a + b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        local a, b = 0, 1
        for i = 1, n do
            a, b = b, a + b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n <= 1 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n < 2 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n <= 1 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        local a, b = 0, 1
        for i = 1, n do
            a, b = b, a + b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n <= 1 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n <= 1 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        local a, b = 0, 1
        for i = 1, n do
            a, b = b, a + b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n <= 1 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n < 2 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      local a, b = 0, 1
      for i = 1, n do
        a, b = b, a + b
      end
      return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n <= 1 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        local a, b = 0, 1
        for i = 1, n do
            a, b = b, a + b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n < 2 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      local a, b = 0, 1
      for i = 1, n do
        a, b = b, a + b
      end
      return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        local a, b = 0, 1
        for i = 1, n do
            a, b = b, a + b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n < 2 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n <= 1 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n < 2 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n <= 1 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n < 2 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n <= 1 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n <= 1 then
            return n
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n == 1 or n == 2 then
        return 1
      else
        return fib(n-1) + fib(n-2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
        if n == 1 or n == 2 then
            return 1
        else
            return fib(n - 1) + fib(n - 2)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return n-th Fibonacci number.
    -- >>> fib(10)
    -- 55
    -- >>> fib(1)
    -- 1
    -- >>> fib(8)
    -- 21
    local function fib(n)
      if n <= 1 then
        return n
      else
        return fib(n - 1) + fib(n - 2)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = fib
        lu.assertEquals(candidate(10), 55)
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(8), 21)
        lu.assertEquals(candidate(11), 89)
        lu.assertEquals(candidate(12), 144)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
