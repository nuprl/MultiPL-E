name: HumanEval_15_string_sequence
language: lua
results:
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r3cwkxn.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp4r3cwkxn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i + 1] = tostring(i)\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tx8epoz.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp9tx8epoz.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26lbs6xu.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp26lbs6xu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppc0cusjs.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmppc0cusjs.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33pm0ccr.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp33pm0ccr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i + 1] = tostring(i)\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3d093io.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpa3d093io.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m4lnrfv.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp8m4lnrfv.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5uc64ldn.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp5uc64ldn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gtty1os.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp8gtty1os.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvc2frtq.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpuvc2frtq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqg6h7r1.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpjqg6h7r1.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4q18xfn.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpn4q18xfn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i + 1] = tostring(i)\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82vyglto.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp82vyglto.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j4ya_bx.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp5j4ya_bx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpda4pomxc.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpda4pomxc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1djw0xuy.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp1djw0xuy.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvetbe7r8.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpvetbe7r8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog_vs8a0.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpog_vs8a0.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkdnkayx.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpjkdnkayx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6013_i4w.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp6013_i4w.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl7pcwdl.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpkl7pcwdl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv81ysi6.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpyv81ysi6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj7sa931.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpzj7sa931.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3fcl3ep.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpl3fcl3ep.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x8_3vfp.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp_x8_3vfp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4n541_g.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpu4n541_g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04nariw9.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp04nariw9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrpys8nv.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpsrpys8nv.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8jmay9n.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpg8jmay9n.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphubolpim.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmphubolpim.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ygkg6vr.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp0ygkg6vr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wmyovpt.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp1wmyovpt.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjyc5e71.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpgjyc5e71.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yvobnj1.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp8yvobnj1.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53d0n4l_.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp53d0n4l_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffpf0k12.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpffpf0k12.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopaskp0h.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpopaskp0h.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0jo8mpi.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpe0jo8mpi.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmb3xe1ai.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpmb3xe1ai.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyibrpji_.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpyibrpji_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5wm5eqb.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpi5wm5eqb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6w0_nyhm.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp6w0_nyhm.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ly30zfu.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp0ly30zfu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rhfmpxp.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp7rhfmpxp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxadjlhcd.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpxadjlhcd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpolfra8.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmprpolfra8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. tostring(i) .. ' '\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zukk0_9.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp7zukk0_9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6pm7w93.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpv6pm7w93.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp177e24ru.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp177e24ru.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd94vvrx6.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpd94vvrx6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3s2e2h8.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpv3s2e2h8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o4qsy0l.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp2o4qsy0l.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = ''\n \
    \   for i = 0, n do\n        result = result .. ' ' .. i\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_opase0.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpj_opase0.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnhxdozw.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpwnhxdozw.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvs2k37r.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpqvs2k37r.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzzudqv6.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmprzzudqv6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3c4c9ic9.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp3c4c9ic9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbtl9ddq.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmprbtl9ddq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuf5ra5un.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpuf5ra5un.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt09w1gaw.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpt09w1gaw.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphaqyyugw.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmphaqyyugw.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3ofq_tr.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpm3ofq_tr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3bfagc_.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpo3bfagc_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_076m8o.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpe_076m8o.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ipyupgg.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp7ipyupgg.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndmtbzfw.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpndmtbzfw.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphs7ktrtc.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmphs7ktrtc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpei56uih6.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpei56uih6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw92dfeg.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpxw92dfeg.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqb08nlv.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmptqb08nlv.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr88pvya.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpfr88pvya.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_y0p1vc.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpc_y0p1vc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3q5cdtn.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpt3q5cdtn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk5ik2q3.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpqk5ik2q3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpo0kc6y.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmplpo0kc6y.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyajogmf5.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpyajogmf5.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmn0bka1.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpbmn0bka1.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5nkwmd8.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmps5nkwmd8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcsmtjaa.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpxcsmtjaa.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = ''\n    for\
    \ i = 0, n do\n        str = str .. ' ' .. i\n    end\n    return str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6d36mgd.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpe6d36mgd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmmahiq_.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpxmmahiq_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfs0303m3.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpfs0303m3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21ne1jv_.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp21ne1jv_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvygm8b2r.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpvygm8b2r.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w5ad6if.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp9w5ad6if.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgpu25vq.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmppgpu25vq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
