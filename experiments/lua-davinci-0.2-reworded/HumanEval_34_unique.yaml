---
name: HumanEval_34_unique
language: lua
prompt: |
  -- Return sorted unique elements in a table
  -- >>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})
  -- {0, 2, 3, 5, 9, 123}
  local function unique(l)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = unique
      lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not contains(res, v) then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not res[v] then
        res[v] = true
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          r[v] = true
      end
      local r2 = {}
      for k, _ in pairs(r) do
          table.insert(r2, k)
      end
      table.sort(r2)
      return r2
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not contains(res, v) then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          r[v] = true
      end
      return keys(r)
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if not t[v] then
              t[v] = true
              table.insert(t, v)
          end
      end
      return t
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not contains(res, v) then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r,
  v)\n\t\tend\n\tend\n\treturn r\nend"
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local seen = {}
      local result = {}
      for _, v in ipairs(l) do
          if not seen[v] then
              table.insert(result, v)
              seen[v] = true
          end
      end
      return result
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not contains(res, v) then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if not t[v] then
        t[v] = true
        table.insert(t, v)
      end
    end
    return t
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      r[v] = true
    end
    local u = {}
    for k, _ in pairs(r) do
      u[#u+1] = k
    end
    table.sort(u)
    return u
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      r[v] = true
    end
    local r2 = {}
    for k, _ in pairs(r) do
      table.insert(r2, k)
    end
    table.sort(r2)
    return r2
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local seen = {}
    local result = {}
    for _, v in ipairs(l) do
      if not seen[v] then
        table.insert(result, v)
        seen[v] = true
      end
    end
    return result
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          s[v] = true
      end
      local r = {}
      for k, _ in pairs(s) do
          table.insert(r, k)
      end
      table.sort(r)
      return r
  end
- |2-
    local r = {}
    for _,v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r,
  v)\n\t\tend\n\tend\n\treturn r\nend"
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not contains(res, v) then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      t[v] = true
    end
    local r = {}
    for k, _ in pairs(t) do
      table.insert(r, k)
    end
    table.sort(r)
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local s = {}
    for _, v in ipairs(l) do
      s[v] = true
    end
    local r = {}
    for k, _ in pairs(s) do
      table.insert(r, k)
    end
    table.sort(r)
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local hash = {}
      local res = {}
      for _, v in ipairs(l) do
          if not hash[v] then
              res[#res+1] = v
              hash[v] = true
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _,v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r,
  v)\n\t\tend\n\tend\n\treturn r\nend"
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for i = 1, #l do
      r[l[i]] = true
    end
    local u = {}
    for k, _ in pairs(r) do
      u[#u + 1] = k
    end
    table.sort(u)
    return u
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not res[v] then
        res[v] = true
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local u = {}
    for _, v in ipairs(l) do
      u[v] = true
    end
    local r = {}
    for k, _ in pairs(u) do
      table.insert(r, k)
    end
    table.sort(r)
    return r
  end
- "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\tlocal r =
  {}\n\tfor k in pairs(t) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn
  r\nend"
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      r[v] = true
    end
    return keys(r)
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local u = {}
    for _, v in ipairs(l) do
      u[v] = true
    end
    local r = {}
    for k, _ in pairs(u) do
      table.insert(r, k)
    end
    table.sort(r)
    return r
  end
- |2-
    local seen = {}
    local result = {}
    for _, v in ipairs(l) do
      if not seen[v] then
        table.insert(result, v)
        seen[v] = true
      end
    end
    return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not res[v] then
        res[v] = true
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          r[v] = true
      end
      return keys(r)
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      r[v] = true
    end
    local u = {}
    for k, _ in pairs(r) do
      u[#u+1] = k
    end
    table.sort(u)
    return u
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not contains(res, v) then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if not contains(res, v) then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      t[v] = true
    end
    local r = {}
    for k, _ in pairs(t) do
      table.insert(r, k)
    end
    table.sort(r)
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          r[v] = true
      end
      return keys(r)
  end
- |2-
      local seen = {}
      local result = {}
      for _, v in ipairs(l) do
          if not seen[v] then
              table.insert(result, v)
              seen[v] = true
          end
      end
      return result
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if not t[v] then
              t[v] = true
              table.insert(t, v)
          end
      end
      return t
  end
- |2-
      local u = {}
      for _, v in ipairs(l) do
          if not u[v] then
              u[v] = true
              table.insert(u, v)
          end
      end
      return u
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      r[v] = true
    end
    return keys(r)
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      r[v] = true
    end
    return keys(r)
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      t[v] = true
    end
    local r = {}
    for k, _ in pairs(t) do
      table.insert(r, k)
    end
    table.sort(r)
    return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if not contains(res, v) then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        table.insert(r, v)
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      r[v] = true
    end
    local u = {}
    for k, _ in pairs(r) do
      u[#u+1] = k
    end
    table.sort(u)
    return u
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not contains(r, v) then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if not r[v] then
              r[v] = true
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not contains(r, v) then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if not r[v] then
        r[v] = true
        table.insert(r, v)
      end
    end
    return r
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
