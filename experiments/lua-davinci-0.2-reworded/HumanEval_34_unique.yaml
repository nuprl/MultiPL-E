name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local res = {}\n  for _, v in ipairs(l) do\n    if not contains(res,\
    \ v) then\n      table.insert(res, v)\n    end\n  end\n  return res\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n   \
    \         r[v] = true\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local r = {}\n\
    \  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v]\
    \ then\n      r[v] = true\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n    \
    \  r[v] = true\n      table.insert(r, v)\n    end\n  end\n  return r\nend", " \
    \ local res = {}\n  for _, v in ipairs(l) do\n    if not res[v] then\n      res[v]\
    \ = true\n      table.insert(res, v)\n    end\n  end\n  return res\nend", "  \
    \  local r = {}\n    for _, v in ipairs(l) do\n        r[v] = true\n    end\n\
    \    local r2 = {}\n    for k, _ in pairs(r) do\n        table.insert(r2, k)\n\
    \    end\n    table.sort(r2)\n    return r2\nend", "  local res = {}\n  for _,\
    \ v in ipairs(l) do\n    if not contains(res, v) then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v]\
    \ then\n      r[v] = true\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local r = {}\n\
    \    for _, v in ipairs(l) do\n        if not r[v] then\n            r[v] = true\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n   \
    \         r[v] = true\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v]\
    \ then\n      r[v] = true\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  \
    \  local r = {}\n    for _, v in ipairs(l) do\n        r[v] = true\n    end\n\
    \    return keys(r)\nend", "    local r = {}\n    for _, v in ipairs(l) do\n \
    \       if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n  \
    \  if not r[v] then\n      r[v] = true\n      r[#r + 1] = v\n    end\n  end\n\
    \  return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n    \
    \        r[v] = true\n            table.insert(r, v)\n        end\n    end\n \
    \   return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        if\
    \ not t[v] then\n            t[v] = true\n            table.insert(t, v)\n   \
    \     end\n    end\n    return t\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "  local res = {}\n  for _, v in ipairs(l) do\n    if not contains(res,\
    \ v) then\n      table.insert(res, v)\n    end\n  end\n  return res\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v)\
    \ then\n            table.insert(r, v)\n        end\n    end\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", "\t\
    local r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\
    \ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "  local r = {}\n  for\
    \ _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      r[#r + 1] = v\n    end\n  end\n  return\
    \ r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local r = {}\n\
    \    for _, v in ipairs(l) do\n        if not contains(r, v) then\n          \
    \  table.insert(r, v)\n        end\n    end\n    return r\nend", "  local r =\
    \ {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n  \
    \    table.insert(r, v)\n    end\n  end\n  return r\nend", "  local r = {}\n \
    \ for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n          \
    \  table.insert(result, v)\n            seen[v] = true\n        end\n    end\n\
    \    return result\nend", "  local res = {}\n  for _, v in ipairs(l) do\n    if\
    \ not contains(res, v) then\n      table.insert(res, v)\n    end\n  end\n  return\
    \ res\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    if not t[v] then\n\
    \      t[v] = true\n      table.insert(t, v)\n    end\n  end\n  return t\nend",
  "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] =\
    \ true\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n\
    \      r[v] = true\n      r[#r + 1] = v\n    end\n  end\n  return r\nend", " \
    \ local r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  local u\
    \ = {}\n  for k, _ in pairs(r) do\n    u[#u+1] = k\n  end\n  table.sort(u)\n \
    \ return u\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n       \
    \ if not r[v] then\n            r[v] = true\n            r[#r + 1] = v\n     \
    \   end\n    end\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n\
    \  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    r[v]\
    \ = true\n  end\n  local r2 = {}\n  for k, _ in pairs(r) do\n    table.insert(r2,\
    \ k)\n  end\n  table.sort(r2)\n  return r2\nend", "  local r = {}\n  for _, v\
    \ in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r, v)\n\
    \    end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(res, v) then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, v in ipairs(l) do\n    if not seen[v] then\n      table.insert(result,\
    \ v)\n      seen[v] = true\n    end\n  end\n  return result\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  \
    \  local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \ local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n \
    \     table.insert(r, v)\n    end\n  end\n  return r\nend", "  local r = {}\n\
    \  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local s = {}\n    for _, v in ipairs(l)\
    \ do\n        s[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(s)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "  local r = {}\n  for _,v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local r = {}\n\
    \  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            r[#r + 1] = v\n        end\n    end\n \
    \   return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n        if not contains(res,\
    \ v) then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ res\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n\
    \  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n  \
    \      if not r[v] then\n            r[v] = true\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "\tlocal r = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n  \
    \  if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n        if not contains(res,\
    \ v) then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ res\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n\
    \      r[v] = true\n      table.insert(r, v)\n    end\n  end\n  return r\nend",
  "    local res = {}\n    for _, v in ipairs(l) do\n        if not contains(res,\
    \ v) then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ res\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            r[#r + 1] = v\n        end\n    end\n    return r\nend",
  "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n  \
    \    table.insert(r, v)\n    end\n  end\n  return r\nend", "    local r = {}\n\
    \    for _, v in ipairs(l) do\n        if not contains(r, v) then\n          \
    \  table.insert(r, v)\n        end\n    end\n    return r\nend", "  local r =\
    \ {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n  \
    \    table.insert(r, v)\n    end\n  end\n  return r\nend", "  local res = {}\n\
    \  for _, v in ipairs(l) do\n    if not contains(res, v) then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "    local res = {}\n    for _, v in\
    \ ipairs(l) do\n        if not contains(res, v) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  \
    \  local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \ local r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] =\
    \ true\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            r[#r + 1] = v\n        end\n    end\n    return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n\
    \            r[v] = true\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local hash = {}\n    local res = {}\n    for _, v in\
    \ ipairs(l) do\n        if not hash[v] then\n            res[#res+1] = v\n   \
    \         hash[v] = true\n        end\n    end\n    return res\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local r = {}\n  for _,v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r,\
    \ v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local r = {}\n\
    \  for i = 1, #l do\n    r[l[i]] = true\n  end\n  local u = {}\n  for k, _ in\
    \ pairs(r) do\n    u[#u + 1] = k\n  end\n  table.sort(u)\n  return u\nend", " \
    \ local res = {}\n  for _, v in ipairs(l) do\n    if not res[v] then\n      res[v]\
    \ = true\n      table.insert(res, v)\n    end\n  end\n  return res\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    u[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(u) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "\tlocal t = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tt[v] = true\n\tend\n\tlocal r = {}\n\tfor k in pairs(t) do\n\
    \t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "  local r =\
    \ {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n  \
    \    table.insert(r, v)\n    end\n  end\n  return r\nend", "  local r = {}\n \
    \ for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    r[v] = true\n  end\n  return keys(r)\nend", "  local r = {}\n  for _,\
    \ v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r, v)\n\
    \    end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n       \
    \ if not contains(r, v) then\n            table.insert(r, v)\n        end\n  \
    \  end\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if\
    \ not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n    \
    \  r[v] = true\n      table.insert(r, v)\n    end\n  end\n  return r\nend", " \
    \   local res = {}\n    for _, v in ipairs(l) do\n        if not contains(res,\
    \ v) then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ res\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n\
    \      r[v] = true\n      table.insert(r, v)\n    end\n  end\n  return r\nend",
  "  local u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local r =\
    \ {}\n  for k, _ in pairs(u) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "  local seen = {}\n  local result = {}\n  for _, v in ipairs(l)\
    \ do\n    if not seen[v] then\n      table.insert(result, v)\n      seen[v] =\
    \ true\n    end\n  end\n  return result\nend", "    local res = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(res, v) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "  local r = {}\n  for _, v\
    \ in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      r[#r + 1] = v\n    end\n  end\n  return\
    \ r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local r = {}\n\
    \  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local res = {}\n  for _, v in ipairs(l)\
    \ do\n    if not res[v] then\n      res[v] = true\n      table.insert(res, v)\n\
    \    end\n  end\n  return res\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        r[v] = true\n    end\n    return keys(r)\nend", "  local r = {}\n\
    \  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      r[#r + 1] = v\n    end\n  end\n  return\
    \ r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            r[#r + 1] = v\n        end\n    end\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \ local r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] =\
    \ true\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local res = {}\n    for _, v in ipairs(l) do\n        if not contains(res,\
    \ v) then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ res\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            r[#r + 1] = v\n        end\n    end\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v)\
    \ then\n            table.insert(r, v)\n        end\n    end\n    return r\nend",
  "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n  \
    \    table.insert(r, v)\n    end\n  end\n  return r\nend", "    local r = {}\n\
    \    for _, v in ipairs(l) do\n        if not r[v] then\n            r[v] = true\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \ local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n \
    \     r[#r + 1] = v\n    end\n  end\n  return r\nend", "  local r = {}\n  for\
    \ _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n     \
    \   if not contains(res, v) then\n            table.insert(res, v)\n        end\n\
    \    end\n    return res\nend", "  local r = {}\n  for _, v in ipairs(l) do\n\
    \    if not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n\
    \  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n  \
    \      if not contains(r, v) then\n            r[#r + 1] = v\n        end\n  \
    \  end\n    return r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(res, v) then\n            table.insert(res, v)\n    \
    \    end\n    end\n    return res\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    r[v] = true\n  end\n  local u = {}\n  for k, _ in pairs(r) do\n    u[#u+1]\
    \ = k\n  end\n  table.sort(u)\n  return u\nend", "  local res = {}\n  for _, v\
    \ in ipairs(l) do\n    if not contains(res, v) then\n      table.insert(res, v)\n\
    \    end\n  end\n  return res\nend", "    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(res, v) then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "  local res = {}\n  for _, v in\
    \ ipairs(l) do\n    if not contains(res, v) then\n      table.insert(res, v)\n\
    \    end\n  end\n  return res\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        r[v] = true\n    end\n    return keys(r)\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n   \
    \     if not seen[v] then\n            table.insert(result, v)\n            seen[v]\
    \ = true\n        end\n    end\n    return result\nend", "    local t = {}\n \
    \   for _, v in ipairs(l) do\n        if not t[v] then\n            t[v] = true\n\
    \            table.insert(t, v)\n        end\n    end\n    return t\nend", " \
    \   local u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n   \
    \         u[v] = true\n            table.insert(u, v)\n        end\n    end\n\
    \    return u\nend", "    local r = {}\n    for _, v in ipairs(l) do\n       \
    \ if not contains(r, v) then\n            table.insert(r, v)\n        end\n  \
    \  end\n    return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n  \
    \  r[v] = true\n  end\n  return keys(r)\nend", "    local r = {}\n    for _, v\
    \ in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local res = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(res, v) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local res = {}\n    for\
    \ _, v in ipairs(l) do\n        if not contains(res, v) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "  local r = {}\n  for _, v in\
    \ ipairs(l) do\n    if not r[v] then\n      r[v] = true\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not r[v] then\n            r[v] = true\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "  local r = {}\n  for _, v in\
    \ ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r, v)\n   \
    \ end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n  \
    \  if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n\
    \            r[v] = true\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n\
    \  end\n  return keys(r)\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n  \
    \  if not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(res, v) then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n\
    \  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if\
    \ not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    r[v] = true\n  end\n  local u = {}\n  for k, _ in pairs(r) do\n    u[#u+1]\
    \ = k\n  end\n  table.sort(u)\n  return u\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not r[v] then\n            r[v] = true\n     \
    \       table.insert(r, v)\n        end\n    end\n    return r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      r[#r\
    \ + 1] = v\n    end\n  end\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n\
    \  end\n  return r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
