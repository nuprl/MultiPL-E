name: HumanEval_102_choose_num
language: lua
results:
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1vuh2nr.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpb1vuh2nr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    if x % 2 == 0 then\n        num =\
    \ x\n    else\n        num = x + 1\n    end\n    while num <= y do\n        return\
    \ num\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2om5dgeg.lua:25:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp2om5dgeg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n\tif x % 2 == 0 then\n\t\treturn x\n\telseif x + 1 <= y then\n\
    \t\treturn x + 1\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nq6sqty.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp1nq6sqty.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bwwlj45.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp6bwwlj45.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98jawmp4.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp98jawmp4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q6rl4ay.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp0q6rl4ay.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5k6ny0z.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpi5k6ny0z.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrydwefi.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpzrydwefi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hw0e7w8.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp_hw0e7w8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ == y then\n        return -1\n    else\n        return choose_num(x + 1, y)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gexh7k3.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp5gexh7k3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplr4s4n0g.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmplr4s4n0g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n\tif x % 2 == 0 then\n\t\treturn x\n\telseif x + 1 <= y then\n\
    \t\treturn x + 1\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1l18mmt.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpo1l18mmt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sislhbk.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp0sislhbk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: Write your code here\n    return -1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaij2rik_.lua:17:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpaij2rik_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x % 2 == 0 then\n\
    \        return x\n    elseif x + 1 <= y then\n        return x + 1\n    else\n\
    \        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hd7nbz9.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp7hd7nbz9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local i = y\n    while i >= x do\n        if i % 2 ==\
    \ 0 then\n            return i\n        end\n        i = i - 1\n    end\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtix3y6v.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpjtix3y6v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0m5iy0g4.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp0m5iy0g4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo9wxgff.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpyo9wxgff.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0vjr3ad.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpx0vjr3ad.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvn97toa.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpmvn97toa.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyibyfs1.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpqyibyfs1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr01ujomp.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpr01ujomp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  if x % 2 == 0 then\n    return x\n  elseif x + 1 <= y then\n\
    \    return x + 1\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf32aak8m.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpf32aak8m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q_tz8sk.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp6q_tz8sk.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x % 2 == 0 then\n\
    \        return x\n    elseif x + 1 <= y then\n        return x + 1\n    else\n\
    \        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsrroc8x.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpbsrroc8x.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_nf2mp9.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpe_nf2mp9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- YOUR CODE HERE\n    if x % 2 == 0 then\n        return\
    \ x\n    elseif x + 1 <= y then\n        return x + 1\n    else\n        return\
    \ -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44i653ho.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp44i653ho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    if x % 2 == 0 then\n        num =\
    \ x\n    else\n        num = x + 1\n    end\n    for i = num, y, 2 do\n      \
    \  if i <= y then\n            return i\n        end\n    end\n    return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_80t_jut.lua:27:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp_80t_jut.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsspvrnyr.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpsspvrnyr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptshyif8s.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmptshyif8s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: Write your code here\n    return -1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv6hslrq.lua:17:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpnv6hslrq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuf1u7yrq.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpuf1u7yrq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q_177sj.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp1q_177sj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5o0wwcp_.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp5o0wwcp_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wkbit7f.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp3wkbit7f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  if x > y then\n    return -1\n  end\n  if x % 2 == 0 then\n\
    \    return x\n  end\n  return choose_num(x + 1, y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkf1xo50.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmptkf1xo50.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprt8ad84a.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmprt8ad84a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjuqxqb_.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpcjuqxqb_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x%2 == 0 then\n\
    \        return x\n    elseif x+1 <= y then\n        return x+1\n    else\n  \
    \      return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1v07s3j.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpp1v07s3j.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2u_e9np.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpm2u_e9np.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7lq3w0yb.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp7lq3w0yb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  if x % 2 == 0 then\n    return x\n  elseif x + 1 <= y then\n\
    \    return x + 1\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66x89rco.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp66x89rco.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wcdgj2y.lua:17:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp8wcdgj2y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33lzofle.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp33lzofle.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9idzrbk.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpy9idzrbk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs4djaod.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpgs4djaod.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mak2bf6.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp0mak2bf6.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2cfyuqe4.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp2cfyuqe4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ == y then\n        return -1\n    else\n        return choose_num(x + 1, y)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqd9rqlgs.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpqd9rqlgs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x%2 == 0 then\n\
    \        return x\n    else\n        return x+1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6pesuji.lua:21:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmps6pesuji.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnt1sb18y.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpnt1sb18y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  if x > y then\n    return -1\n  end\n  if x % 2 == 0 then\n\
    \    return x\n  end\n  return choose_num(x + 1, y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6rkf2gn.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpu6rkf2gn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow84k7i3.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpow84k7i3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x%2 == 0 then\n\
    \        return x\n    elseif y%2 == 0 then\n        return y\n    else\n    \
    \    return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpxv2zyk.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpmpxv2zyk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gd4zoi.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpf7gd4zoi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  if x > y then\n    return -1\n  end\n  if x % 2 == 0 then\n\
    \    return x\n  end\n  return choose_num(x + 1, y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0osxgn3.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpx0osxgn3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local result = -1\n    for i = x, y do\n        if i %\
    \ 2 == 0 then\n            result = i\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio61zrwo.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpio61zrwo.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  if x % 2 == 0 then\n    return x\n  elseif x + 1 <= y then\n\
    \    return x + 1\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfvmbhnp.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpqfvmbhnp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    local max = -1\n\
    \    for i = x, y do\n        if i % 2 == 0 and i > max then\n            max\
    \ = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrckkbvi.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpnrckkbvi.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6bs39ra.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpx6bs39ra.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2gsdl_k.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpc2gsdl_k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug9ftidt.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpug9ftidt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprb5ooco.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpprb5ooco.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x % 2 == 0 then\n\
    \        return x\n    elseif y % 2 == 0 then\n        return y\n    else\n  \
    \      return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tg7y2mw.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp6tg7y2mw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0aa3a9k3.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp0aa3a9k3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrttq6sf.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpxrttq6sf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3u9tm90u.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp3u9tm90u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6szbl9v.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp_6szbl9v.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhzmuud8.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpkhzmuud8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o1vrn6r.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp0o1vrn6r.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  local num = -1\n  for i = x, y do\n    if i % 2 == 0 then\n\
    \      num = i\n    end\n  end\n  return num\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- your code here\n    if x % 2 == 0 then\n        return\
    \ x\n    elseif x + 1 <= y then\n        return x + 1\n    else\n        return\
    \ -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_r7fl59.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp6_r7fl59.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t3ar7u0.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp9t3ar7u0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- your code here\n    if x % 2 == 0 then\n        return\
    \ x\n    elseif x % 2 == 1 and y % 2 == 0 then\n        return y\n    elseif x\
    \ % 2 == 1 and y % 2 == 1 then\n        return -1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_kfsy4q.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpn_kfsy4q.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: Implement this function.\n    -- Hint: You can\
    \ use the modulo operator to check if a number is even.\n    -- Hint: You can\
    \ use the max function to find the largest number.\n    -- Hint: You can use the\
    \ min function to find the smallest number.\n    -- Hint: You can use the range\
    \ function to create a list of numbers.\n    -- Hint: You can use the filter function\
    \ to filter a list of numbers.\n    -- Hint: You can use the head function to\
    \ get the first element of a list.\n    -- Hint: You can use the empty function\
    \ to check if a list is empty.\n    -- Hint: You can use the length function to\
    \ check the length of a list.\n    -- Hint: You can use the any function to check\
    \ if any element of a list\n    -- satisfies a condition.\n    -- Hint: You can\
    \ use the all function to check if all elements of a list\n    -- satisfy a condition.\n\
    \    -- Hint: You can use the map function to apply a function to all elements\n\
    \    -- of a list.\n    -- Hint: You can use the foldl function to fold a list.\n\
    \    -- Hint: You can use the foldr function to fold a list.\n    -- Hint: You\
    \ can use the zip function to zip two lists together.\n    -- Hint: You can use\
    \ the unzip function to unzip a list of pairs.\n    -- Hint: You can use the zip_with\
    \ function to zip two lists together using\n    -- a function.\n    -- Hint: You\
    \ can use the zip_with3 function to zip three lists together\n    -- using a function.\n\
    \    -- Hint: You can use the zip_with4 function to zip four lists together\n\
    \    -- using a function.\n    -- Hint: You can use the zip_with5 function to\
    \ zip five lists together\n    -- using a function.\n    -- Hint: You can use\
    \ the zip_with6 function to zip six lists together\n    -- using a function.\n\
    \    -- Hint: You can use the zip_with7 function to zip seven lists together\n\
    \    -- using a function.\n    -- Hint: You can use the zip_with8 function to\
    \ zip eight lists together\n    -- using a function.\n    --\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplbbyh20j.lua:58: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  if x > y then\n    return -1\n  end\n  if x % 2 == 0 then\n\
    \    return x\n  end\n  return choose_num(x + 1, y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvunjfc5.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmprvunjfc5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplj68r063.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmplj68r063.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ztobfdj.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp5ztobfdj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- YOUR CODE HERE\n    if x%2 == 0 then\n        return\
    \ x\n    elseif x+1 == y then\n        return -1\n    else\n        return choose_num(x+1,\
    \ y)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplloxem10.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmplloxem10.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4o_y9bz.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpy4o_y9bz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpust65s39.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpust65s39.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  local n = math.max(x, y)\n  if n % 2 == 0 then\n    return\
    \ n\n  else\n    return n - 1\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5yacd5a.lua:22:\
    \ expected: -1, actual: 12\nstack traceback:\n\t/tmp/tmpn5yacd5a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wuc_jq_.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp3wuc_jq_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3317w1k1.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp3317w1k1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7q4j26u.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpm7q4j26u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x % 2 == 0 then\n\
    \        return x\n    elseif y % 2 == 0 then\n        return y\n    else\n  \
    \      return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbied7e3r.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpbied7e3r.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_65zuc6.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpa_65zuc6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x % 2 == 0 then\n\
    \        return x\n    elseif x + 1 <= y then\n        return x + 1\n    else\n\
    \        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ze0cfpk.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp7ze0cfpk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local n = x\n    while n <= y do\n        if n % 2 ==\
    \ 0 then\n            return n\n        end\n        n = n + 1\n    end\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkr30vns_.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpkr30vns_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8ul81j2.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpr8ul81j2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        if x >= y then\n         \
    \   return x\n        else\n            return choose_num(x + 2, y)\n        end\n\
    \    else\n        return choose_num(x + 1, y)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpnw8v92.lua:24:\
    \ expected: 14, actual: 16\nstack traceback:\n\t/tmp/tmpmpnw8v92.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtlxtwzm.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpxtlxtwzm.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw509h_0f.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpw509h_0f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgar2efz9.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpgar2efz9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x > y then\n\
    \        return -1\n    end\n    if x % 2 == 0 then\n        return x\n    end\n\
    \    return choose_num(x + 1, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyvyrr4l.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpqyvyrr4l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp5z69sh.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpnp5z69sh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2_qnckw.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpr2_qnckw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2pxc67d.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpn2pxc67d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ == y then\n        return -1\n    else\n        return choose_num(x + 1, y)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuep1i4_c.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpuep1i4_c.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawd6sw8s.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpawd6sw8s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0dm737i.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpz0dm737i.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- YOUR CODE HERE\n    if x%2 == 0 then\n        return\
    \ x\n    elseif x+1 <= y then\n        return x+1\n    else\n        return -1\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2d6ps4ph.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp2d6ps4ph.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  -- YOUR CODE HERE\n  if x > y then\n    return -1\n  end\n\
    \  if x % 2 == 0 then\n    return x\n  end\n  return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvivxb1u3.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpvivxb1u3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7ch9qvb.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpj7ch9qvb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphszzjlaj.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmphszzjlaj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ == y then\n        return -1\n    else\n        return choose_num(x + 1, y)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wbfoqqi.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp9wbfoqqi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_ncfml0.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp3_ncfml0.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1sbx5mg.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpe1sbx5mg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3yem2sn.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpx3yem2sn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfdibeou.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpwfdibeou.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4inf3fc.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpz4inf3fc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw5wjj7s.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpsw5wjj7s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jrzqat7.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp9jrzqat7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli_ux5ov.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpli_ux5ov.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  -- TODO: implement this function\n  if x % 2 == 0 then\n\
    \    return x\n  elseif y % 2 == 0 then\n    return y\n  else\n    return -1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_yucw76.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpp_yucw76.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lnnf76a.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp9lnnf76a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmpq2h8z.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpnmpq2h8z.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsaw0t_u.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpbsaw0t_u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhyz3rr9.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpkhyz3rr9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9z626r1.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmps9z626r1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptc7zfwkp.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmptc7zfwkp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x%2 == 0 then\n\
    \        return x\n    elseif x+1 <= y then\n        return x+1\n    else\n  \
    \      return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85seybea.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp85seybea.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local even = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            even = i\n        end\n    end\n    return even\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x%2 == 0 then\n\
    \        return x\n    elseif x+1 <= y then\n        return x+1\n    else\n  \
    \      return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgfch1zu.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmptgfch1zu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max_even = -1\n    for i = x, y do\n        if i\
    \ % 2 == 0 and i > max_even then\n            max_even = i\n        end\n    end\n\
    \    return max_even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0an3hhr9.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp0an3hhr9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max_even = -1\n    for i = x, y do\n        if i\
    \ % 2 == 0 and i > max_even then\n            max_even = i\n        end\n    end\n\
    \    return max_even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjey_jsbf.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpjey_jsbf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_rs4dv8.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp3_rs4dv8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6cmq4is.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp_6cmq4is.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j41l4yg.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp5j41l4yg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: Implement this function\n    return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp336flmnt.lua:17:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp336flmnt.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprquzlbm7.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmprquzlbm7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw454tev5.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpw454tev5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0bajylp.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpm0bajylp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local result = -1\n    for i = x, y do\n        if i %\
    \ 2 == 0 then\n            result = i\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n\tif x % 2 == 0 then\n\t\treturn x\n\telseif x + 1 == y then\n\
    \t\treturn -1\n\telse\n\t\treturn choose_num(x + 1, y)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos48syun.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpos48syun.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local result = -1\n    for i = x, y do\n        if i %\
    \ 2 == 0 then\n            result = i\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_r7totn.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp6_r7totn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyoshz2q.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpeyoshz2q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n\tlocal n = math.max(x, y)\n\tif n % 2 == 0 then\n\t\treturn\
    \ n\n\telse\n\t\treturn n - 1\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ggn8oyo.lua:22:\
    \ expected: -1, actual: 12\nstack traceback:\n\t/tmp/tmp6ggn8oyo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xmnxjor.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp3xmnxjor.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f2sde1m.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp5f2sde1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x%2 == 0 then\n\
    \        return x\n    elseif x+1 <= y then\n        return x+1\n    else\n  \
    \      return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms68rx5z.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpms68rx5z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8w45o9r.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpz8w45o9r.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe65qfo4i.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpe65qfo4i.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81uwzsaq.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp81uwzsaq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  if x % 2 == 0 then\n    return x\n  elseif x + 1 <= y then\n\
    \    return x + 1\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptil_7cix.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmptil_7cix.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6l9h81y2.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp6l9h81y2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    -- TODO: implement this function\n    if x % 2 == 0 then\n\
    \        return x\n    elseif x + 1 <= y then\n        return x + 1\n    else\n\
    \        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m6mggu2.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp9m6mggu2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu25gmdc.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmphu25gmdc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vp_5u78.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp8vp_5u78.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local result = -1\n    for i = x, y do\n        if i %\
    \ 2 == 0 then\n            result = i\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif y % 2\
    \ == 0 then\n        return y\n    else\n        return -1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiw5ykis.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmphiw5ykis.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  -- TODO: implement this function\n  if x % 2 == 0 then\n\
    \    return x\n  elseif x + 1 <= y then\n    return x + 1\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzd1zo0w.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpyzd1zo0w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ala7ebg.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp0ala7ebg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max_even = -1\n    for i = x, y do\n        if i\
    \ % 2 == 0 and i > max_even then\n            max_even = i\n        end\n    end\n\
    \    return max_even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local max = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphunopfh0.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmphunopfh0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dj6z452.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp1dj6z452.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n  local n = math.max(x, y)\n  while n >= x do\n    if n %\
    \ 2 == 0 then\n      return n\n    end\n    n = n - 1\n  end\n  return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87zalvjh.lua:26:\
    \ expected: -1, actual: 5234\nstack traceback:\n\t/tmp/tmp87zalvjh.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    local num = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 then\n            num = i\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbc5ck4c.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpkbc5ck4c.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n\tlocal max = -1\n\tfor i = x, y do\n\t\tif i % 2 == 0 and\
    \ i > max then\n\t\t\tmax = i\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function\
    \ choose_num(x, y)\n    if x % 2 == 0 then\n        return x\n    elseif x + 1\
    \ <= y then\n        return x + 1\n    else\n        return -1\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9ss25ct.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpv9ss25ct.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
