---
name: HumanEval_0_has_close_elements
language: lua
prompt: |
  -- Check if in given table of numbers, are any two numbers closer to each other than
  -- given threshold.
  -- >>> has_close_elements({1.0, 2.0, 3.0}, 0.5)
  -- false
  -- >>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)
  -- true
  local function has_close_elements(numbers, threshold)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = has_close_elements
      lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)
      lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)
      lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)
      lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)
      lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)
      lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)
      lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table_sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local last_num = nil
      for _, num in ipairs(numbers) do
          if last_num ~= nil then
              if math.abs(num - last_num) < threshold then
                  return true
              end
          end
          last_num = num
      end
      return false
  end
- |2-
    local sorted = {}
    for _, number in ipairs(numbers) do
      table.insert(sorted, number)
    end
    table.sort(sorted)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      local n = #numbers
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      local last = numbers[1]
      for i = 2, #numbers do
          if math.abs(numbers[i] - last) < threshold then
              return true
          end
          last = numbers[i]
      end
      return false
  end
- |2-
      local last_number = numbers[1]
      for i = 2, #numbers do
          if math.abs(numbers[i] - last_number) < threshold then
              return true
          end
          last_number = numbers[i]
      end
      return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = sort(numbers)
      local last = sorted[1]
      for i = 2, #sorted do
          if sorted[i] - last < threshold then
              return true
          end
          last = sorted[i]
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local n = #numbers
    if n < 2 then
      return false
    end
    for i = 1, n - 1 do
      for j = i + 1, n do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      local sorted = {}
      for _, v in ipairs(numbers) do
          table.insert(sorted, v)
      end
      table.sort(sorted)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local last_number = nil
      for _, number in ipairs(numbers) do
          if last_number and math.abs(number - last_number) < threshold then
              return true
          end
          last_number = number
      end
      return false
  end
- |2-
    local last_number = numbers[1]
    for i = 2, #numbers do
      if math.abs(numbers[i] - last_number) < threshold then
        return true
      end
      last_number = numbers[i]
    end
    return false
  end
- |2-
      local min_distance = math.huge
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < min_distance then
                  min_distance = distance
              end
          end
      end
      return min_distance < threshold
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local last_number = numbers[1]
      for i = 2, #numbers do
          if math.abs(numbers[i] - last_number) < threshold then
              return true
          end
          last_number = numbers[i]
      end
      return false
  end
- |2-
      local min_distance = math.huge
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              min_distance = math.min(min_distance, math.abs(numbers[i] - numbers[j]))
          end
      end
      return min_distance < threshold
  end
- |2-
      local min_diff = math.huge
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
              end
          end
      end
      return min_diff < threshold
  end
- |2-
      local last_number = nil
      for _, number in ipairs(numbers) do
          if last_number ~= nil then
              if math.abs(number - last_number) < threshold then
                  return true
              end
          end
          last_number = number
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local min_diff = math.huge
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        min_diff = math.min(min_diff, math.abs(numbers[i] - numbers[j]))
      end
    end
    return min_diff < threshold
  end
- |2-
    local min_distance = math.huge
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local distance = math.abs(numbers[i] - numbers[j])
        if distance < min_distance then
          min_distance = distance
        end
      end
    end
    return min_distance < threshold
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local n = #numbers
      if n < 2 then
          return false
      end
      local sorted = table.sort(numbers)
      for i = 1, n - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local last_number = nil
      for _, number in ipairs(numbers) do
          if last_number ~= nil then
              if math.abs(number - last_number) < threshold then
                  return true
              end
          end
          last_number = number
      end
      return false
  end
- |2-
    local sorted = sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local last = numbers[1]
    for i = 2, #numbers do
      if math.abs(numbers[i] - last) < threshold then
        return true
      end
      last = numbers[i]
    end
    return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
    local min_diff = math.huge
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
        end
      end
    end
    return min_diff < threshold
  end
- |2-
      local min_distance = math.huge
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < min_distance then
                  min_distance = distance
              end
          end
      end
      return min_distance < threshold
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local n = #numbers
      if n < 2 then
          return false
      end
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local n = #numbers
      if n < 2 then
          return false
      end
      local sorted = table.sort(numbers)
      for i = 1, n - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local n = #numbers
      if n < 2 then
          return false
      end
      local sorted = {}
      for i = 1, n do
          sorted[i] = numbers[i]
      end
      table.sort(sorted)
      for i = 1, n - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      local min_distance = math.huge
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < min_distance then
                  min_distance = distance
              end
          end
      end
      return min_distance < threshold
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i+1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local n = #numbers
      for i = 1, n do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local n = #numbers
    for i = 1, n do
      for j = i + 1, n do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      local n = #numbers
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local n = #numbers
      if n < 2 then
          return false
      end
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      local prev = sorted[1]
      for i = 2, #sorted do
          if sorted[i] - prev < threshold then
              return true
          end
          prev = sorted[i]
      end
      return false
  end
- |2-
    local sorted = sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local n = #numbers
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local n = #numbers
    if n < 2 then
      return false
    end
    for i = 1, n - 1 do
      for j = i + 1, n do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      local n = #numbers
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local min_diff = math.huge
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              min_diff = math.min(min_diff, math.abs(numbers[i] - numbers[j]))
          end
      end
      return min_diff < threshold
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = {}
      for _, n in ipairs(numbers) do
          table.insert(sorted, n)
      end
      table.sort(sorted)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local n = #numbers
      if n < 2 then
          return false
      end
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if math.abs(sorted[i] - sorted[i + 1]) < threshold then
        return true
      end
    end
    return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local last_number = numbers[1]
      for i = 2, #numbers do
          if math.abs(numbers[i] - last_number) < threshold then
              return true
          end
          last_number = numbers[i]
      end
      return false
  end
- |2-
    local sorted = sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
    local last_number = 0
    for _, number in ipairs(numbers) do
      if number - last_number < threshold then
        return true
      end
      last_number = number
    end
    return false
  end
- |2-
    local min_distance = math.huge
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local distance = math.abs(numbers[i] - numbers[j])
        if distance < min_distance then
          min_distance = distance
        end
      end
    end
    return min_distance < threshold
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- "\tlocal n = #numbers\n\tif n < 2 then\n\t\treturn false\n\tend\n\ttable.sort(numbers)\n\tfor
  i = 1, n - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\t\t\treturn
  true\n\t\tend\n\tend\n\treturn false\nend"
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local n = #numbers
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local last_number = nil
      for _, number in ipairs(numbers) do
          if last_number then
              if math.abs(number - last_number) < threshold then
                  return true
              end
          end
          last_number = number
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local min_diff = math.huge
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
              end
          end
      end
      return min_diff < threshold
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      local prev = sorted[1]
      for i = 2, #sorted do
          if sorted[i] - prev < threshold then
              return true
          end
          prev = sorted[i]
      end
      return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local last = numbers[1]
      for i = 2, #numbers do
          if numbers[i] - last < threshold then
              return true
          end
          last = numbers[i]
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local n = #numbers
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local n = #numbers
      if n < 2 then
          return false
      end
      local sorted = sort(numbers)
      local prev = sorted[1]
      for i = 2, n do
          local curr = sorted[i]
          if curr - prev < threshold then
              return true
          end
          prev = curr
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local has_close_elements = false
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  has_close_elements = true
                  break
              end
          end
      end
      return has_close_elements
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local min_distance = math.huge
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              min_distance = math.min(min_distance, math.abs(numbers[i] - numbers[j]))
          end
      end
      return min_distance < threshold
  end
- |2-
    local n = #numbers
    for i = 1, n - 1 do
      for j = i + 1, n do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local sorted = sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local n = #numbers
      if n < 2 then
          return false
      end
      table.sort(numbers)
      for i = 1, n - 1 do
          if numbers[i + 1] - numbers[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local last_number = nil
      for _, number in ipairs(numbers) do
          if last_number then
              if math.abs(number - last_number) < threshold then
                  return true
              end
          end
          last_number = number
      end
      return false
  end
- |2-
    local sorted = table.sort(numbers)
    for i = 1, #sorted - 1 do
      if sorted[i + 1] - sorted[i] < threshold then
        return true
      end
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local last_number = nil
    for _, number in ipairs(numbers) do
      if last_number and math.abs(number - last_number) < threshold then
        return true
      end
      last_number = number
    end
    return false
  end
- |2-
      local sorted = {}
      for _, v in ipairs(numbers) do
          table.insert(sorted, v)
      end
      table.sort(sorted)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local min_distance = math.huge
    for i, a in ipairs(numbers) do
      for j, b in ipairs(numbers) do
        if i ~= j then
          local distance = math.abs(a - b)
          if distance < min_distance then
            min_distance = distance
          end
        end
      end
    end
    return min_distance < threshold
  end
- |2-
      local last_number = numbers[1]
      for i = 2, #numbers do
          if numbers[i] - last_number < threshold then
              return true
          end
          last_number = numbers[i]
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local last_number = nil
    for _, number in ipairs(numbers) do
      if last_number ~= nil and math.abs(number - last_number) < threshold then
        return true
      end
      last_number = number
    end
    return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local last_number = numbers[1]
    for i = 2, #numbers do
      if numbers[i] - last_number < threshold then
        return true
      end
      last_number = numbers[i]
    end
    return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local last_number = numbers[1]
      for i = 2, #numbers do
          if numbers[i] - last_number < threshold then
              return true
          end
          last_number = numbers[i]
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local n = #numbers
      for i = 1, n - 1 do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local last_number = nil
      for _, number in ipairs(numbers) do
          if last_number ~= nil then
              if math.abs(number - last_number) < threshold then
                  return true
              end
          end
          last_number = number
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local min_distance = math.huge
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local distance = math.abs(numbers[i] - numbers[j])
        if distance < min_distance then
          min_distance = distance
        end
      end
    end
    return min_distance < threshold
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local last_number = nil
      for _, number in ipairs(numbers) do
          if last_number and math.abs(number - last_number) < threshold then
              return true
          end
          last_number = number
      end
      return false
  end
- |2-
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
    local last = numbers[1]
    for i = 2, #numbers do
      if math.abs(numbers[i] - last) < threshold then
        return true
      end
      last = numbers[i]
    end
    return false
  end
- |2-
      local n = #numbers
      for i = 1, n do
          for j = i + 1, n do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        if math.abs(numbers[i] - numbers[j]) < threshold then
          return true
        end
      end
    end
    return false
  end
- |2-
      local i = 1
      while i <= #numbers do
          local j = i + 1
          while j <= #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
              j = j + 1
          end
          i = i + 1
      end
      return false
  end
- |2-
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              if math.abs(numbers[i] - numbers[j]) < threshold then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
      local last_number = numbers[1]
      for _, number in ipairs(numbers) do
          if math.abs(number - last_number) < threshold then
              return true
          end
          last_number = number
      end
      return false
  end
- |2-
      local sorted = table.sort(numbers)
      local last = sorted[1]
      for _, n in ipairs(sorted) do
          if n - last < threshold then
              return true
          end
          last = n
      end
      return false
  end
- |2-
      local sorted = sort(numbers)
      for i = 1, #sorted - 1 do
          if sorted[i + 1] - sorted[i] < threshold then
              return true
          end
      end
      return false
  end
- |2-
    local last = numbers[1]
    for i = 2, #numbers do
      if math.abs(numbers[i] - last) < threshold then
        return true
      end
      last = numbers[i]
    end
    return false
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
