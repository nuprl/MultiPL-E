---
name: HumanEval_158_find_max
language: lua
results:
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not char:find(max_word) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptv3i27tt.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmptv3i27tt.lua:16:
    in local 'candidate'\n\t/tmp/tmptv3i27tt.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_len = #unique_chars(max_word)
      for i = 2, #words do
        local word = words[i]
        local len = #unique_chars(word)
        if len > max_len then
          max_word = word
          max_len = len
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvg2o6on7.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpvg2o6on7.lua:13:
    in local 'candidate'\n\t/tmp/tmpvg2o6on7.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not char:find(max_word) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp24a2bj2r.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp24a2bj2r.lua:16:
    in local 'candidate'\n\t/tmp/tmp24a2bj2r.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                if not string.find(max_word, word:sub(i, i)) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp567ps9fi.lua:33:
    expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmp567ps9fi.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local count = #unique_chars(word)
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqvow64bd.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpqvow64bd.lua:13:
    in local 'candidate'\n\t/tmp/tmpqvow64bd.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9eyrbi19.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp9eyrbi19.lua:16:
    in local 'candidate'\n\t/tmp/tmp9eyrbi19.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcsev657h.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpcsev657h.lua:16:
    in local 'candidate'\n\t/tmp/tmpcsev657h.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word, max_count = nil, 0
      for _, word in ipairs(words) do
        local count = 0
        for _ in word:gmatch('.') do
          count = count + 1
        end
        if count > max_count then
          max_word, max_count = word, count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfp_m8ll.lua:29:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpgfp_m8ll.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max = 0
        local max_word = ''
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not char:find(max_word) then
                    count = count + 1
                end
            end
            if count > max then
                max = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3eagrhul.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp3eagrhul.lua:16:
    in local 'candidate'\n\t/tmp/tmp3eagrhul.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_chars = 0
      for _, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          chars[c] = true
        end
        local num_chars = 0
        for _ in pairs(chars) do
          num_chars = num_chars + 1
        end
        if num_chars > max_chars then
          max_chars = num_chars
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncymgt80.lua:35:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpncymgt80.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvm5h1i5n.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpvm5h1i5n.lua:16:
    in local 'candidate'\n\t/tmp/tmpvm5h1i5n.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
        local word = words[i]
        local count = #unique_chars(word)
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwl6robv.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmphwl6robv.lua:13:
    in local 'candidate'\n\t/tmp/tmphwl6robv.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                local c = word:sub(i, i)
                if not word:find(c, i + 1) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38x0py9p.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp38x0py9p.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvst1oll_.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpvst1oll_.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, c in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuddxoarh.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpuddxoarh.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpofyuufgf.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpofyuufgf.lua:16:
    in local 'candidate'\n\t/tmp/tmpofyuufgf.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, c in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt31pufl9.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpt31pufl9.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local unique_chars = #unique_chars(word)
            if unique_chars > max_unique_chars then
                max_word = word
                max_unique_chars = unique_chars
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp74mbpxsb.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp74mbpxsb.lua:13:
    in local 'candidate'\n\t/tmp/tmp74mbpxsb.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdfczsj0.lua:18:
    expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmdfczsj0.lua:18:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpouw291j_.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpouw291j_.lua:16:
    in local 'candidate'\n\t/tmp/tmpouw291j_.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                local c = word:sub(i, i)
                if word:find(c, i + 1) == nil then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqc03dp5.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpdqc03dp5.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = 0
        for _, word in ipairs(words) do
            local unique_chars = 0
            for _, char in ipairs(word:split('')) do
                if not word:find(char, 2) then
                    unique_chars = unique_chars + 1
                end
            end
            if unique_chars > max_unique_chars then
                max_unique_chars = unique_chars
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq0sc_ys.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpkq0sc_ys.lua:16:
    in local 'candidate'\n\t/tmp/tmpkq0sc_ys.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptvhabg13.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmptvhabg13.lua:16:
    in local 'candidate'\n\t/tmp/tmptvhabg13.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in ipairs(word:to_chars()) do
                if not c:is_in(max_word) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ts44h_b.lua:16:
    attempt to call a nil value (method 'to_chars')\nstack traceback:\n\t/tmp/tmp3ts44h_b.lua:16:
    in local 'candidate'\n\t/tmp/tmp3ts44h_b.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6ojvl2_.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpl6ojvl2_.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0mxjf5b4.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp0mxjf5b4.lua:16:
    in local 'candidate'\n\t/tmp/tmp0mxjf5b4.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt7bt0cbh.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpt7bt0cbh.lua:16:
    in local 'candidate'\n\t/tmp/tmpt7bt0cbh.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_len = #unique_chars(max_word)
      for i = 2, #words do
        local word = words[i]
        local len = #unique_chars(word)
        if len > max_len then
          max_word = word
          max_len = len
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdk4ovqj.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpfdk4ovqj.lua:13:
    in local 'candidate'\n\t/tmp/tmpfdk4ovqj.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
        local unique_chars = 0
        for _, char in ipairs(word:chars()) do
          if not word:contains(char, 2) then
            unique_chars = unique_chars + 1
          end
        end
        if unique_chars > max_unique_chars then
          max_unique_chars = unique_chars
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0__waqs3.lua:16:
    attempt to call a nil value (method 'chars')\nstack traceback:\n\t/tmp/tmp0__waqs3.lua:16:
    in local 'candidate'\n\t/tmp/tmp0__waqs3.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _ in word:gmatch('.') do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpket6qs0f.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpket6qs0f.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptgkauqs2.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmptgkauqs2.lua:16:
    in local 'candidate'\n\t/tmp/tmptgkauqs2.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwn360vb.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpiwn360vb.lua:16:
    in local 'candidate'\n\t/tmp/tmpiwn360vb.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                if not char:find(max_word) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeubloddr.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpeubloddr.lua:16:
    in local 'candidate'\n\t/tmp/tmpeubloddr.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _ in word:gmatch('.') do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdo1yhn5.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpcdo1yhn5.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not word:find(char, word:find(char) + 1) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpunubfcuk.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpunubfcuk.lua:16:
    in local 'candidate'\n\t/tmp/tmpunubfcuk.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local unique_chars = #unique_chars(word)
            if unique_chars > max_unique_chars then
                max_word = word
                max_unique_chars = unique_chars
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8o4oygah.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp8o4oygah.lua:13:
    in local 'candidate'\n\t/tmp/tmp8o4oygah.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local unique_chars = #unique_chars(word)
            if unique_chars > max_unique_chars then
                max_word = word
                max_unique_chars = unique_chars
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84qcxoic.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp84qcxoic.lua:13:
    in local 'candidate'\n\t/tmp/tmp84qcxoic.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppiqd4m5r.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmppiqd4m5r.lua:16:
    in local 'candidate'\n\t/tmp/tmppiqd4m5r.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, c in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp231cklqn.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp231cklqn.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1snxq0ub.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp1snxq0ub.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_len = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local len = #unique_chars(word)
            if len > max_len then
                max_word = word
                max_len = len
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpix57x5b7.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpix57x5b7.lua:13:
    in local 'candidate'\n\t/tmp/tmpix57x5b7.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxpxgeip.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpbxpxgeip.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_len = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local len = #unique_chars(word)
            if len > max_len then
                max_word = word
                max_len = len
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbg_4v937.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpbg_4v937.lua:13:
    in local 'candidate'\n\t/tmp/tmpbg_4v937.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, ch in ipairs(word:split('')) do
                if not max_word:find(ch) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy7ieca2c.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpy7ieca2c.lua:16:
    in local 'candidate'\n\t/tmp/tmpy7ieca2c.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_chars = 0
      for _, word in ipairs(words) do
        local chars = {}
        for _, char in ipairs(word) do
          chars[char] = true
        end
        local num_chars = 0
        for _ in pairs(chars) do
          num_chars = num_chars + 1
        end
        if num_chars > max_chars then
          max_chars = num_chars
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmtcdr29.lua:34:
    expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpkmtcdr29.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, c in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimulk812.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpimulk812.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local unique_chars = #unique_chars(word)
            if unique_chars > max_unique_chars then
                max_word = word
                max_unique_chars = unique_chars
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkf2l0zn.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpbkf2l0zn.lua:13:
    in local 'candidate'\n\t/tmp/tmpbkf2l0zn.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split("")) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppi0ft2t3.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmppi0ft2t3.lua:16:
    in local 'candidate'\n\t/tmp/tmppi0ft2t3.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1xtcupzs.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp1xtcupzs.lua:16:
    in local 'candidate'\n\t/tmp/tmp1xtcupzs.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77knuixk.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp77knuixk.lua:16:
    in local 'candidate'\n\t/tmp/tmp77knuixk.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local count = #unique_chars(word)
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp525q7_cn.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp525q7_cn.lua:13:
    in local 'candidate'\n\t/tmp/tmp525q7_cn.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = count_unique(max_word)
        for i = 2, #words do
            local word = words[i]
            local count = count_unique(word)
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpft3w44sv.lua:13:
    attempt to call a nil value (global 'count_unique')\nstack traceback:\n\t/tmp/tmpft3w44sv.lua:13:
    in local 'candidate'\n\t/tmp/tmpft3w44sv.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = ''
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for i = 1, #word do
          if word:find(word:sub(i, i), i + 1) == nil then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3h13nzn.lua:33:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpg3h13nzn.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
        local unique_chars = 0
        for i = 1, #word do
          if not string.find(word, word:sub(i, i), i + 1) then
            unique_chars = unique_chars + 1
          end
        end
        if unique_chars > max_unique_chars then
          max_unique_chars = unique_chars
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizyb3f41.lua:33:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpizyb3f41.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, c in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmpmrz6y.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmplmpmrz6y.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0o3cfpb8.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp0o3cfpb8.lua:16:
    in local 'candidate'\n\t/tmp/tmp0o3cfpb8.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                if not word:find(word:sub(i, i), i + 1) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra1mkfa_.lua:33:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpra1mkfa_.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local count = #unique_chars(word)
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcc2ao96c.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpcc2ao96c.lua:13:
    in local 'candidate'\n\t/tmp/tmpcc2ao96c.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xibyivu.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp3xibyivu.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkn9hlt38.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpkn9hlt38.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                if not char:find(max_word) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqn_c4f4z.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpqn_c4f4z.lua:16:
    in local 'candidate'\n\t/tmp/tmpqn_c4f4z.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0l2nl77.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpg0l2nl77.lua:16:
    in local 'candidate'\n\t/tmp/tmpg0l2nl77.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for i = 1, #word do
          local c = word:sub(i, i)
          if word:find(c, i + 1) == nil then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhlem9wy.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpdhlem9wy.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique = 0
        for _, word in ipairs(words) do
            local unique = 0
            for i = 1, #word do
                local c = word:sub(i, i)
                if not word:match(c, i + 1) then
                    unique = unique + 1
                end
            end
            if unique > max_unique then
                max_unique = unique
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfmzzmll.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpvfmzzmll.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_len = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local len = #unique_chars(word)
            if len > max_len then
                max_word = word
                max_len = len
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yrj3ns3.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp4yrj3ns3.lua:13:
    in local 'candidate'\n\t/tmp/tmp4yrj3ns3.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
        local unique_chars = 0
        for i = 1, #word do
          local c = word:sub(i, i)
          if word:find(c, i + 1) == nil then
            unique_chars = unique_chars + 1
          end
        end
        if unique_chars > max_unique_chars then
          max_unique_chars = unique_chars
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ho4zlfk.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp4ho4zlfk.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6l01x31i.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp6l01x31i.lua:16:
    in local 'candidate'\n\t/tmp/tmp6l01x31i.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptuid9o1f.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmptuid9o1f.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique = 0
        for _, word in ipairs(words) do
            local unique = 0
            for _, char in ipairs(word:split('')) do
                if word:find(char) == word:find_last(char) then
                    unique = unique + 1
                end
            end
            if unique > max_unique then
                max_unique = unique
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp971srk_k.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp971srk_k.lua:16:
    in local 'candidate'\n\t/tmp/tmp971srk_k.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split()) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpolpfxvmj.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpolpfxvmj.lua:16:
    in local 'candidate'\n\t/tmp/tmpolpfxvmj.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvc4p_jui.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpvc4p_jui.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz8libfc.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpgz8libfc.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split("")) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpopefi7qk.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpopefi7qk.lua:16:
    in local 'candidate'\n\t/tmp/tmpopefi7qk.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_len = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local len = #unique_chars(word)
            if len > max_len then
                max_word = word
                max_len = len
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0q81unm4.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp0q81unm4.lua:13:
    in local 'candidate'\n\t/tmp/tmp0q81unm4.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzptefiv.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpqzptefiv.lua:16:
    in local 'candidate'\n\t/tmp/tmpqzptefiv.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, c in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwn28zbkc.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpwn28zbkc.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvdwyymv0.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpvdwyymv0.lua:16:
    in local 'candidate'\n\t/tmp/tmpvdwyymv0.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = unique_chars(max_word)
      for i = 2, #words do
        local word = words[i]
        local count = unique_chars(word)
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp61y0cuh0.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp61y0cuh0.lua:13:
    in local 'candidate'\n\t/tmp/tmp61y0cuh0.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_unique_chars = #unique_chars(max_word)
      for i = 2, #words do
        local word = words[i]
        local unique_chars = #unique_chars(word)
        if unique_chars > max_unique_chars then
          max_word = word
          max_unique_chars = unique_chars
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprozh7hll.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmprozh7hll.lua:13:
    in local 'candidate'\n\t/tmp/tmprozh7hll.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = count_unique(max_word)
      for i = 2, #words do
        local word = words[i]
        local count = count_unique(word)
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkv7px6y9.lua:13:
    attempt to call a nil value (global 'count_unique')\nstack traceback:\n\t/tmp/tmpkv7px6y9.lua:13:
    in local 'candidate'\n\t/tmp/tmpkv7px6y9.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxnb4ek2.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmptxnb4ek2.lua:16:
    in local 'candidate'\n\t/tmp/tmptxnb4ek2.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwm7e93rc.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpwm7e93rc.lua:16:
    in local 'candidate'\n\t/tmp/tmpwm7e93rc.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                if word:find(word:sub(i, i), i + 1) == nil then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18ix_zrm.lua:33:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp18ix_zrm.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not char:find(max_word) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ky81g81.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp5ky81g81.lua:16:
    in local 'candidate'\n\t/tmp/tmp5ky81g81.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = count_unique(max_word)
      for i = 2, #words do
        local word = words[i]
        local count = count_unique(word)
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7j2h5u8.lua:13:
    attempt to call a nil value (global 'count_unique')\nstack traceback:\n\t/tmp/tmpm7j2h5u8.lua:13:
    in local 'candidate'\n\t/tmp/tmpm7j2h5u8.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                if not char:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmly0ztf.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmplmly0ztf.lua:16:
    in local 'candidate'\n\t/tmp/tmplmly0ztf.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in ipairs(word:split('')) do
                if not max_word:find(c) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2b6_m28x.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2b6_m28x.lua:16:
    in local 'candidate'\n\t/tmp/tmp2b6_m28x.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7_tic98.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpk7_tic98.lua:16:
    in local 'candidate'\n\t/tmp/tmpk7_tic98.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                if not table.contains(word:split(), char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxecu6duq.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpxecu6duq.lua:16:
    in local 'candidate'\n\t/tmp/tmpxecu6duq.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
        local word = words[i]
        local count = #unique_chars(word)
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctafxon6.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpctafxon6.lua:13:
    in local 'candidate'\n\t/tmp/tmpctafxon6.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = count_unique(max_word)
        for i = 2, #words do
            local word = words[i]
            local count = count_unique(word)
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwidmbch.lua:13:
    attempt to call a nil value (global 'count_unique')\nstack traceback:\n\t/tmp/tmpuwidmbch.lua:13:
    in local 'candidate'\n\t/tmp/tmpuwidmbch.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split()) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ts95lh0.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp1ts95lh0.lua:16:
    in local 'candidate'\n\t/tmp/tmp1ts95lh0.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnybu7bwa.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpnybu7bwa.lua:16:
    in local 'candidate'\n\t/tmp/tmpnybu7bwa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnbh76bhy.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpnbh76bhy.lua:16:
    in local 'candidate'\n\t/tmp/tmpnbh76bhy.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                if word:find(word:sub(i, i), i + 1) == nil then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnncrogj.lua:33:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpfnncrogj.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvta77dv.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpzvta77dv.lua:16:
    in local 'candidate'\n\t/tmp/tmpzvta77dv.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                local c = word:sub(i, i)
                if not word:sub(1, i - 1):find(c) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef6pwqr6.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpef6pwqr6.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = 0
        for _, word in ipairs(words) do
            local unique_chars = 0
            for _, char in ipairs(word:chars()) do
                if word:count(char) == 1 then
                    unique_chars = unique_chars + 1
                end
            end
            if unique_chars > max_unique_chars then
                max_unique_chars = unique_chars
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpebc6_7ng.lua:16:
    attempt to call a nil value (method 'chars')\nstack traceback:\n\t/tmp/tmpebc6_7ng.lua:16:
    in local 'candidate'\n\t/tmp/tmpebc6_7ng.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yg8igbc.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp4yg8igbc.lua:16:
    in local 'candidate'\n\t/tmp/tmp4yg8igbc.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for i = 1, #words do
        local word = words[i]
        local count = 0
        for j = 1, #word do
          local char = word:sub(j, j)
          if not string.find(max_word, char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzo5pkltg.lua:35:
    expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmpzo5pkltg.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split()) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaxcu1svg.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpaxcu1svg.lua:16:
    in local 'candidate'\n\t/tmp/tmpaxcu1svg.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8nk8wh0r.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp8nk8wh0r.lua:16:
    in local 'candidate'\n\t/tmp/tmp8nk8wh0r.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local count = #unique_chars(word)
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahd0n227.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpahd0n227.lua:13:
    in local 'candidate'\n\t/tmp/tmpahd0n227.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoi2lg7tl.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpoi2lg7tl.lua:16:
    in local 'candidate'\n\t/tmp/tmpoi2lg7tl.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlzj5foa.lua:18:
    expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnlzj5foa.lua:18:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9vfslru9.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp9vfslru9.lua:16:
    in local 'candidate'\n\t/tmp/tmp9vfslru9.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphjo3ztvu.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmphjo3ztvu.lua:16:
    in local 'candidate'\n\t/tmp/tmphjo3ztvu.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97wn_au8.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp97wn_au8.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_chars = 0
      for _, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          chars[c] = true
        end
        local num_chars = 0
        for _ in pairs(chars) do
          num_chars = num_chars + 1
        end
        if num_chars > max_chars then
          max_chars = num_chars
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeubc8m4f.lua:35:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpeubc8m4f.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                local char = word:sub(i, i)
                if not word:find(char, i + 1) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc99roowa.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpc99roowa.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = 0
        for _, word in ipairs(words) do
            local unique_chars = 0
            for _, char in ipairs(word:split('')) do
                if word:count(char) == 1 then
                    unique_chars = unique_chars + 1
                end
            end
            if unique_chars > max_unique_chars then
                max_unique_chars = unique_chars
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6b1z_tpx.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp6b1z_tpx.lua:16:
    in local 'candidate'\n\t/tmp/tmp6b1z_tpx.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                local c = word:sub(i, i)
                if not word:find(c, i + 1) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcaxaomf.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmprcaxaomf.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpww2r56sj.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpww2r56sj.lua:16:
    in local 'candidate'\n\t/tmp/tmpww2r56sj.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_len = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local len = #unique_chars(word)
            if len > max_len then
                max_word = word
                max_len = len
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9xqm49bf.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp9xqm49bf.lua:13:
    in local 'candidate'\n\t/tmp/tmp9xqm49bf.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:chars()) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2sfrsr8f.lua:16:
    attempt to call a nil value (method 'chars')\nstack traceback:\n\t/tmp/tmp2sfrsr8f.lua:16:
    in local 'candidate'\n\t/tmp/tmp2sfrsr8f.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:chars()) do
          if not max_word:contains(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqasco2i.lua:16:
    attempt to call a nil value (method 'chars')\nstack traceback:\n\t/tmp/tmprqasco2i.lua:16:
    in local 'candidate'\n\t/tmp/tmprqasco2i.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0s9my6i9.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp0s9my6i9.lua:16:
    in local 'candidate'\n\t/tmp/tmp0s9my6i9.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7gso4tlk.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp7gso4tlk.lua:16:
    in local 'candidate'\n\t/tmp/tmp7gso4tlk.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpetkiymo7.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpetkiymo7.lua:16:
    in local 'candidate'\n\t/tmp/tmpetkiymo7.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word, max_count = nil, 0
        for _, word in ipairs(words) do
            local count = 0
            for _ in pairs(unique_chars(word)) do
                count = count + 1
            end
            if count > max_count then
                max_word, max_count = word, count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps7xyq5mt.lua:15:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmps7xyq5mt.lua:15:
    in local 'candidate'\n\t/tmp/tmps7xyq5mt.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                local c = word:sub(i, i)
                if word:find(c, i + 1) == nil then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc93q075i.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpc93q075i.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpks08ndm7.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpks08ndm7.lua:16:
    in local 'candidate'\n\t/tmp/tmpks08ndm7.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4exl_zkp.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp4exl_zkp.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, c in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyi3p6s0h.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpyi3p6s0h.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
        local word = words[i]
        local count = #unique_chars(word)
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphx5nhp6c.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmphx5nhp6c.lua:13:
    in local 'candidate'\n\t/tmp/tmphx5nhp6c.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjy1vw2qc.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpjy1vw2qc.lua:16:
    in local 'candidate'\n\t/tmp/tmpjy1vw2qc.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique = 0
        for _, word in ipairs(words) do
            local unique = 0
            for _, char in utf8.codes(word) do
                unique = unique + 1
            end
            if unique > max_unique then
                max_unique = unique
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuxs0sbq.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpvuxs0sbq.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique = 0
        for i = 1, #words do
            local word = words[i]
            local unique = 0
            for j = 1, #word do
                local char = word:sub(j, j)
                if word:find(char, j + 1) == nil then
                    unique = unique + 1
                end
            end
            if unique > max_unique then
                max_unique = unique
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthvn78cd.lua:35:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpthvn78cd.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhjqu1dj.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpfhjqu1dj.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                if word:find(word:sub(i, i), i + 1) == nil then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6p5pwu7v.lua:33:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp6p5pwu7v.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_chars = 0
      for _, word in ipairs(words) do
        local chars = {}
        for i = 1, #word do
          chars[word:sub(i, i)] = true
        end
        local num_chars = 0
        for _ in pairs(chars) do
          num_chars = num_chars + 1
        end
        if num_chars > max_chars then
          max_chars = num_chars
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0xe37d5.lua:35:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpj0xe37d5.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                local c = word:sub(i, i)
                if not word:sub(1, i - 1):find(c) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwrp0znx.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpwwrp0znx.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
        local word = words[i]
        local count = #unique_chars(word)
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2p2wyew1.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp2p2wyew1.lua:13:
    in local 'candidate'\n\t/tmp/tmp2p2wyew1.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local count = #unique_chars(word)
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68k9n31u.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmp68k9n31u.lua:13:
    in local 'candidate'\n\t/tmp/tmp68k9n31u.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique = 0
        for _, word in ipairs(words) do
            local unique = 0
            for _, char in ipairs(word:split('')) do
                if not word:find(char, 2) then
                    unique = unique + 1
                end
            end
            if unique > max_unique then
                max_unique = unique
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxuvy76yg.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpxuvy76yg.lua:16:
    in local 'candidate'\n\t/tmp/tmpxuvy76yg.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                if not string.find(max_word, word:sub(i, i)) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahohl5y_.lua:33:
    expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmpahohl5y_.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5vi0s7gq.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp5vi0s7gq.lua:16:
    in local 'candidate'\n\t/tmp/tmp5vi0s7gq.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpee5bauxx.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpee5bauxx.lua:16:
    in local 'candidate'\n\t/tmp/tmpee5bauxx.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpidfcdgu9.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpidfcdgu9.lua:16:
    in local 'candidate'\n\t/tmp/tmpidfcdgu9.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = count_unique_chars(word)
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxrty8gx2.lua:15:
    attempt to call a nil value (global 'count_unique_chars')\nstack traceback:\n\t/tmp/tmpxrty8gx2.lua:15:
    in local 'candidate'\n\t/tmp/tmpxrty8gx2.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split()) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeix7iyxc.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpeix7iyxc.lua:16:
    in local 'candidate'\n\t/tmp/tmpeix7iyxc.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split()) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp44dlvv7o.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp44dlvv7o.lua:16:
    in local 'candidate'\n\t/tmp/tmp44dlvv7o.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzx2gy4g.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmppzx2gy4g.lua:16:
    in local 'candidate'\n\t/tmp/tmppzx2gy4g.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpka02bg5f.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpka02bg5f.lua:16:
    in local 'candidate'\n\t/tmp/tmpka02bg5f.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                if not word:find(word:sub(i, i), i + 1) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6l5lpyw.lua:33:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpg6l5lpyw.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = 0
        for _, word in ipairs(words) do
            local unique_chars = 0
            for _, char in ipairs(word:split('')) do
                if not word:find(char, 2) then
                    unique_chars = unique_chars + 1
                end
            end
            if unique_chars > max_unique_chars then
                max_unique_chars = unique_chars
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9vippckt.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp9vippckt.lua:16:
    in local 'candidate'\n\t/tmp/tmp9vippckt.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhxwbo60.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpzhxwbo60.lua:16:
    in local 'candidate'\n\t/tmp/tmpzhxwbo60.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word, max_count = nil, 0
        for _, word in ipairs(words) do
            local count = 0
            for _ in pairs(word:gsub('%a', '')) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhq9ulvm.lua:15:
    bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\t/tmp/tmpwhq9ulvm.lua:15:
    in local 'candidate'\n\t/tmp/tmpwhq9ulvm.lua:29: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr4e758ee.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpr4e758ee.lua:16:
    in local 'candidate'\n\t/tmp/tmpr4e758ee.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi10voix4.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpi10voix4.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = 0
        for _, word in ipairs(words) do
            local unique_chars = 0
            for _, char in ipairs(word:split()) do
                if not word:find(char, 2) then
                    unique_chars = unique_chars + 1
                end
            end
            if unique_chars > max_unique_chars then
                max_unique_chars = unique_chars
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1v2e4c9.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpp1v2e4c9.lua:16:
    in local 'candidate'\n\t/tmp/tmpp1v2e4c9.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                if not char:find(max_word) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjklnnwh.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpyjklnnwh.lua:16:
    in local 'candidate'\n\t/tmp/tmpyjklnnwh.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpjv9pub.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpbpjv9pub.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpex81jhhn.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpex81jhhn.lua:16:
    in local 'candidate'\n\t/tmp/tmpex81jhhn.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpog8_6wv_.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpog8_6wv_.lua:16:
    in local 'candidate'\n\t/tmp/tmpog8_6wv_.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h529sg6.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp6h529sg6.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp537r4j2j.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp537r4j2j.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for i = 1, #words do
            local word = words[i]
            local count = 0
            for j = 1, #word do
                local c = word:sub(j, j)
                if not word:find(c, j + 1) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqh_sm_a.lua:35:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmprqh_sm_a.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb0nelcyd.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpb0nelcyd.lua:16:
    in local 'candidate'\n\t/tmp/tmpb0nelcyd.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for i = 1, #word do
          local c = word:sub(i, i)
          if not word:find(c, i + 1) then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeaq2iqld.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpeaq2iqld.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for i = 1, #words do
            local word = words[i]
            local count = 0
            for j = 1, #word do
                local char = word:sub(j, j)
                if not word:find(char, j + 1) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk38og_zd.lua:35:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpk38og_zd.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split()) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyrkk7mrk.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpyrkk7mrk.lua:16:
    in local 'candidate'\n\t/tmp/tmpyrkk7mrk.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr8fsi31f.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpr8fsi31f.lua:16:
    in local 'candidate'\n\t/tmp/tmpr8fsi31f.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzkd1pdy.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpuzkd1pdy.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppek82sdo.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmppek82sdo.lua:16:
    in local 'candidate'\n\t/tmp/tmppek82sdo.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in utf8.codes(word) do
          count = count + 1
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1evo4u7a.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp1evo4u7a.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1ghpwl5.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpt1ghpwl5.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ofpdyic.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp1ofpdyic.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_len = #unique_chars(max_word)
        for _, word in ipairs(words) do
            local len = #unique_chars(word)
            if len > max_len then
                max_word = word
                max_len = len
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzsjtbag.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpwzsjtbag.lua:13:
    in local 'candidate'\n\t/tmp/tmpwzsjtbag.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = 0
        for _, word in ipairs(words) do
            local unique_chars = 0
            for _, char in ipairs(word:split('')) do
                if not word:find(char, 2) then
                    unique_chars = unique_chars + 1
                end
            end
            if unique_chars > max_unique_chars then
                max_unique_chars = unique_chars
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphuzgcj7g.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmphuzgcj7g.lua:16:
    in local 'candidate'\n\t/tmp/tmphuzgcj7g.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split()) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpznsapl1n.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpznsapl1n.lua:16:
    in local 'candidate'\n\t/tmp/tmpznsapl1n.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp924245f2.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp924245f2.lua:16:
    in local 'candidate'\n\t/tmp/tmp924245f2.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeh_2flhf.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpeh_2flhf.lua:16:
    in local 'candidate'\n\t/tmp/tmpeh_2flhf.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                if word:find(word:sub(i, i), i + 1) == nil then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcivxju8.lua:33:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmplcivxju8.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for i = 1, #word do
                local c = word:sub(i, i)
                if not word:find(c, i + 1) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkq7qtifl.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpkq7qtifl.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq8mermpg.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpq8mermpg.lua:16:
    in local 'candidate'\n\t/tmp/tmpq8mermpg.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupqp2adu.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpupqp2adu.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_len = #unique_chars(max_word)
      for i = 2, #words do
        local word = words[i]
        local len = #unique_chars(word)
        if len > max_len then
          max_word = word
          max_len = len
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmploz27ira.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmploz27ira.lua:13:
    in local 'candidate'\n\t/tmp/tmploz27ira.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word, max_count = words[1], 0
        for _, word in ipairs(words) do
            local count = 0
            for _ in pairs(get_unique_chars(word)) do
                count = count + 1
            end
            if count > max_count then
                max_word, max_count = word, count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rx7_cbw.lua:15:
    attempt to call a nil value (global 'get_unique_chars')\nstack traceback:\n\t/tmp/tmp8rx7_cbw.lua:15:
    in local 'candidate'\n\t/tmp/tmp8rx7_cbw.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local count = #unique_chars(word)
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphhva35ng.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmphhva35ng.lua:13:
    in local 'candidate'\n\t/tmp/tmphhva35ng.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ncnt54d.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp9ncnt54d.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_word = word
          max_count = count
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmvl1x5s.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmphmvl1x5s.lua:16:
    in local 'candidate'\n\t/tmp/tmphmvl1x5s.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_num = 0
      for _, word in ipairs(words) do
        local num = 0
        for _, char in ipairs(word:split('')) do
          if not max_word:find(char) then
            num = num + 1
          end
        end
        if num > max_num then
          max_word = word
          max_num = num
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphtrze4wf.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmphtrze4wf.lua:16:
    in local 'candidate'\n\t/tmp/tmphtrze4wf.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpin_7ujkp.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpin_7ujkp.lua:16:
    in local 'candidate'\n\t/tmp/tmpin_7ujkp.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwyj7n_wn.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpwyj7n_wn.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgknxa6x4.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpgknxa6x4.lua:16:
    in local 'candidate'\n\t/tmp/tmpgknxa6x4.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0_k_0ia.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpy0_k_0ia.lua:16:
    in local 'candidate'\n\t/tmp/tmpy0_k_0ia.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpih0g6xs0.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpih0g6xs0.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = 0
        for _, word in ipairs(words) do
            local unique_chars = 0
            for _, char in ipairs(word:split()) do
                if not word:find(char, 2) then
                    unique_chars = unique_chars + 1
                end
            end
            if unique_chars > max_unique_chars then
                max_unique_chars = unique_chars
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprp9au9h7.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmprp9au9h7.lua:16:
    in local 'candidate'\n\t/tmp/tmprp9au9h7.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, c in utf8.codes(word) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy_c8gla.lua:31:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpxy_c8gla.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = 0
        for _, word in ipairs(words) do
            local unique_chars = 0
            for i = 1, #word do
                local char = word:sub(i, i)
                if word:find(char, i + 1) == nil then
                    unique_chars = unique_chars + 1
                end
            end
            if unique_chars > max_unique_chars then
                max_unique_chars = unique_chars
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomn__yw5.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpomn__yw5.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = 0
        for _, word in ipairs(words) do
            local unique_chars = 0
            for i = 1, #word do
                local char = word:sub(i, i)
                if word:find(char, i + 1) == nil then
                    unique_chars = unique_chars + 1
                end
            end
            if unique_chars > max_unique_chars then
                max_unique_chars = unique_chars
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0iz_8vgd.lua:34:
    expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp0iz_8vgd.lua:34:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = count_unique(max_word)
        for i = 2, #words do
            local word = words[i]
            local count = count_unique(word)
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf76r1z3f.lua:13:
    attempt to call a nil value (global 'count_unique')\nstack traceback:\n\t/tmp/tmpf76r1z3f.lua:13:
    in local 'candidate'\n\t/tmp/tmpf76r1z3f.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
        local count = 0
        for _, char in ipairs(word:split()) do
          if not max_word:find(char) then
            count = count + 1
          end
        end
        if count > max_count then
          max_count = count
          max_word = word
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmel633wa.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpmel633wa.lua:16:
    in local 'candidate'\n\t/tmp/tmpmel633wa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:chars()) do
                if not char:is_in(max_word) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpppx06_nh.lua:16:
    attempt to call a nil value (method 'chars')\nstack traceback:\n\t/tmp/tmpppx06_nh.lua:16:
    in local 'candidate'\n\t/tmp/tmpppx06_nh.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
      local max_word = words[1]
      local max_chars = 0
      for _, word in ipairs(words) do
        local chars = {}
        for i = 1, #word do
          chars[word:sub(i, i)] = true
        end
        local num_chars = 0
        for _ in pairs(chars) do
          num_chars = num_chars + 1
        end
        if num_chars > max_chars or
           (num_chars == max_chars and word < max_word) then
          max_word = word
          max_chars = num_chars
        end
      end
      return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split()) do
                count = count + 1
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppc33uo0d.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmppc33uo0d.lua:16:
    in local 'candidate'\n\t/tmp/tmppc33uo0d.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:split('')) do
                if not max_word:find(char) then
                    count = count + 1
                end
            end
            if count > max_count then
                max_word = word
                max_count = count
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_k398joe.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp_k398joe.lua:16:
    in local 'candidate'\n\t/tmp/tmp_k398joe.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_count = 0
        for _, word in ipairs(words) do
            local count = 0
            for _, char in ipairs(word:chars()) do
                if not char:match('[a-z]') then
                    count = count + 1
                end
            end
            if count > max_count then
                max_count = count
                max_word = word
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa38108em.lua:16:
    attempt to call a nil value (method 'chars')\nstack traceback:\n\t/tmp/tmpa38108em.lua:16:
    in local 'candidate'\n\t/tmp/tmpa38108em.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that accepts a table of strings.
    -- The table contains different words. Return the word with maximum number
    -- of unique characters. If multiple strings have maximum number of unique
    -- characters, return the one which comes first in lexicographical order.
    -- >>> find_max({'name', 'of', 'string'})
    -- 'string'
    -- >>> find_max({'name', 'enam', 'game'})
    -- 'enam'
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
    -- 'aaaaaaa'
    local function find_max(words)
        local max_word = words[1]
        local max_unique_chars = #unique_chars(max_word)
        for i = 2, #words do
            local word = words[i]
            local unique_chars = #unique_chars(word)
            if unique_chars > max_unique_chars then
                max_word = word
                max_unique_chars = unique_chars
            end
        end
        return max_word
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = find_max
        lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
        lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
        lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
        lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
        lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
        lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
        lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
        lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
        lu.assertEquals(candidate({'b'}), 'b')
        lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni36h9dj.lua:13:
    attempt to call a nil value (global 'unique_chars')\nstack traceback:\n\t/tmp/tmpni36h9dj.lua:13:
    in local 'candidate'\n\t/tmp/tmpni36h9dj.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
