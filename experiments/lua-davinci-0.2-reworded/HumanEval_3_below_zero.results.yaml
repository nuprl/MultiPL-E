---
name: HumanEval_3_below_zero
language: lua
results:
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i = 1, #operations do
        balance = balance + operations[i]
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for i = 1, #operations do
            balance = balance + operations[i]
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, v in ipairs(operations) do
        balance = balance + v
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlbhnvjb.lua:15:
    expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwlbhnvjb.lua:15: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i, v in ipairs(operations) do
        balance = balance + v
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for i, v in ipairs(operations) do
            balance = balance + v
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, v in ipairs(operations) do
            balance = balance + v
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i = 1, #operations do
        balance = balance + operations[i]
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, v in ipairs(operations) do
            balance = balance + v
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i, v in ipairs(operations) do
        balance = balance + v
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for i = 1, #operations do
            balance = balance + operations[i]
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i, v in ipairs(operations) do
        balance = balance + v
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i, v in ipairs(operations) do
        balance = balance + v
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for i, v in ipairs(operations) do
            balance = balance + v
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for i = 1, #operations do
            balance = balance + operations[i]
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i = 1, #operations do
        balance = balance + operations[i]
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, v in ipairs(operations) do
        balance = balance + v
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i = 1, #operations do
        balance = balance + operations[i]
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i = 1, #operations do
        balance = balance + operations[i]
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for i, v in ipairs(operations) do
        balance = balance + v
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, v in ipairs(operations) do
            balance = balance + v
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, op in ipairs(operations) do
            balance = balance + op
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for i = 1, #operations do
            balance = balance + operations[i]
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
      local balance = 0
      for _, op in ipairs(operations) do
        balance = balance + op
        if balance < 0 then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You're given a table of deposit and withdrawal operations on a bank account that starts with
    -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    -- at that point function should return true. Otherwise it should return false.
    -- >>> below_zero({1, 2, 3})
    -- false
    -- >>> below_zero({1, 2, -4, 5})
    -- true
    local function below_zero(operations)
        local balance = 0
        for _, operation in ipairs(operations) do
            balance = balance + operation
            if balance < 0 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = below_zero
        lu.assertEquals(candidate({}), false)
        lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
        lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
        lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
        lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
