name: HumanEval_120_maximum
language: lua
results:
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local m = math.mininteger\n        local\
    \ idx = -1\n        for j = 1, #arr do\n            if arr[j] > m then\n     \
    \           m = arr[j]\n                idx = j\n            end\n        end\n\
    \        if idx == -1 then break end\n        t[i] = m\n        table.remove(arr,\
    \ idx)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswahrlx6.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpswahrlx6.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, start, stop)\n        local pivot = arr[stop]\n    \
    \    local i = start - 1\n        for j = start, stop - 1 do\n            if arr[j]\
    \ < pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[stop] = arr[stop],\
    \ arr[i + 1]\n        return i + 1\n    end\n    local function quick_select(arr,\
    \ start, stop, k)\n        if start >= stop then\n            return\n       \
    \ end\n        local pivot = partition(arr, start, stop)\n        if pivot ==\
    \ k then\n            return\n        elseif pivot > k then\n            quick_select(arr,\
    \ start, pivot - 1, k)\n        else\n            quick_select(arr, pivot + 1,\
    \ stop, k)\n        end\n    end\n    quick_select(arr, 1, #arr, #arr - k + 1)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[#arr - k + i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98w2jfc2.lua:58:\
    \ expected: {-13, -8, 0, 0, 3, 5, 15}\nactual: {-13, -8, 0, 3, 5, 15, 0}\nstack\
    \ traceback:\n\t/tmp/tmp98w2jfc2.lua:58: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n    \
    \    result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i9ilytd.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1i9ilytd.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n    table.sort(t)\n\
    \    for i = k + 1, #arr do\n        if arr[i] > t[1] then\n            t[1] =\
    \ arr[i]\n            table.sort(t)\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rfjnqqz.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp8rfjnqqz.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp8rfjnqqz.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuir2kmv7.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpuir2kmv7.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = -math.huge\n        local max_idx\
    \ = -1\n        for j = 1, #arr do\n            if arr[j] > max then\n       \
    \         max = arr[j]\n                max_idx = j\n            end\n       \
    \ end\n        t[i] = max\n        table.remove(arr, max_idx)\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp86dihod.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpp86dihod.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then\n          \
    \  return arr[left]\n        end\n        local pivot = partition(arr, left, right)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quickSelect(arr, left, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n\
    \    local function sort(arr, k)\n        local n = #arr\n        for i = 1, k\
    \ do\n            local min = i\n            for j = i + 1, n do\n           \
    \     if arr[j] < arr[min] then\n                    min = j\n               \
    \ end\n            end\n            arr[i], arr[min] = arr[min], arr[i]\n    \
    \    end\n    end\n    local n = #arr\n    if k == n then\n        sort(arr, k)\n\
    \    else\n        quickSelect(arr, 1, n, n - k + 1)\n        sort(arr, k)\n \
    \   end\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpbdmdow.lua:73:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmprpbdmdow.lua:73:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ res = {}\n    for i = 1, k do\n        local max = -math.huge\n        local\
    \ max_index = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n\
    \                max = arr[j]\n                max_index = j\n            end\n\
    \        end\n        res[i] = max\n        table.remove(arr, max_index)\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpny9vh1me.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpny9vh1me.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7oy7syh5.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp7oy7syh5.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        return arr\n    end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l\n  \
    \      for j = l, r - 1 do\n            if arr[j] < pivot then\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n\
    \        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n\
    \    local function quick_select(arr, l, r, k)\n        if l == r then\n     \
    \       return arr[l]\n        end\n        local i = partition(arr, l, r)\n \
    \       if i == k then\n            return arr[i]\n        elseif i < k then\n\
    \            return quick_select(arr, i + 1, r, k)\n        else\n           \
    \ return quick_select(arr, l, i - 1, k)\n        end\n    end\n    quick_select(arr,\
    \ 1, n, n - k + 1)\n    local res = {}\n    for i = 1, k do\n        res[i] =\
    \ arr[n - k + i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykxgeafa.lua:57:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpykxgeafa.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len then\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcthlomg.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpxcthlomg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then\n          \
    \  return arr[left]\n        end\n        local pivot = partition(arr, left, right)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quickSelect(arr, left, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n\
    \    local function sort(arr, k)\n        local ret = {}\n        for i = 1, k\
    \ do\n            ret[i] = quickSelect(arr, 1, #arr, i)\n        end\n       \
    \ return ret\n    end\n    return sort(arr, k)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mxtaogc.lua:60:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp4mxtaogc.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ l, r)\n        if l < r then\n            local m = partition(arr, l, r)\n \
    \           quick_sort(arr, l, m - 1)\n            quick_sort(arr, m + 1, r)\n\
    \        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniae9p4a.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpniae9p4a.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpgmsmyp.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpvpgmsmyp.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyka7vfuh.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpyka7vfuh.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k >= len then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k +\
    \ 1, len do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n  \
    \          table.sort(res)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycuobox8.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpycuobox8.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len then\n\
    \        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    quickSelect(arr, 1, len, k)\n\
    \    table.sort(arr, 1, k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhwhe006.lua:61:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpxhwhe006.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return\n        end\n        local p = partition(arr, l, r)\n\
    \        if p == k then\n            return\n        elseif p < k then\n     \
    \       quickSelect(arr, p + 1, r, k)\n        else\n            quickSelect(arr,\
    \ l, p - 1, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, k)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3docv0or.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp3docv0or.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n  \
    \      result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbsk02_7.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmplbsk02_7.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ heap = {}\n    local heap_size = 0\n    local function heap_push(x)\n      \
    \  heap_size = heap_size + 1\n        heap[heap_size] = x\n        local i = heap_size\n\
    \        while i > 1 do\n            local j = math.floor(i / 2)\n           \
    \ if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n\
    \                i = j\n            else\n                break\n            end\n\
    \        end\n    end\n    local function heap_pop()\n        local x = heap[1]\n\
    \        heap[1] = heap[heap_size]\n        heap_size = heap_size - 1\n      \
    \  local i = 1\n        while i * 2 <= heap_size do\n            local j = i *\
    \ 2\n            if j + 1 <= heap_size and heap[j + 1] > heap[j] then\n      \
    \          j = j + 1\n            end\n            if heap[i] < heap[j] then\n\
    \                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n\
    \            else\n                break\n            end\n        end\n     \
    \   return x\n    end\n    for i = 1, #arr do\n        if heap_size < k then\n\
    \            heap_push(arr[i])\n        elseif arr[i] > heap[1] then\n       \
    \     heap_pop()\n            heap_push(arr[i])\n        end\n    end\n    local\
    \ ans = {}\n    for i = 1, k do\n        ans[i] = heap_pop()\n    end\n    return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yzyrkgy.lua:70:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp2yzyrkgy.lua:70:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ l, r)\n        if l < r then\n            local m = partition(arr, l, r)\n \
    \           quick_sort(arr, l, m - 1)\n            quick_sort(arr, m + 1, r)\n\
    \        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhjlv496.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpwhjlv496.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1epr2bdt.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1epr2bdt.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local index = 0\n        for j = 1, len do\n            if arr[j] > max\
    \ then\n                max = arr[j]\n                index = j\n            end\n\
    \        end\n        res[i] = max\n        arr[index] = -math.huge\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6pu2ckl.lua:44:\
    \ expected: {2, 20, 123}\nactual: {123, 20, 2}\nstack traceback:\n\t/tmp/tmps6pu2ckl.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, lo, hi)\n        local pivot = arr[hi]\n        local\
    \ i = lo\n        for j = lo, hi - 1 do\n            if arr[j] >= pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[hi] = arr[hi], arr[i]\n   \
    \     return i\n    end\n    local function quickselect(arr, lo, hi, k)\n    \
    \    if lo >= hi then\n            return\n        end\n        local p = partition(arr,\
    \ lo, hi)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickselect(arr, p + 1, hi, k)\n        else\n            quickselect(arr,\
    \ lo, p - 1, k)\n        end\n    end\n    quickselect(arr, 1, #arr, k)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_sgvbp5.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpl_sgvbp5.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xaq90o5.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp4xaq90o5.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    table.sort(heap)\n    for i = k + 1, len do\n        if arr[i] >\
    \ heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n \
    \       end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppr8haa9h.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppr8haa9h.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmppr8haa9h.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gkmvsc1.lua:60:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp9gkmvsc1.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local m = -math.huge\n        local idx\
    \ = 0\n        for j = 1, #arr do\n            if arr[j] > m then\n          \
    \      m = arr[j]\n                idx = j\n            end\n        end\n   \
    \     t[i] = m\n        table.remove(arr, idx)\n    end\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqobbl_e.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmplqobbl_e.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    table.sort(heap)\n    for i = k + 1, n do\n        if arr[i] > heap[1]\
    \ then\n            heap[1] = arr[i]\n            table.sort(heap)\n        end\n\
    \    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy7_k0nhf.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpy7_k0nhf.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpy7_k0nhf.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k > len then k = len\
    \ end\n    local res = {}\n    for i = 1, k do\n        local max = arr[i]\n \
    \       local idx = i\n        for j = i + 1, len do\n            if arr[j] >\
    \ max then\n                max = arr[j]\n                idx = j\n          \
    \  end\n        end\n        res[i] = max\n        arr[idx] = arr[i]\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkoixiyoi.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpkoixiyoi.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left + 1\n        local j = right\n        while true do\n    \
    \        while i <= j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            while i <= j and arr[j] <= pivot do\n              \
    \  j = j - 1\n            end\n            if i >= j then\n                break\n\
    \            end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n \
    \       arr[left], arr[j] = arr[j], arr[left]\n        return j\n    end\n   \
    \ local function quick_select(arr, left, right, k)\n        if left == right then\n\
    \            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quick_select(arr, left, pivot\
    \ - 1, k)\n        else\n            return quick_select(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    local function sort(arr, left, right)\n      \
    \  if left >= right then\n            return\n        end\n        local pivot\
    \ = partition(arr, left, right)\n        sort(arr, left, pivot - 1)\n        sort(arr,\
    \ pivot + 1, right)\n    end\n    local n = #arr\n    quick_select(arr, 1, n,\
    \ n - k + 1)\n    sort(arr, 1, n - k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5xk94a8.lua:66:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpk5xk94a8.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ l, r)\n        if l < r then\n            local mid = partition(arr, l, r)\n\
    \            quick_sort(arr, l, mid - 1)\n            quick_sort(arr, mid + 1,\
    \ r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp022ykyt_.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp022ykyt_.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqureuqpr.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpqureuqpr.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpqureuqpr.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quick_select(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quick_select(arr, l, pivot - 1, k)\n    \
    \    else\n            return quick_select(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local function quick_select_k(arr, k)\n        local res = {}\n\
    \        for i = 1, k do\n            res[i] = quick_select(arr, 1, #arr, i)\n\
    \        end\n        return res\n    end\n    return quick_select_k(arr, k)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgcm6hqt.lua:55:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpwgcm6hqt.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd5jat1i.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmppd5jat1i.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktadrhym.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpktadrhym.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = arr[i]\n        local max_index\
    \ = i\n        for j = i + 1, #arr do\n            if arr[j] > max then\n    \
    \            max = arr[j]\n                max_index = j\n            end\n  \
    \      end\n        arr[max_index] = arr[i]\n        arr[i] = max\n        t[i]\
    \ = max\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprp1jes6o.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmprp1jes6o.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ mid = partition(arr, left, right)\n            quick_sort(arr, left, mid - 1)\n\
    \            quick_sort(arr, mid + 1, right)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdmxefbu.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpmdmxefbu.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrw4bn8j.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpwrw4bn8j.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ ret = {}\n    for i = 1, k do\n        local max = -1000\n        local index\
    \ = 1\n        for j = 1, #arr do\n            if arr[j] > max then\n        \
    \        max = arr[j]\n                index = j\n            end\n        end\n\
    \        ret[i] = max\n        table.remove(arr, index)\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9538dya.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpz9538dya.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    local t = {}\n    for i = 1, len do\n        t[i] = arr[i]\n\
    \    end\n    table.sort(t)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = t[len - i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap7lr_rd.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpap7lr_rd.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l - 1\n        for j = l, r - 1 do\n            if arr[j] >= pivot then\n\
    \                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quickselect(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p < k then\n            return quickselect(arr, p + 1, r, k)\n\
    \        else\n            return quickselect(arr, l, p - 1, k)\n        end\n\
    \    end\n    quickselect(arr, 1, #arr, k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhra93qz.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpvhra93qz.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n    \
    \    result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgpf50z9.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpdgpf50z9.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k == len then return arr end\n    local max = {}\n    for i = 1,\
    \ k do\n        max[i] = arr[i]\n    end\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k and max[j] > arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for m = k, j + 1, -1 do\n  \
    \              max[m] = max[m - 1]\n            end\n            max[j] = arr[i]\n\
    \        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy74y3bmz.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpy74y3bmz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjmabm1v.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpmjmabm1v.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ res = {}\n    for i = 1, k do\n        local max = -math.huge\n        local\
    \ idx = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n    \
    \            max = arr[j]\n                idx = j\n            end\n        end\n\
    \        res[i] = max\n        table.remove(arr, idx)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi71an7ey.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpi71an7ey.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpveho5lad.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpveho5lad.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsclkr6or.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpsclkr6or.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_sort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, n)\n    local res\
    \ = {}\n    for i = n, n - k + 1, -1 do\n        table.insert(res, arr[i])\n \
    \   end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3w7klqf.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpr3w7klqf.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    table.sort(arr,\
    \ function(a, b) return a > b end)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduk6wpph.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpduk6wpph.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p >\
    \ k then\n            return quickSelect(arr, l, p - 1, k)\n        else\n   \
    \         return quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local p =\
    \ partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr,\
    \ p + 1, r)\n        end\n    end\n    local n = #arr\n    quickSort(arr, 1, n)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_eeu0zre.lua:61:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_eeu0zre.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n  \
    \      result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzzg15ya.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpjzzg15ya.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k > len then\n        k = len\n    end\n    local t = {}\n\
    \    for i = 1, len do\n        local v = arr[i]\n        local j = #t\n     \
    \   while j > 0 and v > t[j] do\n            j = j - 1\n        end\n        if\
    \ j < k then\n            table.insert(t, j + 1, v)\n            if #t > k then\n\
    \                table.remove(t)\n            end\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhp9qah0.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpzhp9qah0.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        return arr\n    end\n    local function\
    \ partition(l, r)\n        local pivot = arr[l]\n        local i = l\n       \
    \ for j = l + 1, r do\n            if arr[j] > pivot then\n                i =\
    \ i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n  \
    \      end\n        arr[l], arr[i] = arr[i], arr[l]\n        return i\n    end\n\
    \    local l, r = 1, n\n    while l <= r do\n        local m = partition(l, r)\n\
    \        if m == k then\n            break\n        elseif m < k then\n      \
    \      l = m + 1\n        else\n            r = m - 1\n        end\n    end\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dlc1pfm.lua:50:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp4dlc1pfm.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local function partition(arr, left, right)\n        local pivot\
    \ = arr[right]\n        local i = left - 1\n        for j = left, right - 1 do\n\
    \            if arr[j] >= pivot then\n                i = i + 1\n            \
    \    arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i\
    \ + 1], arr[right] = arr[right], arr[i + 1]\n        return i + 1\n    end\n \
    \   local function quickselect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickselect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickselect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    quickselect(arr, 1, n, k)\n    return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c38qkil.lua:50:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp6c38qkil.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        return arr\n    end\n    local heap =\
    \ {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1,\
    \ -1 do\n        heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n     \
    \   if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap,\
    \ 1, k)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfxm1xd_.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpjfxm1xd_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n    \
    \    result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6gjdj9b0.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp6gjdj9b0.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbztdynza.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpbztdynza.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local t = {}\n  for i = 1, n do\n    local x = arr[i]\n    local j\
    \ = #t\n    while j > 0 and x > t[j] do\n      j = j - 1\n    end\n    if j <\
    \ k then\n      table.insert(t, j + 1, x)\n      if #t > k then\n        table.remove(t)\n\
    \      end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbl7my7fm.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpbl7my7fm.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_50q_ulo.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_50q_ulo.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l + 1\n        local j = r\n        while true do\n            while i <=\
    \ r and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       while j >= l + 1 and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i >= j then\n                break\n         \
    \   end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[l],\
    \ arr[j] = arr[j], arr[l]\n        return j\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l >= r then\n            return\n        end\n        local\
    \ j = partition(arr, l, r)\n        if j == k then\n            return\n     \
    \   elseif j > k then\n            quickSelect(arr, l, j - 1, k)\n        else\n\
    \            quickSelect(arr, j + 1, r, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, #arr, k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4daamy3z.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp4daamy3z.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local i, j = l, r\n        local pivot\
    \ = arr[l]\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_select(arr, l, r, k)\n  \
    \      local i = partition(arr, l, r)\n        if i == k then\n            return\n\
    \        elseif i < k then\n            quick_select(arr, i + 1, r, k)\n     \
    \   else\n            quick_select(arr, l, i - 1, k)\n        end\n    end\n \
    \   quick_select(arr, 1, #arr, #arr - k + 1)\n    local res = {}\n    for i =\
    \ #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g8tqrpv.lua:54:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp3g8tqrpv.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijiq_jxd.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpijiq_jxd.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphzzakemq.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmphzzakemq.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmphzzakemq.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnplx9_fp.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpnplx9_fp.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpnplx9_fp.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] < pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return\n        end\n        local p = partition(arr, l, r)\n\
    \        if p == k then\n            return\n        elseif p < k then\n     \
    \       quickSelect(arr, p + 1, r, k)\n        else\n            quickSelect(arr,\
    \ l, p - 1, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k +\
    \ 1)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavm0opt0.lua:50:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmpavm0opt0.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8855v4y.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmps8855v4y.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n  \
    \      result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr3c_h_m.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpwr3c_h_m.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje6drt0k.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpje6drt0k.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivl0h8ur.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpivl0h8ur.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len then\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        local j = 1\n        while j <= k and res[j] < arr[i] do\n          \
    \  j = j + 1\n        end\n        if j <= k then\n            table.insert(res,\
    \ j, arr[i])\n            table.remove(res)\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cou7_04.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp0cou7_04.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k >= len then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then return arr[left] end\n      \
    \  local pivot = partition(arr, left, right)\n        if pivot == k then return\
    \ arr[pivot] end\n        if pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = quickSelect(arr, 1, len, i)\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdvkvlqb.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmptdvkvlqb.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n    \
    \    result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3h5g3sl3.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp3h5g3sl3.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == 0 then\n        return {}\n    elseif k >= len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        for j = 1, k do\n            if arr[i] > res[j]\
    \ then\n                table.remove(res, j)\n                table.insert(res,\
    \ j, arr[i])\n                break\n            end\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xlfh1qt.lua:48:\
    \ expected: {0, 1, 2, 20}\nactual: {2, 0, 1, 20}\nstack traceback:\n\t/tmp/tmp2xlfh1qt.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickselect(arr, l, r, k)\n        if l == r\
    \ then return arr[l] end\n        local i = partition(arr, l, r)\n        if i\
    \ == k then return arr[i] end\n        if i > k then\n            return quickselect(arr,\
    \ l, i - 1, k)\n        else\n            return quickselect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local pivot = quickselect(arr, 1, n, k)\n    local\
    \ res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n           \
    \ res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uvjafsf.lua:61:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp8uvjafsf.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_rg992z.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpf_rg992z.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function maxHeapify(arr, i, n)\n        local l = i * 2\n        local r = i\
    \ * 2 + 1\n        local largest = i\n        if l <= n and arr[l] > arr[largest]\
    \ then\n            largest = l\n        end\n        if r <= n and arr[r] > arr[largest]\
    \ then\n            largest = r\n        end\n        if largest ~= i then\n \
    \           arr[i], arr[largest] = arr[largest], arr[i]\n            maxHeapify(arr,\
    \ largest, n)\n        end\n    end\n    local function buildMaxHeap(arr, n)\n\
    \        for i = math.floor(n / 2), 1, -1 do\n            maxHeapify(arr, i, n)\n\
    \        end\n    end\n    local function heapSort(arr, n)\n        buildMaxHeap(arr,\
    \ n)\n        for i = n, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n\
    \            maxHeapify(arr, 1, i - 1)\n        end\n    end\n    heapSort(arr,\
    \ #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_44xdbz2.lua:56:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp_44xdbz2.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n\
    \    table.sort(t)\n    for i = k + 1, n do\n        local j = 1\n        while\
    \ j <= k and arr[i] > t[j] do\n            j = j + 1\n        end\n        if\
    \ j <= k then\n            for l = k, j + 1, -1 do\n                t[l] = t[l\
    \ - 1]\n            end\n            t[j] = arr[i]\n        end\n    end\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdy7c5gx.lua:46:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpvdy7c5gx.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n    table.sort(t)\n\
    \    for i = k + 1, #arr do\n        if arr[i] > t[1] then\n            t[1] =\
    \ arr[i]\n            table.sort(t)\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsiwhub84.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpsiwhub84.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpsiwhub84.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 2, -1 do\n        heap[i], heap[1] = heap[1], heap[i]\n        local j\
    \ = 1\n        while j * 2 <= i - 1 do\n            local m = j * 2\n        \
    \    if m + 1 <= i - 1 and heap[m + 1] < heap[m] then\n                m = m +\
    \ 1\n            end\n            if heap[j] <= heap[m] then\n               \
    \ break\n            end\n            heap[j], heap[m] = heap[m], heap[j]\n  \
    \          j = m\n        end\n    end\n    for i = k + 1, #arr do\n        if\
    \ arr[i] > heap[1] then\n            heap[1] = arr[i]\n            local j = 1\n\
    \            while j * 2 <= k do\n                local m = j * 2\n          \
    \      if m + 1 <= k and heap[m + 1] < heap[m] then\n                    m = m\
    \ + 1\n                end\n                if heap[j] <= heap[m] then\n     \
    \               break\n                end\n                heap[j], heap[m] =\
    \ heap[m], heap[j]\n                j = m\n            end\n        end\n    end\n\
    \    for i = k, 2, -1 do\n        heap[i], heap[1] = heap[1], heap[i]\n      \
    \  local j = 1\n        while j * 2 <= i - 1 do\n            local m = j * 2\n\
    \            if m + 1 <= i - 1 and heap[m + 1] < heap[m] then\n              \
    \  m = m + 1\n            end\n            if heap[j] <= heap[m] then\n      \
    \          break\n            end\n            heap[j], heap[m] = heap[m], heap[j]\n\
    \            j = m\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0chskfvx.lua:74:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp0chskfvx.lua:74:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len then\n\
    \        return arr\n    end\n    local result = {}\n    for i = 1, k do\n   \
    \     result[i] = arr[i]\n    end\n    local heap = Heap.new(result, function(a,\
    \ b) return a > b end)\n    for i = k + 1, len do\n        if arr[i] > heap:peek()\
    \ then\n            heap:pop()\n            heap:push(arr[i])\n        end\n \
    \   end\n    return heap:to_table()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgq31n18.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmprgq31n18.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60ciy834.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp60ciy834.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = -math.huge\n        local index\
    \ = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n        \
    \        max = arr[j]\n                index = j\n            end\n        end\n\
    \        table.insert(t, max)\n        table.remove(arr, index)\n    end\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiblgq7pz.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpiblgq7pz.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ l, r)\n        if l < r then\n            local m = partition(arr, l, r)\n \
    \           quick_sort(arr, l, m - 1)\n            quick_sort(arr, m + 1, r)\n\
    \        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt96d_9_e.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpt96d_9_e.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1d3_szj.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpy1d3_szj.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n == k then\n        return arr\n    end\n    local heap =\
    \ {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, n\
    \ do\n        local x = arr[i]\n        local j = 1\n        while j <= k and\
    \ heap[j] > x do\n            j = j + 1\n        end\n        if j <= k then\n\
    \            for l = k, j + 1, -1 do\n                heap[l] = heap[l - 1]\n\
    \            end\n            heap[j] = x\n        end\n    end\n    return heap\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t57a9xl.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp2t57a9xl.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvacmvpwx.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpvacmvpwx.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k >= len then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l + 1\n        local\
    \ j = r\n        while true do\n            while i <= r and arr[i] >= pivot do\
    \ i = i + 1 end\n            while j >= l + 1 and arr[j] <= pivot do j = j - 1\
    \ end\n            if i >= j then break end\n            arr[i], arr[j] = arr[j],\
    \ arr[i]\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return\
    \ j\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then return arr[l] end\n        local j = partition(arr, l, r)\n        if j\
    \ == k then return arr[j] end\n        if j > k then return quickSelect(arr, l,\
    \ j - 1, k) end\n        return quickSelect(arr, j + 1, r, k)\n    end\n    quickSelect(arr,\
    \ 1, len, k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rmbc2gy.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp_rmbc2gy.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k == len then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    local function heapify(arr, i, len)\n\
    \        local left = 2 * i\n        local right = 2 * i + 1\n        local largest\
    \ = i\n        if left <= len and arr[left] > arr[largest] then\n            largest\
    \ = left\n        end\n        if right <= len and arr[right] > arr[largest] then\n\
    \            largest = right\n        end\n        if largest ~= i then\n    \
    \        arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr,\
    \ largest, len)\n        end\n    end\n    local function build_heap(arr, len)\n\
    \        for i = math.floor(len / 2), 1, -1 do\n            heapify(arr, i, len)\n\
    \        end\n    end\n    build_heap(res, k)\n    for i = k + 1, len do\n   \
    \     if arr[i] > res[1] then\n            res[1] = arr[i]\n            heapify(res,\
    \ 1, k)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq9g1a0h.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpqq9g1a0h.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickselect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p >\
    \ k then\n            return quickselect(arr, l, p - 1, k)\n        else\n   \
    \         return quickselect(arr, p + 1, r, k)\n        end\n    end\n    local\
    \ function sort(arr, k)\n        local n = #arr\n        for i = 1, k do\n   \
    \         for j = i + 1, n do\n                if arr[i] < arr[j] then\n     \
    \               arr[i], arr[j] = arr[j], arr[i]\n                end\n       \
    \     end\n        end\n        return arr\n    end\n    local n = #arr\n    if\
    \ k == n then\n        return sort(arr, k)\n    else\n        local pivot = quickselect(arr,\
    \ 1, n, k)\n        local res = {}\n        for i = 1, n do\n            if arr[i]\
    \ >= pivot then\n                res[#res + 1] = arr[i]\n            end\n   \
    \     end\n        return res\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyd1q72q.lua:71:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpkyd1q72q.lua:71:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, lo, hi)\n        local pivot = arr[hi]\n        local\
    \ i = lo\n        for j = lo, hi - 1 do\n            if arr[j] < pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[hi] = arr[hi], arr[i]\n   \
    \     return i\n    end\n    local function select(arr, lo, hi, k)\n        if\
    \ lo == hi then\n            return arr[lo]\n        end\n        local p = partition(arr,\
    \ lo, hi)\n        if p == k then\n            return arr[p]\n        elseif p\
    \ < k then\n            return select(arr, p + 1, hi, k)\n        else\n     \
    \       return select(arr, lo, p - 1, k)\n        end\n    end\n    local function\
    \ quick_sort(arr, lo, hi)\n        if lo < hi then\n            local p = partition(arr,\
    \ lo, hi)\n            quick_sort(arr, lo, p - 1)\n            quick_sort(arr,\
    \ p + 1, hi)\n        end\n    end\n    local n = #arr\n    local k = math.min(k,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = select(arr, 1,\
    \ n, n - i + 1)\n    end\n    quick_sort(res, 1, k)\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = -math.huge\n        local index\
    \ = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n        \
    \        max = arr[j]\n                index = j\n            end\n        end\n\
    \        table.insert(t, max)\n        table.remove(arr, index)\n    end\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r5chxf5.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp4r5chxf5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k == n then return arr end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_select(arr, left, right, k)\n\
    \        if left == right then return arr[left] end\n        local pivot_index\
    \ = partition(arr, left, right)\n        if pivot_index == k then return arr[pivot_index]\
    \ end\n        if pivot_index > k then\n            return quick_select(arr, left,\
    \ pivot_index - 1, k)\n        else\n            return quick_select(arr, pivot_index\
    \ + 1, right, k)\n        end\n    end\n    local pivot = quick_select(arr, 1,\
    \ n, k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n\
    \            res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihvxdogg.lua:61:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpihvxdogg.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        table.insert(res, arr[i])\n\
    \    end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] >\
    \ res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5k89tfm.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmph5k89tfm.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmph5k89tfm.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len then\n\
    \        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_sort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, len)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q4vieup.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp7q4vieup.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = -math.huge\n        local index\
    \ = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n        \
    \        max = arr[j]\n                index = j\n            end\n        end\n\
    \        table.insert(t, max)\n        table.remove(arr, index)\n    end\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexvm9ohg.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpexvm9ohg.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ l, r)\n        if l < r then\n            local p = partition(arr, l, r)\n \
    \           quick_sort(arr, l, p - 1)\n            quick_sort(arr, p + 1, r)\n\
    \        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1iu9nfyb.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1iu9nfyb.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ghjwl89.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp6ghjwl89.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqpzrw47.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpzqpzrw47.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    if k ==\
    \ 0 then return {} end\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k, 2, -1 do\n        if heap[i] < heap[i // 2]\
    \ then\n            heap[i], heap[i // 2] = heap[i // 2], heap[i]\n        end\n\
    \    end\n    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n     \
    \       heap[1] = arr[i]\n            for j = 1, k // 2 do\n                if\
    \ heap[j] > heap[j * 2] or heap[j] > heap[j * 2 + 1] then\n                  \
    \  if heap[j * 2] < heap[j * 2 + 1] then\n                        heap[j], heap[j\
    \ * 2] = heap[j * 2], heap[j]\n                    else\n                    \
    \    heap[j], heap[j * 2 + 1] = heap[j * 2 + 1], heap[j]\n                   \
    \ end\n                end\n            end\n        end\n    end\n    return\
    \ heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmh1c2kjd.lua:31:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmh1c2kjd.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpmh1c2kjd.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ heap = {}\n    local heap_size = 0\n    local function heap_push(x)\n      \
    \  heap_size = heap_size + 1\n        heap[heap_size] = x\n        local i = heap_size\n\
    \        while i > 1 do\n            local j = math.floor(i / 2)\n           \
    \ if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n\
    \                i = j\n            else\n                break\n            end\n\
    \        end\n    end\n    local function heap_pop()\n        local x = heap[1]\n\
    \        heap[1] = heap[heap_size]\n        heap_size = heap_size - 1\n      \
    \  local i = 1\n        while i * 2 <= heap_size do\n            local j = i *\
    \ 2\n            if j + 1 <= heap_size and heap[j + 1] > heap[j] then\n      \
    \          j = j + 1\n            end\n            if heap[i] < heap[j] then\n\
    \                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n\
    \            else\n                break\n            end\n        end\n     \
    \   return x\n    end\n    for i = 1, #arr do\n        if heap_size < k then\n\
    \            heap_push(arr[i])\n        elseif arr[i] > heap[1] then\n       \
    \     heap_pop()\n            heap_push(arr[i])\n        end\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = heap_pop()\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6qfxqw2.lua:70:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpc6qfxqw2.lua:70:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len then\n\
    \        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, len)\n    local res\
    \ = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg4guo_y.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpmg4guo_y.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    for i = k, n do\n        table.sort(heap)\n        if arr[i] > heap[1]\
    \ then\n            heap[1] = arr[i]\n        end\n    end\n    table.sort(heap)\n\
    \    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bw490jt.lua:42:\
    \ expected: {2, 20, 123}\nactual: {20, 20, 123}\nstack traceback:\n\t/tmp/tmp8bw490jt.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local i, j = l, r\n        local pivot\
    \ = arr[l]\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l >= r then\n            return\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return\n        elseif pivot\
    \ > k then\n            quickSelect(arr, l, pivot - 1, k)\n        else\n    \
    \        quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, #arr, #arr - k + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n\
    \        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq3mt2dd.lua:57:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpuq3mt2dd.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local t = {}\n    for i = 1, n do\n  \
    \      t[i] = arr[i]\n    end\n    table.sort(t)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = t[n - i + 1]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu57wv0jk.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpu57wv0jk.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmq04te0.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpkmq04te0.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 2, -1 do\n        if heap[i] < heap[i // 2] then\n            heap[i],\
    \ heap[i // 2] = heap[i // 2], heap[i]\n        end\n    end\n    for i = k +\
    \ 1, #arr do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \            for j = 1, k, 2 do\n                if heap[j] > heap[j + 1] then\n\
    \                    heap[j], heap[j + 1] = heap[j + 1], heap[j]\n           \
    \     end\n            end\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzwt1ncx.lua:30:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpwzwt1ncx.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpwzwt1ncx.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local ret = {}\n    for i = 1, k do\n     \
    \   ret[i] = arr[i]\n    end\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8h640xv.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmps8h640xv.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1z_kpvxh.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1z_kpvxh.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp1z_kpvxh.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ if i < j then\n                arr[i] = arr[j]\n                i = i + 1\n\
    \            end\n            while i < j and arr[i] >= pivot do\n           \
    \     i = i + 1\n            end\n            if i < j then\n                arr[j]\
    \ = arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, l, r)\n\
    \        if l < r then\n            local i = partition(arr, l, r)\n         \
    \   quick_sort(arr, l, i - 1)\n            quick_sort(arr, i + 1, r)\n       \
    \ end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2s0wcpc.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_2s0wcpc.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        return arr\n    end\n    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left + 1\n        local j = right\n        while true do\n            while\
    \ i <= j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            while i <= j and arr[j] <= pivot do\n                j = j - 1\n\
    \            end\n            if i > j then\n                break\n         \
    \   end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[left],\
    \ arr[j] = arr[j], arr[left]\n        return j\n    end\n    local function quick_select(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local j = partition(arr, left, right)\n        if j == k\
    \ then\n            return arr[j]\n        elseif j > k then\n            return\
    \ quick_select(arr, left, j - 1, k)\n        else\n            return quick_select(arr,\
    \ j + 1, right, k)\n        end\n    end\n    quick_select(arr, 1, len, k)\n \
    \   return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmklzqywt.lua:60:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpmklzqywt.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 2, -1 do\n        if heap[i] < heap[i // 2] then\n            heap[i],\
    \ heap[i // 2] = heap[i // 2], heap[i]\n        end\n    end\n    for i = k +\
    \ 1, #arr do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \            for j = 1, k // 2 do\n                if heap[j] > heap[j * 2] and\
    \ heap[j] > heap[j * 2 + 1] then\n                    break\n                elseif\
    \ heap[j * 2] > heap[j * 2 + 1] then\n                    heap[j], heap[j * 2]\
    \ = heap[j * 2], heap[j]\n                else\n                    heap[j], heap[j\
    \ * 2 + 1] = heap[j * 2 + 1], heap[j]\n                end\n            end\n\
    \        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5s2liwav.lua:32:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5s2liwav.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmp5s2liwav.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ mid = partition(arr, left, right)\n            quick_sort(arr, left, mid - 1)\n\
    \            quick_sort(arr, mid + 1, right)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatwwcyd7.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpatwwcyd7.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7_lsqur.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpi7_lsqur.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ l, r)\n        if l < r then\n            local m = partition(arr, l, r)\n \
    \           quick_sort(arr, l, m - 1)\n            quick_sort(arr, m + 1, r)\n\
    \        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8g2wpqh.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpe8g2wpqh.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n    \
    \    result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73fwwmjp.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp73fwwmjp.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n    table.sort(t)\n\
    \    for i = k + 1, #arr do\n        if arr[i] > t[1] then\n            t[1] =\
    \ arr[i]\n            table.sort(t)\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkxqzx22f.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpkxqzx22f.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpkxqzx22f.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local function partition(arr, l, r)\n        local i, j = l, r\n\
    \        local pivot = arr[l]\n        while i < j do\n            while i < j\
    \ and arr[j] <= pivot do\n                j = j - 1\n            end\n       \
    \     arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n      \
    \          i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    local function quickSort(arr, l, r)\n        if l < r\
    \ then\n            local i = partition(arr, l, r)\n            quickSort(arr,\
    \ l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n    end\n    quickSelect(arr,\
    \ 1, n, k)\n    quickSort(arr, 1, k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7os3myvo.lua:62:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp7os3myvo.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k >= len then return arr end\n    local heap = {}\n    for i = 1,\
    \ k do\n        heap[i] = arr[i]\n    end\n    for i = k, len do\n        local\
    \ min = heap[1]\n        if arr[i] > min then\n            heap[1] = arr[i]\n\
    \            local j = 1\n            while j < k do\n                local l\
    \ = j * 2\n                local r = l + 1\n                if r <= k then\n \
    \                   if heap[l] < heap[r] then\n                        if heap[j]\
    \ > heap[l] then\n                            heap[j], heap[l] = heap[l], heap[j]\n\
    \                            j = l\n                        else\n           \
    \                 break\n                        end\n                    else\n\
    \                        if heap[j] > heap[r] then\n                         \
    \   heap[j], heap[r] = heap[r], heap[j]\n                            j = r\n \
    \                       else\n                            break\n            \
    \            end\n                    end\n                else\n            \
    \        if heap[j] > heap[l] then\n                        heap[j], heap[l] =\
    \ heap[l], heap[j]\n                        j = l\n                    else\n\
    \                        break\n                    end\n                end\n\
    \            end\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbekplky.lua:66:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpgbekplky.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, lo, hi)\n        local pivot = arr[hi]\n        local\
    \ i = lo\n        for j = lo, hi - 1 do\n            if arr[j] > pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[hi] = arr[hi], arr[i]\n   \
    \     return i\n    end\n    local function quickselect(arr, lo, hi, k)\n    \
    \    if lo >= hi then\n            return\n        end\n        local p = partition(arr,\
    \ lo, hi)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickselect(arr, p + 1, hi, k)\n        else\n            quickselect(arr,\
    \ lo, p - 1, k)\n        end\n    end\n    quickselect(arr, 1, #arr, k)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6rltfne.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpz6rltfne.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local t = {}\n    for i = 1, n do\n        local v = arr[i]\n\
    \        local j = i\n        while j > 1 and v > t[j - 1] do\n            t[j]\
    \ = t[j - 1]\n            j = j - 1\n        end\n        t[j] = v\n        if\
    \ i > k then\n            table.remove(t, 1)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ydbu1qd.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1ydbu1qd.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ l, r)\n        if l < r then\n            local pivot = partition(arr, l, r)\n\
    \            quick_sort(arr, l, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2dub2pl.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpr2dub2pl.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, n do\n\
    \        local j = 1\n        while j <= k and res[j] < arr[i] do\n          \
    \  j = j + 1\n        end\n        if j <= k then\n            for l = k, j +\
    \ 1, -1 do\n                res[l] = res[l - 1]\n            end\n           \
    \ res[j] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl683dt44.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpl683dt44.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpna98vvab.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpna98vvab.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpna98vvab.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnz_shsh.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmptnz_shsh.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r + 1\n        while true do\n            repeat i =\
    \ i + 1 until arr[i] >= pivot or i == r\n            repeat j = j - 1 until arr[j]\
    \ <= pivot or j == l\n            if i >= j then break end\n            arr[i],\
    \ arr[j] = arr[j], arr[i]\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n\
    \        return j\n    end\n    local function select(arr, l, r, k)\n        if\
    \ l == r then return arr[l] end\n        local j = partition(arr, l, r)\n    \
    \    local n = j - l + 1\n        if n == k then return arr[j]\n        elseif\
    \ n > k then return select(arr, l, j - 1, k)\n        else return select(arr,\
    \ j + 1, r, k - n) end\n    end\n    local function sort(arr, l, r)\n        if\
    \ l >= r then return end\n        local j = partition(arr, l, r)\n        sort(arr,\
    \ l, j - 1)\n        sort(arr, j + 1, r)\n    end\n    local n = #arr\n    local\
    \ m = select(arr, 1, n, k)\n    sort(arr, 1, n)\n    local t = {}\n    for i =\
    \ 1, n do\n        if arr[i] >= m then\n            t[#t + 1] = arr[i]\n     \
    \       if #t == k then break end\n        end\n    end\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvmtmjqr.lua:60:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpdvmtmjqr.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm6yb72r.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmppm6yb72r.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k == len then return arr end\n    local t = {}\n    for i = 1, k\
    \ do\n        t[i] = arr[i]\n    end\n    table.sort(t)\n    for i = k + 1, len\
    \ do\n        if arr[i] > t[1] then\n            t[1] = arr[i]\n            table.sort(t)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx7iwgg0.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpcx7iwgg0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0r0aejt.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpu0r0aejt.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = #arr - k + 1, #arr\
    \ do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fuk35_o.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp7fuk35_o.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left + 1\n        local j = right\n        while true do\n    \
    \        while i <= j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            while i <= j and arr[j] <= pivot do\n              \
    \  j = j - 1\n            end\n            if i >= j then\n                break\n\
    \            end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n \
    \       arr[left], arr[j] = arr[j], arr[left]\n        return j\n    end\n   \
    \ local function quickSelect(arr, left, right, k)\n        if left == right then\n\
    \            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    quickSelect(arr, 1, #arr, k)\n    return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvnytabu.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpnvnytabu.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ heap = {}\n    local heap_size = 0\n    local function heap_push(x)\n      \
    \  heap_size = heap_size + 1\n        heap[heap_size] = x\n        local i = heap_size\n\
    \        while i > 1 do\n            local p = math.floor(i / 2)\n           \
    \ if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n\
    \                i = p\n            else\n                break\n            end\n\
    \        end\n    end\n    local function heap_pop()\n        local ret = heap[1]\n\
    \        heap[1] = heap[heap_size]\n        heap_size = heap_size - 1\n      \
    \  local i = 1\n        while i * 2 <= heap_size do\n            local l = i *\
    \ 2\n            local r = i * 2 + 1\n            local m = l\n            if\
    \ r <= heap_size and heap[r] > heap[l] then\n                m = r\n         \
    \   end\n            if heap[i] < heap[m] then\n                heap[i], heap[m]\
    \ = heap[m], heap[i]\n                i = m\n            else\n              \
    \  break\n            end\n        end\n        return ret\n    end\n    for i\
    \ = 1, #arr do\n        if heap_size < k then\n            heap_push(arr[i])\n\
    \        elseif arr[i] > heap[1] then\n            heap_pop()\n            heap_push(arr[i])\n\
    \        end\n    end\n    local ret = {}\n    for i = 1, k do\n        ret[i]\
    \ = heap_pop()\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kf49see.lua:72:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8kf49see.lua:72:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function heapify(arr, i, n)\n        local l, r, largest = 2 * i, 2 * i + 1,\
    \ i\n        if l <= n and arr[l] > arr[largest] then\n            largest = l\n\
    \        end\n        if r <= n and arr[r] > arr[largest] then\n            largest\
    \ = r\n        end\n        if largest ~= i then\n            arr[i], arr[largest]\
    \ = arr[largest], arr[i]\n            heapify(arr, largest, n)\n        end\n\
    \    end\n    local function build_heap(arr, n)\n        for i = math.floor(n\
    \ / 2), 1, -1 do\n            heapify(arr, i, n)\n        end\n    end\n    local\
    \ function heap_sort(arr, n)\n        build_heap(arr, n)\n        for i = n, 2,\
    \ -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n            heapify(arr,\
    \ 1, i - 1)\n        end\n    end\n    heap_sort(arr, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8b1nw9jz.lua:54:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp8b1nw9jz.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ mid = partition(arr, left, right)\n            quick_sort(arr, left, mid - 1)\n\
    \            quick_sort(arr, mid + 1, right)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hs10l19.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_hs10l19.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local max_idx = 0\n        for j = 1, len do\n            if arr[j] >\
    \ max then\n                max = arr[j]\n                max_idx = j\n      \
    \      end\n        end\n        res[i] = max\n        arr[max_idx] = -math.huge\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7gtkcfb.lua:44:\
    \ expected: {2, 20, 123}\nactual: {123, 20, 2}\nstack traceback:\n\t/tmp/tmps7gtkcfb.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, lo, hi)\n        local pivot = arr[hi]\n        local\
    \ i = lo\n        for j = lo, hi - 1 do\n            if arr[j] > pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[hi] = arr[hi], arr[i]\n   \
    \     return i\n    end\n    local function quick_select(arr, lo, hi, k)\n   \
    \     if lo >= hi then\n            return\n        end\n        local p = partition(arr,\
    \ lo, hi)\n        if p == k then\n            return\n        elseif p > k then\n\
    \            quick_select(arr, lo, p - 1, k)\n        else\n            quick_select(arr,\
    \ p + 1, hi, k)\n        end\n    end\n    quick_select(arr, 1, #arr, k)\n   \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhxnl7e3.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmphhxnl7e3.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k >= len then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k +\
    \ 1, len do\n        local j = 1\n        while j <= k do\n            if arr[i]\
    \ > res[j] then\n                table.remove(res, j)\n                table.insert(res,\
    \ j, arr[i])\n                break\n            end\n            j = j + 1\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm_mt8xm.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpsm_mt8xm.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijqt_og8.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpijqt_og8.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = -math.huge\n        local max_i\
    \ = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n        \
    \        max = arr[j]\n                max_i = j\n            end\n        end\n\
    \        table.insert(t, max)\n        table.remove(arr, max_i)\n    end\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l7w9pwv.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp5l7w9pwv.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local result = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local index = 0\n        for j = 1, len do\n            if arr[j] > max\
    \ then\n                max = arr[j]\n                index = j\n            end\n\
    \        end\n        table.insert(result, max)\n        arr[index] = -math.huge\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4saf8a2.lua:44:\
    \ expected: {2, 20, 123}\nactual: {123, 20, 2}\nstack traceback:\n\t/tmp/tmpf4saf8a2.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local pivot = partition(arr, l, r)\n\
    \            quickSort(arr, l, pivot - 1)\n            quickSort(arr, pivot +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpno0l5oa3.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpno0l5oa3.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ if i < j then\n                arr[i] = arr[j]\n                i = i + 1\n\
    \            end\n            while i < j and arr[i] >= pivot do\n           \
    \     i = i + 1\n            end\n            if i < j then\n                arr[j]\
    \ = arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, l, r)\n\
    \        if l < r then\n            local m = partition(arr, l, r)\n         \
    \   quick_sort(arr, l, m - 1)\n            quick_sort(arr, m + 1, r)\n       \
    \ end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4ohgwz5.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_4ohgwz5.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ res = {}\n    for i = 1, k do\n        local max = -math.huge\n        local\
    \ max_index = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n\
    \                max = arr[j]\n                max_index = j\n            end\n\
    \        end\n        res[i] = max\n        table.remove(arr, max_index)\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet9byghz.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpet9byghz.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l - 1\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n \
    \               i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n \
    \           end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quick_select(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p < k then\n            return quick_select(arr, p + 1, r, k)\n\
    \        else\n            return quick_select(arr, l, p - 1, k)\n        end\n\
    \    end\n    local function quick_select_k(arr, k)\n        local res = {}\n\
    \        for i = 1, k do\n            res[i] = quick_select(arr, 1, #arr, i)\n\
    \        end\n        return res\n    end\n    return quick_select_k(arr, k)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycowknfk.lua:55:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpycowknfk.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnz9r5smp.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpnz9r5smp.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = -math.huge\n        local index\
    \ = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n        \
    \        max = arr[j]\n                index = j\n            end\n        end\n\
    \        table.insert(t, max)\n        table.remove(arr, index)\n    end\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcm8mxa5k.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpcm8mxa5k.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = -math.huge\n        local max_idx\
    \ = nil\n        for j = 1, #arr do\n            if arr[j] > max then\n      \
    \          max = arr[j]\n                max_idx = j\n            end\n      \
    \  end\n        t[i] = max\n        table.remove(arr, max_idx)\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3orjyln.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpt3orjyln.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivqotjca.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpivqotjca.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    table.sort(heap)\n    for i = k + 1, len do\n        if arr[i] >\
    \ heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n \
    \       end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl2jfj3b_.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpl2jfj3b_.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpl2jfj3b_.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] >= pivot then\n    \
    \            arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n    \
    \        end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    quickSelect(arr, 1, #arr, k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnrj8d8h.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpmnrj8d8h.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = arr[i]\n        local max_index\
    \ = i\n        for j = i + 1, #arr do\n            if arr[j] > max then\n    \
    \            max = arr[j]\n                max_index = j\n            end\n  \
    \      end\n        arr[max_index] = arr[i]\n        arr[i] = max\n        t[i]\
    \ = max\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5nr4d0e.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpa5nr4d0e.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ heap = {}\n    local heap_size = 0\n    local function heap_insert(x)\n    \
    \    heap_size = heap_size + 1\n        heap[heap_size] = x\n        local i =\
    \ heap_size\n        while i > 1 do\n            local p = math.floor(i / 2)\n\
    \            if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i],\
    \ heap[p]\n                i = p\n            else\n                break\n  \
    \          end\n        end\n    end\n    local function heap_pop()\n        local\
    \ ret = heap[1]\n        heap[1] = heap[heap_size]\n        heap_size = heap_size\
    \ - 1\n        local i = 1\n        while i * 2 <= heap_size do\n            local\
    \ l = i * 2\n            local r = i * 2 + 1\n            local max = l\n    \
    \        if r <= heap_size and heap[r] > heap[l] then\n                max = r\n\
    \            end\n            if heap[i] < heap[max] then\n                heap[i],\
    \ heap[max] = heap[max], heap[i]\n                i = max\n            else\n\
    \                break\n            end\n        end\n        return ret\n   \
    \ end\n    for i = 1, #arr do\n        if heap_size < k then\n            heap_insert(arr[i])\n\
    \        else\n            if arr[i] > heap[1] then\n                heap_pop()\n\
    \                heap_insert(arr[i])\n            end\n        end\n    end\n\
    \    local ret = {}\n    for i = 1, k do\n        ret[i] = heap_pop()\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunqvzv6f.lua:74:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpunqvzv6f.lua:74:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, low, high)\n        local pivot = arr[high]\n      \
    \  local i = low - 1\n        for j = low, high - 1 do\n            if arr[j]\
    \ > pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[high] = arr[high],\
    \ arr[i + 1]\n        return i + 1\n    end\n    local function quickSort(arr,\
    \ low, high)\n        if low < high then\n            local pi = partition(arr,\
    \ low, high)\n            quickSort(arr, low, pi - 1)\n            quickSort(arr,\
    \ pi + 1, high)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94wh34ui.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp94wh34ui.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n <= k then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    table.sort(heap)\n    for i = k + 1, n do\n        if arr[i] > heap[1]\
    \ then\n            heap[1] = arr[i]\n            table.sort(heap)\n        end\n\
    \    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40rkjc_n.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp40rkjc_n.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp40rkjc_n.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        return arr\n    end\n    local function\
    \ partition(arr, lo, hi)\n        local i, j = lo, hi\n        local v = arr[lo]\n\
    \        while i < j do\n            while i < j and arr[j] <= v do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= v do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = v\n        return\
    \ i\n    end\n    local function sort(arr, lo, hi)\n        if lo >= hi then\n\
    \            return\n        end\n        local p = partition(arr, lo, hi)\n \
    \       if p == k then\n            return\n        elseif p > k then\n      \
    \      sort(arr, lo, p - 1)\n        else\n            sort(arr, p + 1, hi)\n\
    \        end\n    end\n    sort(arr, 1, n)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0l1b6v1t.lua:57:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp0l1b6v1t.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n\
    \    table.sort(t)\n    for i = k + 1, n do\n        if arr[i] > t[1] then\n \
    \           t[1] = arr[i]\n            table.sort(t)\n        end\n    end\n \
    \   return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8daa5xyb.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp8daa5xyb.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp8daa5xyb.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local idx = 0\n        for j = 1, len do\n            if arr[j] > max\
    \ then\n                max = arr[j]\n                idx = j\n            end\n\
    \        end\n        table.insert(res, max)\n        arr[idx] = -math.huge\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz8liau_.lua:44:\
    \ expected: {2, 20, 123}\nactual: {123, 20, 2}\nstack traceback:\n\t/tmp/tmppz8liau_.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k == n then return arr end\n    local heap = {}\n    for i = 1, k do\n\
    \        heap[i] = arr[i]\n    end\n    for i = k, 2, -1 do\n        local j =\
    \ i\n        while j > 1 do\n            local p = math.floor(j / 2)\n       \
    \     if heap[p] < heap[j] then\n                heap[p], heap[j] = heap[j], heap[p]\n\
    \                j = p\n            else\n                break\n            end\n\
    \        end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j *\
    \ 2 <= k do\n                local l = j * 2\n                local r = l + 1\n\
    \                if r <= k and heap[l] < heap[r] then\n                    l =\
    \ r\n                end\n                if heap[j] < heap[l] then\n        \
    \            heap[j], heap[l] = heap[l], heap[j]\n                    j = l\n\
    \                else\n                    break\n                end\n      \
    \      end\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e5vk4iy.lua:62:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp8e5vk4iy.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7f3jwbh.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpg7f3jwbh.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86yedavz.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp86yedavz.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local mid = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, mid - 1)\n            quick_sort(arr, mid + 1, right)\n        end\n \
    \   end\n    quick_sort(arr, 1, len)\n    local res = {}\n    for i = len, len\
    \ - k + 1, -1 do\n        table.insert(res, arr[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kd9900r.lua:64:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp8kd9900r.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k == len then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l + 1\n        local\
    \ j = r\n        while true do\n            while i <= r and arr[i] >= pivot do\
    \ i = i + 1 end\n            while j >= l + 1 and arr[j] <= pivot do j = j - 1\
    \ end\n            if i >= j then break end\n            arr[i], arr[j] = arr[j],\
    \ arr[i]\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return\
    \ j\n    end\n    local function quick_select(arr, l, r, k)\n        if l == r\
    \ then return arr[l] end\n        local j = partition(arr, l, r)\n        if j\
    \ == k then return arr[j] end\n        if j > k then return quick_select(arr,\
    \ l, j - 1, k) end\n        return quick_select(arr, j + 1, r, k)\n    end\n \
    \   quick_select(arr, 1, len, k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0f1o5c8k.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp0f1o5c8k.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n then\n  \
    \      return arr\n    end\n    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSelect(arr, l, r, k)\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return\n        elseif i < k then\n\
    \            quickSelect(arr, i + 1, r, k)\n        else\n            quickSelect(arr,\
    \ l, i - 1, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjqbubiz.lua:57:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpmjqbubiz.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ res = {}\n    for i = 1, k do\n        local max = -math.huge\n        local\
    \ max_idx = -1\n        for j = 1, #arr do\n            if arr[j] > max then\n\
    \                max = arr[j]\n                max_idx = j\n            end\n\
    \        end\n        res[i] = max\n        table.remove(arr, max_idx)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0rs4fwx.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpz0rs4fwx.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        local j = 1\n\
    \        while j <= k do\n            if arr[i] > res[j] then\n              \
    \  for l = k, j + 1, -1 do\n                    res[l] = res[l - 1]\n        \
    \        end\n                res[j] = arr[i]\n                break\n       \
    \     end\n            j = j + 1\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3twjwth_.lua:47:\
    \ expected: {4, 4}\nactual: {4, -4}\nstack traceback:\n\t/tmp/tmp3twjwth_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mdguyyi.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8mdguyyi.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local m = -math.huge\n        local j =\
    \ 0\n        for i, v in ipairs(arr) do\n            if v > m then\n         \
    \       m = v\n                j = i\n            end\n        end\n        table.insert(t,\
    \ m)\n        table.remove(arr, j)\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhq_y8ke.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpkhq_y8ke.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        local j = 1\n\
    \        while j <= k do\n            if arr[i] > res[j] then\n              \
    \  table.remove(res, j)\n                table.insert(res, j, arr[i])\n      \
    \          break\n            end\n            j = j + 1\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv0vbckx.lua:48:\
    \ expected: {0, 1, 2, 20}\nactual: {2, 0, 1, 20}\nstack traceback:\n\t/tmp/tmpbv0vbckx.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k > len then\n        k = len\n    end\n    local res = {}\n\
    \    for i = 1, k do\n        local max = -math.huge\n        local max_index\
    \ = -1\n        for j = 1, len do\n            if arr[j] > max then\n        \
    \        max = arr[j]\n                max_index = j\n            end\n      \
    \  end\n        res[i] = max\n        arr[max_index] = -math.huge\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst6_ood5.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpst6_ood5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k >= len then return arr end\n    local max = {}\n    for i = 1,\
    \ k do\n        local max_i = i\n        for j = i + 1, len do\n            if\
    \ arr[j] > arr[max_i] then\n                max_i = j\n            end\n     \
    \   end\n        max[i] = arr[max_i]\n        arr[max_i] = arr[i]\n    end\n \
    \   return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0nlkra9.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpg0nlkra9.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n then\n  \
    \      return arr\n    end\n    local function partition(arr, l, r)\n        local\
    \ pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n         \
    \   if arr[j] < pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[r]\
    \ = arr[r], arr[i]\n        return i\n    end\n    local function quick_select(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p < k then\n            return quick_select(arr, p +\
    \ 1, r, k)\n        else\n            return quick_select(arr, l, p - 1, k)\n\
    \        end\n    end\n    local function sort(arr, l, r)\n        if l >= r then\n\
    \            return\n        end\n        local p = partition(arr, l, r)\n   \
    \     sort(arr, l, p - 1)\n        sort(arr, p + 1, r)\n    end\n    local pivot\
    \ = quick_select(arr, 1, n, k)\n    local i = 1\n    for j = 1, n do\n       \
    \ if arr[j] >= pivot then\n            arr[i], arr[j] = arr[j], arr[i]\n     \
    \       i = i + 1\n        end\n    end\n    sort(arr, 1, i - 1)\n    return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7c1fmz1.lua:71:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpy7c1fmz1.lua:71:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzv2szv8.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxzv2szv8.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqllqvr8a.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpqllqvr8a.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswtrep44.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpswtrep44.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function quickSort(arr, l, r)\n        if l >= r then return end\n        local\
    \ i, j = l, r\n        local pivot = arr[i]\n        while i < j do\n        \
    \    while i < j and arr[j] <= pivot do j = j - 1 end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do i = i + 1 end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        quickSort(arr, l, i -\
    \ 1)\n        quickSort(arr, i + 1, r)\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdscqlryc.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpdscqlryc.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        return arr\n    end\n    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_select(arr, left, right, k)\n        if left == right then\n         \
    \   return arr[left]\n        end\n        local mid = partition(arr, left, right)\n\
    \        if mid == k then\n            return arr[mid]\n        elseif mid < k\
    \ then\n            return quick_select(arr, mid + 1, right, k)\n        else\n\
    \            return quick_select(arr, left, mid - 1, k)\n        end\n    end\n\
    \    local function sort(arr, left, right)\n        if left < right then\n   \
    \         local mid = partition(arr, left, right)\n            sort(arr, left,\
    \ mid - 1)\n            sort(arr, mid + 1, right)\n        end\n    end\n    quick_select(arr,\
    \ 1, n, k)\n    sort(arr, 1, k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixo2cj04.lua:66:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpixo2cj04.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ckmujoe.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8ckmujoe.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2wo23_5s.lua:28:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2wo23_5s.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp2wo23_5s.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    quickSelect(arr, 1, #arr, k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagmyhnqx.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpagmyhnqx.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] >= pivot then\n    \
    \            arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n    \
    \        end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickselect(arr, l, r, k)\n        if l == r\
    \ then\n            return\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return\n        elseif pivot\
    \ < k then\n            quickselect(arr, pivot + 1, r, k)\n        else\n    \
    \        quickselect(arr, l, pivot - 1, k)\n        end\n    end\n    quickselect(arr,\
    \ 1, #arr, k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9dbw60y.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpx9dbw60y.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k == n then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n\
    \    table.sort(t)\n    for i = k + 1, n do\n        local j = 1\n        while\
    \ j <= k and t[j] < arr[i] do\n            j = j + 1\n        end\n        if\
    \ j <= k then\n            table.insert(t, j, arr[i])\n            table.remove(t)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3nzstq1.lua:44:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpu3nzstq1.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    local t = {}\n    for i = 1, len do\n        local v = arr[i]\n\
    \        local j = #t\n        while j > 0 and v > t[j] do\n            j = j\
    \ - 1\n        end\n        if j < k then\n            table.insert(t, j + 1,\
    \ v)\n            if #t > k then\n                table.remove(t)\n          \
    \  end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsijfera.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmprsijfera.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ if i < j then\n                arr[i] = arr[j]\n                i = i + 1\n\
    \            end\n            while i < j and arr[i] >= pivot do\n           \
    \     i = i + 1\n            end\n            if i < j then\n                arr[j]\
    \ = arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, l, r)\n\
    \        if l < r then\n            local m = partition(arr, l, r)\n         \
    \   quick_sort(arr, l, m - 1)\n            quick_sort(arr, m + 1, r)\n       \
    \ end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4a97qu3i.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp4a97qu3i.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8ub681w.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmps8ub681w.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if k > len then\n        k = len\n    end\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpebvq1c67.lua:27:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpebvq1c67.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpebvq1c67.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5umbp7ws.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp5umbp7ws.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    for i = 1, k do\n        local max = -math.huge\n        local index\
    \ = -1\n        for j = 1, #arr do\n            if arr[j] > max then\n       \
    \         max = arr[j]\n                index = j\n            end\n        end\n\
    \        t[i] = max\n        table.remove(arr, index)\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg2ngjy7.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpeg2ngjy7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9ibk3ki.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpt9ibk3ki.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bvtctue.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp9bvtctue.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k >= len then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, len)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk19xdbj4.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpk19xdbj4.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpty6295s2.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpty6295s2.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7g6rq21.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpj7g6rq21.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k == len then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k +\
    \ 1, len do\n        local j = 1\n        while j <= k do\n            if arr[i]\
    \ > res[j] then\n                table.remove(res, k)\n                table.insert(res,\
    \ j, arr[i])\n                break\n            end\n            j = j + 1\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoks7ea9z.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpoks7ea9z.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local heap = {}\n    for i = 1, k do\n\
    \        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n        heapify(heap,\
    \ i, k)\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            heapify(heap, 1, k)\n        end\n\
    \    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_txmmhs.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpe_txmmhs.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then return arr[left] end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then return arr[pivot] end\n        if pivot\
    \ > k then\n            return quickSelect(arr, left, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = quickSelect(arr, 1,\
    \ n, i)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1svbrtnk.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp1svbrtnk.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return {}\
    \ end\n    if k == len then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    local heap = Heap.new(res, function(a,\
    \ b) return a > b end)\n    for i = k + 1, len do\n        if arr[i] > heap:top()\
    \ then\n            heap:pop()\n            heap:push(arr[i])\n        end\n \
    \   end\n    return heap:sort()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw1es3sf.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpgw1es3sf.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l - 1\n        for j = l, r - 1 do\n            if arr[j] <= pivot then\n\
    \                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quickSelect(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ pivot = partition(arr, l, r)\n        if pivot == k then\n            return\
    \ arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local function sort(arr, k)\n        local\
    \ n = #arr\n        for i = 1, k do\n            quickSelect(arr, i, n, i)\n \
    \       end\n    end\n    sort(arr, k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqe3dw6cv.lua:56:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmpqe3dw6cv.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmssnhdj.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpqmssnhdj.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local t = {}\n    for i = 1, n do\n        local x = arr[i]\n\
    \        local j = i\n        while j > 1 and t[j - 1] < x do\n            t[j]\
    \ = t[j - 1]\n            j = j - 1\n        end\n        t[j] = x\n        if\
    \ i > k then\n            table.remove(t, 1)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_t_0ag70.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_t_0ag70.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
