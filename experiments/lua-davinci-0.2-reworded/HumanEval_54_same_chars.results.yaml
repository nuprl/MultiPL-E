name: HumanEval_54_same_chars
language: lua
results:
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdb9t8630.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdb9t8630.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvv9jt7n.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmvv9jt7n.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3rcf2u6.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj3rcf2u6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxo6fd75_.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxo6fd75_.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = char_counts(s0)\n    local c1 = char_counts(s1)\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbr7_dlc9.lua:15:\
    \ attempt to call a nil value (global 'char_counts')\nstack traceback:\n\t/tmp/tmpbr7_dlc9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpbr7_dlc9.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1ymvnwk.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu1ymvnwk.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_wxsypb.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf_wxsypb.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in utf8.chars(s0)\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in utf8.chars(s1) do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubboo3ed.lua:17:\
    \ attempt to call a nil value (field 'chars')\nstack traceback:\n\t/tmp/tmpubboo3ed.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpubboo3ed.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local s0_chars = {}\n  local s1_chars = {}\n  for i =\
    \ 1, #s0 do\n    s0_chars[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n \
    \   s1_chars[s1:sub(i, i)] = true\n  end\n  for k, _ in pairs(s0_chars) do\n \
    \   if not s1_chars[k] then\n      return false\n    end\n  end\n  for k, _ in\
    \ pairs(s1_chars) do\n    if not s0_chars[k] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrxi9zcu.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqrxi9zcu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpioui13lj.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpioui13lj.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdi99apcd.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdi99apcd.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyrlm4tgi.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyrlm4tgi.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyp5tuii.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplyp5tuii.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqkrngug.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphqkrngug.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal3soi4r.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpal3soi4r.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvu_r9mt.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfvu_r9mt.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9mq2xqe.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg9mq2xqe.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvbp55yo.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppvbp55yo.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6mm2_hz.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb6mm2_hz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp013gmooq.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp013gmooq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1v5uumiy.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1v5uumiy.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp379yltnu.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp379yltnu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = count_chars(s0)\n    local c1 = count_chars(s1)\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ll2k7gu.lua:15:\
    \ attempt to call a nil value (global 'count_chars')\nstack traceback:\n\t/tmp/tmp2ll2k7gu.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp2ll2k7gu.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    t1[c] = (t1[c] or 0) + 1\n  end\n  for\
    \ k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgso0c8g4.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgso0c8g4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0zdq4ty.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx0zdq4ty.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4ltopo2.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb4ltopo2.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i, i)]\
    \ = true\n  end\n  for k, _ in pairs(c0) do\n    if not c1[k] then\n      return\
    \ false\n    end\n  end\n  for k, _ in pairs(c1) do\n    if not c0[k] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrms4w8g.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdrms4w8g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfel7bja6.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfel7bja6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.')\
    \ do\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c]\
    \ = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if t1[c] ~= n then\n\
    \      return false\n    end\n  end\n  for c, n in pairs(t1) do\n    if t0[c]\
    \ ~= n then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorpoa8m.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzorpoa8m.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9pzr8o1.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy9pzr8o1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.')\
    \ do\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c]\
    \ = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if t1[c] ~= n then\n\
    \      return false\n    end\n  end\n  for c, n in pairs(t1) do\n    if t0[c]\
    \ ~= n then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcu0celh8.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcu0celh8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gk_xydr.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1gk_xydr.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(c0)\
    \ do\n    if c1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(c1) do\n    if c0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebm0c4q8.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpebm0c4q8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvj0toxjp.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvj0toxjp.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkqsaxwm.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvkqsaxwm.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnevs0wen.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnevs0wen.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.')\
    \ do\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c]\
    \ = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if t1[c] ~= n then\n\
    \      return false\n    end\n  end\n  for c, n in pairs(t1) do\n    if t0[c]\
    \ ~= n then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtdea4mc.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqtdea4mc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwppxtti2.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwppxtti2.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4va2wbgy.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4va2wbgy.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = count_chars(s0)\n    local c1 = count_chars(s1)\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpje2_gt_e.lua:15:\
    \ attempt to call a nil value (global 'count_chars')\nstack traceback:\n\t/tmp/tmpje2_gt_e.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpje2_gt_e.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(c0)\
    \ do\n    if c1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(c1) do\n    if c0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a73k8ez.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_a73k8ez.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        c0[c] = (c0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        c1[c] = (c1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(c1) do\n\
    \        if c0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphedwcyq8.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphedwcyq8.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kb7wd59.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6kb7wd59.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gftrkgn.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5gftrkgn.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp656rmw5r.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp656rmw5r.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = count_chars(s0)\n    local c1 = count_chars(s1)\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcf9qrdf.lua:15:\
    \ attempt to call a nil value (global 'count_chars')\nstack traceback:\n\t/tmp/tmphcf9qrdf.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmphcf9qrdf.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudrbgvbl.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpudrbgvbl.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiutshjhb.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiutshjhb.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5kwjig6.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl5kwjig6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  if #s0 ~= #s1 then return false end\n  local t0, t1 =\
    \ {}, {}\n  for i = 1, #s0 do\n    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0)\
    \ + 1\n    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in\
    \ pairs(t0) do\n    if t1[k] ~= v then return false end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzit8_ze.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgzit8_ze.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj24339hf.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj24339hf.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqcvjgry.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprqcvjgry.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i, i)]\
    \ = true\n  end\n  for k, _ in pairs(c0) do\n    if not c1[k] then\n      return\
    \ false\n    end\n  end\n  for k, _ in pairs(c1) do\n    if not c0[k] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2hrzshz.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi2hrzshz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr266_r3n.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr266_r3n.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(c0)\
    \ do\n    if c1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(c1) do\n    if c0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuilkwemb.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuilkwemb.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq35e4wu.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptq35e4wu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpni2pxs4m.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpni2pxs4m.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgoiogvrf.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgoiogvrf.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if v ~= t1[k] then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if v ~= t0[k] then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd419w_al.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd419w_al.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i, i)]\
    \ = true\n  end\n  for k, _ in pairs(c0) do\n    if not c1[k] then\n      return\
    \ false\n    end\n  end\n  for k, _ in pairs(c1) do\n    if not c0[k] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_g5xdzx.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph_g5xdzx.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp032m9izh.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp032m9izh.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvp488lby.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvp488lby.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptb31512t.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptb31512t.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwy2sbvy.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptwy2sbvy.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeocgs5mf.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeocgs5mf.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72kkvqqg.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp72kkvqqg.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdltbalw0.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdltbalw0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphasitsmw.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphasitsmw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.')\
    \ do\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c]\
    \ = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if t1[c] ~= n then\n\
    \      return false\n    end\n  end\n  for c, n in pairs(t1) do\n    if t0[c]\
    \ ~= n then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkztwhxb.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqkztwhxb.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqq7229n.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplqq7229n.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.')\
    \ do\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c]\
    \ = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if t1[c] ~= n then\n\
    \      return false\n    end\n  end\n  for c, n in pairs(t1) do\n    if t0[c]\
    \ ~= n then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpkhcqg7.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptpkhcqg7.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    t1[c] = (t1[c] or 0) + 1\n  end\n  for\
    \ k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbji8sc3.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbbji8sc3.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe72ywfqe.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe72ywfqe.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    t1[c] = (t1[c] or 0) + 1\n  end\n  for\
    \ k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuqn8tmp.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzuqn8tmp.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39orq0cc.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp39orq0cc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sjjrhsk.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3sjjrhsk.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd20liunx.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd20liunx.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_9xdley.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx_9xdley.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfgat3un.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprfgat3un.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i, i)]\
    \ = true\n  end\n  for k, _ in pairs(c0) do\n    if not c1[k] then\n      return\
    \ false\n    end\n  end\n  for k, _ in pairs(c1) do\n    if not c0[k] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudh9no38.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpudh9no38.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yrnbjjh.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8yrnbjjh.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.')\
    \ do\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c]\
    \ = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if t1[c] ~= n then\n\
    \      return false\n    end\n  end\n  for c, n in pairs(t1) do\n    if t0[c]\
    \ ~= n then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9f6fz526.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9f6fz526.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local chars = {}\n  for i = 1, #s0 do\n    local c = s0:sub(i,\
    \ i)\n    chars[c] = (chars[c] or 0) + 1\n  end\n  for i = 1, #s1 do\n    local\
    \ c = s1:sub(i, i)\n    chars[c] = (chars[c] or 0) - 1\n  end\n  for _, v in pairs(chars)\
    \ do\n    if v ~= 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqz6123w_.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqz6123w_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuo884p6.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphuo884p6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3bphdff.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl3bphdff.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n9bhcd9.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7n9bhcd9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5awub_6.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz5awub_6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    t1[s1:sub(i, i)]\
    \ = true\n  end\n  for k, _ in pairs(t0) do\n    if not t1[k] then\n      return\
    \ false\n    end\n  end\n  for k, _ in pairs(t1) do\n    if not t0[k] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k1y694d.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7k1y694d.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    t1[c] = (t1[c] or 0) + 1\n  end\n  for\
    \ k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7lj6c6d.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb7lj6c6d.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    t1[c] = (t1[c] or 0) + 1\n  end\n  for\
    \ k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8v6k_r4.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp8v6k_r4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcha44v9.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdcha44v9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0gvypw3.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb0gvypw3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpguu1rp36.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpguu1rp36.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i, i)]\
    \ = true\n  end\n  for k, _ in pairs(c0) do\n    if not c1[k] then\n      return\
    \ false\n    end\n  end\n  for k, _ in pairs(c1) do\n    if not c0[k] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmt1x8vh.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppmt1x8vh.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5kr_rbl.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg5kr_rbl.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.')\
    \ do\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c]\
    \ = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if t1[c] ~= n then\n\
    \      return false\n    end\n  end\n  for c, n in pairs(t1) do\n    if t0[c]\
    \ ~= n then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1fqqdx0.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk1fqqdx0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1xhgyde.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm1xhgyde.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    t1[c] = (t1[c] or 0) + 1\n  end\n  for\
    \ k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoimr7lp.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyoimr7lp.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvw5j9hi.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbvw5j9hi.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(c0)\
    \ do\n    if c1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(c1) do\n    if c0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vozsnrq.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0vozsnrq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qoxb1dw.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2qoxb1dw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49xc9nq_.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp49xc9nq_.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, v in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, v\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i, i)]\
    \ = true\n  end\n  for k, _ in pairs(c0) do\n    if not c1[k] then\n      return\
    \ false\n    end\n  end\n  for k, _ in pairs(c1) do\n    if not c0[k] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for c, n in pairs(t0) do\n        if t1[c] ~= n then\n\
    \            return false\n        end\n    end\n    for c, n in pairs(t1) do\n\
    \        if t0[c] ~= n then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_lidq7v.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1_lidq7v.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxib2eav.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxxib2eav.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_xkea6k.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw_xkea6k.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeea62f5l.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeea62f5l.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_aiyn88.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa_aiyn88.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb86jw8rw.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb86jw8rw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fv7_lzw.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5fv7_lzw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1ueh_gu.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn1ueh_gu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh8_azjq.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprh8_azjq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        c0[c] = (c0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        c1[c] = (c1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(c1) do\n\
    \        if c0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1ujf_nn.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl1ujf_nn.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9l1240a.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx9l1240a.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr886h5kl.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr886h5kl.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxp6z0bv.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsxp6z0bv.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(c0)\
    \ do\n    if c1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(c1) do\n    if c0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcin4dv1n.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcin4dv1n.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiv8cgdq9.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiv8cgdq9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp213b_kds.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp213b_kds.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.')\
    \ do\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c]\
    \ = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if t1[c] ~= n then\n\
    \      return false\n    end\n  end\n  for c, n in pairs(t1) do\n    if t0[c]\
    \ ~= n then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0frygj_f.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0frygj_f.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88psfv6_.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp88psfv6_.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqljg8rpq.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqljg8rpq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7idp58az.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7idp58az.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15ckofmg.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp15ckofmg.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm058hk4v.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm058hk4v.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzacrlay.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkzacrlay.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrmkpwco.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplrmkpwco.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for c, n in pairs(t0) do\n        if t1[c] ~= n then\n\
    \            return false\n        end\n    end\n    for c, n in pairs(t1) do\n\
    \        if t0[c] ~= n then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmlccyems.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmlccyems.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i, i)]\
    \ = true\n  end\n  for k, _ in pairs(c0) do\n    if not c1[k] then\n      return\
    \ false\n    end\n  end\n  for k, _ in pairs(c1) do\n    if not c0[k] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet9segmd.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpet9segmd.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = count_chars(s0)\n  local c1 = count_chars(s1)\n\
    \  for k, v in pairs(c0) do\n    if c1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(c1) do\n    if c0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgoby5xy4.lua:15:\
    \ attempt to call a nil value (global 'count_chars')\nstack traceback:\n\t/tmp/tmpgoby5xy4.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpgoby5xy4.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1by08cdo.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1by08cdo.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgayt1r1.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdgayt1r1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr8h2d9r.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnr8h2d9r.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv_wazs4.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyv_wazs4.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5v72_av.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx5v72_av.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh_00500.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyh_00500.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjanafou.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprjanafou.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    t1[s1:sub(i, i)]\
    \ = true\n  end\n  for k, _ in pairs(t0) do\n    if not t1[k] then\n      return\
    \ false\n    end\n  end\n  for k, _ in pairs(t1) do\n    if not t0[k] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpns75h1fl.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpns75h1fl.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xjhwnye.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3xjhwnye.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxq5gppz.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphxq5gppz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil0lo1am.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpil0lo1am.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp695wreb3.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp695wreb3.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  c1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if\
    \ not c1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(c1) do\n        if not c0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph26aa0nz.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph26aa0nz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n\
    \    c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(c0)\
    \ do\n    if c1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(c1) do\n    if c0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jtk6muc.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5jtk6muc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    t1[c] = (t1[c] or 0) + 1\n  end\n  for\
    \ k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqxdxjyz.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsqxdxjyz.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnupm45f.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppnupm45f.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5h24p7w6.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5h24p7w6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjj0kcm77.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjj0kcm77.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptypdyq21.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptypdyq21.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe14jr133.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe14jr133.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch(\"\
    .\") do\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch(\".\") do\n\
    \    t1[c] = (t1[c] or 0) + 1\n  end\n  for k, v in pairs(t0) do\n    if t1[k]\
    \ ~= v then\n      return false\n    end\n  end\n  for k, v in pairs(t1) do\n\
    \    if t0[k] ~= v then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohqwt1so.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpohqwt1so.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    t0[c] = (t0[c] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    t1[c] = (t1[c] or 0) + 1\n  end\n  for\
    \ k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lcok7jp.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6lcok7jp.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n   \
    \     if t1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkquhq4h.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmkquhq4h.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51v2ahwu.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp51v2ahwu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0\
    \ do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n\
    \    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpb_nri8.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxpb_nri8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppwio0ui.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpppwio0ui.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        t0[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n      \
    \  t1[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(t0) do\n        if\
    \ not t1[k] then\n            return false\n        end\n    end\n    for k, _\
    \ in pairs(t1) do\n        if not t0[k] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9aisfl8.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa9aisfl8.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local chars0 = {}\n  local chars1 = {}\n  for i = 1, #s0\
    \ do\n    chars0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    chars1[s1:sub(i,\
    \ i)] = true\n  end\n  for k, _ in pairs(chars0) do\n    if not chars1[k] then\n\
    \      return false\n    end\n  end\n  for k, _ in pairs(chars1) do\n    if not\
    \ chars0[k] then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, v in pairs(t0)\
    \ do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in\
    \ pairs(t1) do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2me_7s5.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq2me_7s5.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
