---
name: HumanEval_103_rounded_avg
language: lua
prompt: "-- You are given two positive integers n and m, and your task is to compute
  the\n-- average of the integers from n through m (including n and m). \n-- Round
  the answer to the nearest integer and convert that to binary.\n-- If n is greater
  than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>> rounded_avg(7,
  5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20, 33)\n--
  '0b11010'\nlocal function rounded_avg(n, m)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = rounded_avg
      lu.assertEquals(candidate(1, 5), '0b11')
      lu.assertEquals(candidate(7, 13), '0b1010')
      lu.assertEquals(candidate(964, 977), '0b1111001010')
      lu.assertEquals(candidate(996, 997), '0b1111100100')
      lu.assertEquals(candidate(560, 851), '0b1011000010')
      lu.assertEquals(candidate(185, 546), '0b101101110')
      lu.assertEquals(candidate(362, 496), '0b110101101')
      lu.assertEquals(candidate(350, 902), '0b1001110010')
      lu.assertEquals(candidate(197, 233), '0b11010111')
      lu.assertEquals(candidate(7, 5), -1)
      lu.assertEquals(candidate(5, 1), -1)
      lu.assertEquals(candidate(5, 5), '0b101')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%x", avg)
  end
- |2-
    if n > m then
      return -1
    end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, m - n)))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    -- your code here
  end
- |2-
      if n > m then
          return -1
      end
      return string.format("0b%s", dec2bin(math.floor((n + m) / 2)))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      return string.format("0b%s", tostring(bit32.rshift(n + m, 1)))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", dec2bin(math.floor(sum / (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return '0b' .. tostring(avg)
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%b", avg)
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    return string.format("0b%s", tostring(bit32.rshift(n + m, 1)))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    -- your code here
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return '0b' .. string.format('%b', avg)
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, m - n)))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      return string.format("0b%s", tostring(bit32.rshift(sum, 1)))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", dec2bin(math.floor(sum / (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      return string.format("0b%s", tostring(bit32.rshift(n + m, 1)))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%b", math.floor(sum / (m - n + 1) + 0.5))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    if n > m then
      return -1
    end
    return '0b' .. tostring(math.floor(sum / (m - n + 1)))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tobinary(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    -- your code here
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1))
    if n > m then
      return -1
    else
      return string.format("0b%s", tostring(avg))
    end
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    -- your code here
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return '0b' .. tostring(avg)
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tobin(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", math.tointeger(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return '0b' .. tostring(avg)
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", dec2bin(math.floor(sum / (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    -- your code here
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1))
    return string.format("0b%s", string.format("%b", avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return '0b' .. string.format('%b', avg)
  end
- |2-
    if n > m then
      return -1
    end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", dec2bin(math.floor(sum / (m - n + 1))))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", dec2bin(math.floor(sum / (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1))
    if n > m then
      return -1
    else
      return string.format("0b%s", tostring(avg))
    end
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", string.reverse(string.format("%b", avg)))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", to_binary(math.floor(sum / (m - n + 1))))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, m - n)))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", dec2bin(math.floor(sum / (m - n + 1))))
  end
- |2-
    -- your code here
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1))
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", dec2bin(math.floor(sum / (m - n + 1))))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", string.format("%b", avg))
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", string.format("%b", avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%b", avg)
  end
- |2-
    -- your code here
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return '0b' .. tostring(bit32.rshift(sum, m - n))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      return string.format("0b%s", dec2bin(math.floor(sum / (m - n + 1))))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", tostring(avg))
  end
- |2-
    -- your code here
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, m - n)))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", to_binary(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1))
    if n > m then
      return -1
    else
      return '0b' .. tostring(avg)
    end
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    local avg = math.floor((n + m) / 2)
    return avg >= n and avg <= m and ('0b%b'):format(avg) or -1
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1))
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%b", avg)
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local avg = math.floor((n + m) / 2)
      return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then return -1 end
      local sum = n + m
      for i = n + 1, m - 1 do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = math.floor(sum / (m - n + 1) + 0.5)
    return '0b' .. tostring(avg)
  end
- |2-
    if n > m then return -1 end
    return string.format("0b%s", dec2bin(math.floor((n + m) / 2)))
  end
- |2-
    if n > m then return -1 end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    return string.format("0b%s", tostring(bit32.rshift(sum, (m - n + 1))))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", to_binary(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- "\tif n > m then\n\t\treturn -1\n\tend\n\tlocal sum = 0\n\tfor i = n, m do\n\t\tsum
  = sum + i\n\tend\n\tlocal avg = math.floor(sum / (m - n + 1) + 0.5)\n\treturn string.format(\"0b%s\",
  tostring(avg))\nend"
- |2-
      if n > m then
          return -1
      end
      local sum = 0
      for i = n, m do
          sum = sum + i
      end
      local avg = math.floor(sum / (m - n + 1) + 0.5)
      return string.format("0b%s", tobin(avg))
  end
- |2-
    if n > m then return -1 end
    local avg = math.floor((n + m) / 2)
    return string.format("0b%s", tostring(avg))
  end
- |2-
    if n > m then
      return -1
    end
    return string.format("0b%s", dec2bin(math.floor((n + m) / 2)))
  end
- |2-
    if n > m then
      return -1
    end
    local sum = 0
    for i = n, m do
      sum = sum + i
    end
    local avg = sum / (m - n + 1)
    local rounded = math.floor(avg + 0.5)
    return string.format("0b%s", to_binary(rounded))
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
