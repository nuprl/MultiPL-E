---
name: HumanEval_90_next_smallest
language: lua
prompt: |
  -- You are given a table of integers.
  -- Write a function next_smallest() that returns the 2nd smallest element of the table.
  -- Return None if there is no such element.
  -- >>> next_smallest({1, 2, 3, 4, 5})
  -- 2
  -- >>> next_smallest({5, 1, 4, 3, 2})
  -- 2
  -- >>> next_smallest({})
  -- None
  -- >>> next_smallest({1, 1})
  -- None
  local function next_smallest(lst)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = next_smallest
      lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)
      lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)
      lu.assertEquals(candidate({}), None)
      lu.assertEquals(candidate({1, 1}), None)
      lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)
      lu.assertEquals(candidate({1, 1}), None)
      lu.assertEquals(candidate({-35, 34, 12, -45}), -35)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min1, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min1 then
              min2 = min1
              min1 = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
      local min1, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min1 then
              min2 = min1
              min1 = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 ~= math.huge and min2 or nil
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      else
          return min2
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if min == nil or v < min then
              min2 = min
              min = v
          elseif min2 == nil or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.maxinteger, math.maxinteger
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.maxinteger and nil or min2
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min1, min2 = math.min(lst[1], lst[2]), math.max(lst[1], lst[2])
      for i = 3, #lst do
          if lst[i] < min1 then
              min2 = min1
              min1 = lst[i]
          elseif lst[i] < min2 then
              min2 = lst[i]
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min_count = 0
      for _, v in ipairs(lst) do
          if v == min then
              min_count = min_count + 1
          end
      end
      if min_count > 1 then
          return nil
      end
      local min_index = 0
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
              break
          end
      end
      table.remove(lst, min_index)
      return math.min(unpack(lst))
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min_index = table.index_of(lst, min)
      table.remove(lst, min_index)
      return math.min(unpack(lst))
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
    local min, second_min = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        second_min = min
        min = v
      elseif v < second_min then
        second_min = v
      end
    end
    return second_min ~= math.huge and second_min or nil
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
      table.sort(lst)
      for i = 1, #lst - 1 do
          if lst[i] ~= lst[i + 1] then
              return lst[i + 1]
          end
      end
      return nil
  end
- |2-
    local min, min2
    for _, v in ipairs(lst) do
      if not min or v < min then
        min2 = min
        min = v
      elseif not min2 or v < min2 then
        min2 = v
      end
    end
    return min2
  end
- |2-
      local min = lst[1]
      local min2 = nil
      for i = 2, #lst do
          if lst[i] < min then
              min2 = min
              min = lst[i]
          elseif lst[i] < min2 or min2 == nil then
              min2 = lst[i]
          end
      end
      return min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min_idx = 0
      local min_count = 0
      for i, v in ipairs(lst) do
          if v == min then
              min_count = min_count + 1
              min_idx = i
          end
      end
      if min_count > 1 then
          return nil
      end
      table.remove(lst, min_idx)
      return math.min(unpack(lst))
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local smallest, second_smallest = lst[1], lst[2]
      if smallest > second_smallest then
          smallest, second_smallest = second_smallest, smallest
      end
      for i = 3, #lst do
          if lst[i] < smallest then
              second_smallest = smallest
              smallest = lst[i]
          elseif lst[i] < second_smallest then
              second_smallest = lst[i]
          end
      end
      return second_smallest
  end
- |2-
    local min, min2
    for _, v in ipairs(lst) do
      if not min or v < min then
        min2 = min
        min = v
      elseif not min2 or v < min2 then
        min2 = v
      end
    end
    return min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min1, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min1 then
              min2 = min1
              min1 = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
    local min = math.min(unpack(lst))
    local min2 = math.max(unpack(lst))
    for _, v in ipairs(lst) do
      if v ~= min and v < min2 then
        min2 = v
      end
    end
    if min2 == math.max(unpack(lst)) then
      return nil
    else
      return min2
    end
  end
- |2-
      local min1, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min1 then
              min2 = min1
              min1 = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min = math.min(unpack(lst))
    local min2 = min
    for _, v in ipairs(lst) do
      if v > min and v < min2 then
        min2 = v
      end
    end
    if min2 == min then
      return nil
    else
      return min2
    end
  end
- |2-
    local min = math.min(unpack(lst))
    local min2 = math.max(unpack(lst))
    for _, v in ipairs(lst) do
      if v > min and v < min2 then
        min2 = v
      end
    end
    if min2 == math.max(unpack(lst)) then
      return nil
    else
      return min2
    end
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local smallest, second_smallest
      for _, v in ipairs(lst) do
          if not smallest or v < smallest then
              second_smallest = smallest
              smallest = v
          elseif not second_smallest or v < second_smallest then
              second_smallest = v
          end
      end
      return second_smallest
  end
- |2-
    local min = math.min(unpack(lst))
    local min_count = 0
    for _, v in ipairs(lst) do
      if v == min then
        min_count = min_count + 1
      end
    end
    if min_count > 1 then
      return nil
    end
    local min_index = 0
    for i, v in ipairs(lst) do
      if v == min then
        min_index = i
        break
      end
    end
    table.remove(lst, min_index)
    return math.min(unpack(lst))
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min = math.huge
    local min2 = math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      else
          return min2
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min1, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min1 then
              min2 = min1
              min1 = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.huge
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min = math.min(unpack(lst))
    local min2 = math.huge
    for _, v in ipairs(lst) do
      if v > min and v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      end
      return min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min_idx = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
              break
          end
      end
      table.remove(lst, min_idx)
      if #lst == 0 then
          return nil
      end
      return math.min(unpack(lst))
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min_count = 0
      for _, v in ipairs(lst) do
          if v == min then
              min_count = min_count + 1
          end
      end
      if min_count > 1 then
          return nil
      end
      local min_index = 0
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
              break
          end
      end
      local min_next = math.max(unpack(lst))
      for i, v in ipairs(lst) do
          if i ~= min_index and v < min_next then
              min_next = v
          end
      end
      return min_next
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local smallest = math.huge
      local next_smallest = math.huge
      for _, v in ipairs(lst) do
          if v < smallest then
              next_smallest = smallest
              smallest = v
          elseif v < next_smallest then
              next_smallest = v
          end
      end
      if next_smallest == math.huge then
          return nil
      else
          return next_smallest
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      else
          return min2
      end
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min1, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min1 then
              min2 = min1
              min1 = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min = math.min(unpack(lst))
    local min2 = min
    for _, v in ipairs(lst) do
      if v > min and v < min2 then
        min2 = v
      end
    end
    if min2 == min then
      return nil
    else
      return min2
    end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 ~= math.huge and min2 or nil
  end
- |2-
    local smallest = math.huge
    local second_smallest = math.huge
    for _, v in ipairs(lst) do
      if v < smallest then
        second_smallest = smallest
        smallest = v
      elseif v < second_smallest then
        second_smallest = v
      end
    end
    if second_smallest == math.huge then
      return nil
    else
      return second_smallest
    end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
    local min = math.min(unpack(lst))
    local min_count = 0
    for _, v in ipairs(lst) do
      if v == min then
        min_count = min_count + 1
      end
    end
    if min_count == #lst then
      return nil
    end
    local min2 = math.huge
    for _, v in ipairs(lst) do
      if v > min and v < min2 then
        min2 = v
      end
    end
    return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local smallest = math.min(unpack(lst))
      local second_smallest = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > smallest and v < second_smallest then
              second_smallest = v
          end
      end
      if second_smallest == math.max(unpack(lst)) then
          return nil
      end
      return second_smallest
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.huge
      local min2 = math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      if min2 == math.huge then
          return nil
      else
          return min2
      end
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min_count = 0
      for _, v in ipairs(lst) do
          if v == min then
              min_count = min_count + 1
          end
      end
      if min_count > 1 then
          return nil
      end
      local min_index = 0
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
              break
          end
      end
      local min_2 = math.huge
      for i, v in ipairs(lst) do
          if i ~= min_index and v < min_2 then
              min_2 = v
          end
      end
      if min_2 == math.huge then
          return nil
      end
      return min_2
  end
- |2-
    if #lst < 2 then
      return nil
    end
    local min = lst[1]
    local min2 = nil
    for i = 2, #lst do
      if lst[i] < min then
        min2 = min
        min = lst[i]
      elseif lst[i] < min2 or min2 == nil then
        min2 = lst[i]
      end
    end
    return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      else
          return min2
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local smallest, second_smallest
    for _, v in ipairs(lst) do
      if not smallest or v < smallest then
        second_smallest = smallest
        smallest = v
      elseif not second_smallest or v < second_smallest then
        second_smallest = v
      end
    end
    return second_smallest
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      else
          return min2
      end
  end
- |2-
    local min = math.min(unpack(lst))
    local min2 = math.huge
    for _, v in ipairs(lst) do
      if v > min and v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v ~= min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
    local smallest = math.huge
    local second_smallest = math.huge
    for _, v in ipairs(lst) do
      if v < smallest then
        second_smallest = smallest
        smallest = v
      elseif v < second_smallest then
        second_smallest = v
      end
    end
    if second_smallest == math.huge then
      return nil
    else
      return second_smallest
    end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min1, min2 = math.min(lst[1], lst[2]), math.max(lst[1], lst[2])
      for i = 3, #lst do
          if lst[i] < min1 then
              min2 = min1
              min1 = lst[i]
          elseif lst[i] < min2 then
              min2 = lst[i]
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 ~= math.huge and min2 or nil
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 ~= math.huge and min2 or nil
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      else
          return min2
      end
  end
- |2-
      local min = math.min(unpack(lst))
      local min_index = table.index_of(lst, min)
      table.remove(lst, min_index)
      if #lst == 0 then
          return nil
      end
      return math.min(unpack(lst))
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for i = 1, #lst do
          if lst[i] < min then
              min2 = min
              min = lst[i]
          elseif lst[i] < min2 then
              min2 = lst[i]
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 ~= math.huge and min2 or nil
  end
- |2-
      local smallest, second_smallest
      for _, v in ipairs(lst) do
          if not smallest or v < smallest then
              second_smallest = smallest
              smallest = v
          elseif not second_smallest or v < second_smallest then
              second_smallest = v
          end
      end
      return second_smallest
  end
- |2-
    if #lst < 2 then
      return nil
    end
    local min = math.min(unpack(lst))
    local min_index = 0
    for i, v in ipairs(lst) do
      if v == min then
        min_index = i
        break
      end
    end
    table.remove(lst, min_index)
    return math.min(unpack(lst))
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      else
          return min2
      end
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      else
          return min2
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min = math.min(unpack(lst))
    local min2 = min
    for _, v in ipairs(lst) do
      if v > min and v < min2 then
        min2 = v
      end
    end
    if min2 == min then
      return nil
    else
      return min2
    end
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if min == nil or v < min then
              min2 = min
              min = v
          elseif min2 == nil or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local smallest = math.huge
      local second_smallest = math.huge
      for _, v in ipairs(lst) do
          if v < smallest then
              second_smallest = smallest
              smallest = v
          elseif v < second_smallest then
              second_smallest = v
          end
      end
      if second_smallest == math.huge then
          return nil
      else
          return second_smallest
      end
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.huge
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min, min2
    for _, v in ipairs(lst) do
      if not min or v < min then
        min2 = min
        min = v
      elseif not min2 or v < min2 then
        min2 = v
      end
    end
    return min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
    local min = math.min(unpack(lst))
    local min_index = 0
    local second_min = math.max(unpack(lst))
    local second_min_index = 0
    for i, v in ipairs(lst) do
      if v == min then
        min_index = i
      end
      if v == second_min then
        second_min_index = i
      end
    end
    if min_index == second_min_index then
      return nil
    end
    return second_min
  end
- |2-
      local smallest = math.huge
      local next_smallest = math.huge
      for _, v in ipairs(lst) do
          if v < smallest then
              next_smallest = smallest
              smallest = v
          elseif v < next_smallest then
              next_smallest = v
          end
      end
      if next_smallest == math.huge then
          return nil
      else
          return next_smallest
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min1, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min1 then
        min2 = min1
        min1 = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min_count = 0
      for _, v in ipairs(lst) do
          if v == min then
              min_count = min_count + 1
          end
      end
      if min_count > 1 then
          return nil
      end
      local min_index = 0
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
              break
          end
      end
      local min_lst = {}
      for i, v in ipairs(lst) do
          if i ~= min_index then
              table.insert(min_lst, v)
          end
      end
      return math.min(unpack(min_lst))
  end
- |2-
      local min1, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min1 then
              min2 = min1
              min1 = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2
      for _, v in ipairs(lst) do
          if not min or v < min then
              min2 = min
              min = v
          elseif not min2 or v < min2 then
              min2 = v
          end
      end
      return min2
  end
- |2-
    local min = math.min(unpack(lst))
    local min_index = table.index_of(lst, min)
    table.remove(lst, min_index)
    return math.min(unpack(lst))
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      else
          return min2
      end
  end
- |2-
    local min = math.min(unpack(lst))
    local min_index = table.index_of(lst, min)
    table.remove(lst, min_index)
    return math.min(unpack(lst))
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min = math.min(unpack(lst))
      local min2 = min
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == min then
          return nil
      end
      return min2
  end
- |2-
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v ~= min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      else
          return min2
      end
  end
- |2-
    local min, min2
    for _, v in ipairs(lst) do
      if not min or v < min then
        min2 = min
        min = v
      elseif not min2 or v < min2 then
        min2 = v
      end
    end
    return min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local smallest = math.huge
      local next_smallest = math.huge
      for _, v in ipairs(lst) do
          if v < smallest then
              next_smallest = smallest
              smallest = v
          elseif v < next_smallest then
              next_smallest = v
          end
      end
      if next_smallest == math.huge then
          return nil
      else
          return next_smallest
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min = math.huge
      local second_min = math.huge
      for _, v in ipairs(lst) do
          if v < min then
              second_min = min
              min = v
          elseif v < second_min then
              second_min = v
          end
      end
      if second_min == math.huge then
          return nil
      else
          return second_min
      end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 < math.huge and min2 or nil
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 ~= math.huge and min2 or nil
  end
- |2-
      local min = math.min(unpack(lst))
      local min_count = 0
      for _, v in ipairs(lst) do
          if v == min then
              min_count = min_count + 1
          end
      end
      if min_count > 1 then
          return nil
      end
      local min_index = 0
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
              break
          end
      end
      table.remove(lst, min_index)
      return math.min(unpack(lst))
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 < math.huge and min2 or nil
  end
- |2-
      if #lst < 2 then
          return nil
      end
      local min = math.min(unpack(lst))
      local min2 = math.max(unpack(lst))
      for _, v in ipairs(lst) do
          if v > min and v < min2 then
              min2 = v
          end
      end
      if min2 == math.max(unpack(lst)) then
          return nil
      end
      return min2
  end
- |2-
    local min, min2 = math.huge, math.huge
    for _, v in ipairs(lst) do
      if v < min then
        min2 = min
        min = v
      elseif v < min2 then
        min2 = v
      end
    end
    return min2 == math.huge and nil or min2
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
- |2-
    local min = math.min(unpack(lst))
    local min2 = min
    for _, v in ipairs(lst) do
      if v > min and v < min2 then
        min2 = v
      end
    end
    if min2 == min then
      return nil
    else
      return min2
    end
  end
- |2-
      local min, min2 = math.huge, math.huge
      for _, v in ipairs(lst) do
          if v < min then
              min2 = min
              min = v
          elseif v < min2 then
              min2 = v
          end
      end
      return min2 == math.huge and nil or min2
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
