---
name: HumanEval_20_find_closest_elements
language: lua
prompt: |
  -- From a supplied table of numbers (of length at least two) select and return two that are the closest to each
  -- other and return them in order (smaller number, larger number).
  -- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})
  -- {2.0, 2.2}
  -- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})
  -- {2.0, 2.0}
  local function find_closest_elements(numbers)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = find_closest_elements
      lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})
      lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})
      lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})
      lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})
      lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_distance = math.huge
      local min_distance_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < min_distance then
                  min_distance = distance
                  min_distance_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_distance_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < smallest_difference then
              smallest_difference = difference
              closest_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < smallest_difference then
              smallest_difference = difference
              closest_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      local diff = numbers[i + 1] - numbers[i]
      if diff < min_diff then
        min_diff = diff
        min_diff_elements = {numbers[i], numbers[i + 1]}
      end
    end
    return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_pair = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_pair = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_pair
  end
- |2-
    local smallest_difference = math.huge
    local closest_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          closest_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return closest_elements
  end
- |2-
      local closest_difference = math.huge
      local closest_elements = {}
      for i = 1, #numbers - 1 do
          local difference = math.abs(numbers[i] - numbers[i + 1])
          if difference < closest_difference then
              closest_difference = difference
              closest_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local closest_diff = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < closest_diff then
                  closest_diff = diff
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local closest_distance = math.huge
      local closest_elements = {}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_diff = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < smallest_diff then
                  smallest_diff = diff
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < smallest_difference then
              smallest_difference = difference
              smallest_difference_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return smallest_difference_elements
  end
- |2-
      local min_delta = math.huge
      local min_delta_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local delta = numbers[i + 1] - numbers[i]
          if delta < min_delta then
              min_delta = delta
              min_delta_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_delta_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = math.abs(numbers[i] - numbers[i + 1])
          if diff < min_diff then
              min_diff = diff
              min_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_elements
  end
- |2-
      local closest_distance = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- "\tlocal closest_elements = {numbers[1], numbers[2]}\n\tlocal closest_distance =
  math.abs(numbers[1] - numbers[2])\n\tfor i = 1, #numbers do\n\t\tfor j = i + 1,
  #numbers do\n\t\t\tlocal distance = math.abs(numbers[i] - numbers[j])\n\t\t\tif
  distance < closest_distance then\n\t\t\t\tclosest_elements = {numbers[i], numbers[j]}\n\t\t\t\tclosest_distance
  = distance\n\t\t\tend\n\t\tend\n\tend\n\treturn closest_elements\nend"
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local min_diff = math.huge
    local min_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_elements
  end
- |2-
    local smallest_difference = math.huge
    local closest_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          closest_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return closest_elements
  end
- |2-
      local closest_distance = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      local diff = numbers[i + 1] - numbers[i]
      if diff < min_diff then
        min_diff = diff
        min_diff_elements = {numbers[i], numbers[i + 1]}
      end
    end
    return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_diff_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_diff_elements
  end
- |2-
    local smallest_difference = math.huge
    local smallest_difference_numbers = {math.huge, math.huge}
    for i = 1, #numbers - 1 do
      local difference = numbers[i + 1] - numbers[i]
      if difference < smallest_difference then
        smallest_difference = difference
        smallest_difference_numbers = {numbers[i], numbers[i + 1]}
      end
    end
    return smallest_difference_numbers
  end
- |2-
    local smallest_difference = math.huge
    local closest_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          closest_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {math.huge, math.huge}
      for i = 1, #numbers - 1 do
          local diff = math.abs(numbers[i] - numbers[i + 1])
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      local diff = numbers[i + 1] - numbers[i]
      if diff < min_diff then
        min_diff = diff
        min_diff_elements = {numbers[i], numbers[i + 1]}
      end
    end
    return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {nil, nil}
      for i = 1, #numbers - 1 do
          local first_number = numbers[i]
          for j = i + 1, #numbers do
              local second_number = numbers[j]
              local difference = math.abs(first_number - second_number)
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {first_number, second_number}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
    local smallest_difference = math.huge
    local smallest_difference_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      local difference = numbers[i + 1] - numbers[i]
      if difference < smallest_difference then
        smallest_difference = difference
        smallest_difference_elements = {numbers[i], numbers[i + 1]}
      end
    end
    return smallest_difference_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < smallest_difference then
              smallest_difference = difference
              closest_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_a = nil
      local min_b = nil
      for i = 1, #numbers - 1 do
          local a = numbers[i]
          local b = numbers[i + 1]
          local diff = math.abs(a - b)
          if diff < min_diff then
              min_diff = diff
              min_a = a
              min_b = b
          end
      end
      return {min_a, min_b}
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      assert(#numbers >= 2)
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
      local min_diff = math.huge
      local min_a, min_b
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_a, min_b = numbers[i], numbers[j]
              end
          end
      end
      return min_a, min_b
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {math.huge, math.huge}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local closest_distance = math.huge
      local closest_elements = {math.huge, math.huge}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {math.huge, math.huge}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_diff_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- "\tlocal closest_elements = {numbers[1], numbers[2]}\n\tlocal closest_distance =
  math.abs(numbers[1] - numbers[2])\n\tfor i = 1, #numbers do\n\t\tfor j = i + 1,
  #numbers do\n\t\t\tlocal distance = math.abs(numbers[i] - numbers[j])\n\t\t\tif
  distance < closest_distance then\n\t\t\t\tclosest_elements = {numbers[i], numbers[j]}\n\t\t\t\tclosest_distance
  = distance\n\t\t\tend\n\t\tend\n\tend\n\treturn closest_elements\nend"
- |2-
      local min_distance = math.huge
      local min_distance_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local distance = numbers[i + 1] - numbers[i]
          if distance < min_distance then
              min_distance = distance
              min_distance_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_distance_elements
  end
- |2-
      local closest_diff = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < closest_diff then
                  closest_diff = diff
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {math.huge, math.huge}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      assert(#numbers >= 2)
      local min_diff = math.huge
      local min_diff_elements = {}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_diff_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local min_diff = math.huge
    local min_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local smallest_difference = math.huge
    local smallest_difference_elements = {math.huge, math.huge}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          smallest_difference_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return smallest_difference_elements
  end
- |2-
    local smallest_diff = math.huge
    local closest_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < smallest_diff then
          smallest_diff = diff
          closest_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local best_diff = math.huge
      local best_pair = {}
      for i = 1, #numbers - 1 do
          local diff = math.abs(numbers[i] - numbers[i + 1])
          if diff < best_diff then
              best_diff = diff
              best_pair = {numbers[i], numbers[i + 1]}
          end
      end
      return best_pair
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local closest_diff = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < closest_diff then
                  closest_diff = diff
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local closest_elements = {numbers[1], numbers[2]}
    local closest_distance = math.abs(numbers[1] - numbers[2])
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local distance = math.abs(numbers[i] - numbers[j])
        if distance < closest_distance then
          closest_distance = distance
          closest_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return closest_elements
  end
- "\tlocal smallest_difference = math.huge\n\tlocal smallest_difference_elements =
  {numbers[1], numbers[2]}\n\tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers
  do\n\t\t\tlocal difference = math.abs(numbers[i] - numbers[j])\n\t\t\tif difference
  < smallest_difference then\n\t\t\t\tsmallest_difference = difference\n\t\t\t\tsmallest_difference_elements
  = {numbers[i], numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn smallest_difference_elements\nend"
- |2-
      local smallest_diff = math.huge
      local smallest_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < smallest_diff then
              smallest_diff = diff
              smallest_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return smallest_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {0, 0}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- "\tlocal smallest_difference = math.huge\n\tlocal smallest_difference_elements =
  {numbers[1], numbers[2]}\n\tfor i = 1, #numbers - 1 do\n\t\tfor j = i + 1, #numbers
  do\n\t\t\tlocal difference = math.abs(numbers[i] - numbers[j])\n\t\t\tif difference
  < smallest_difference then\n\t\t\t\tsmallest_difference = difference\n\t\t\t\tsmallest_difference_elements
  = {numbers[i], numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn smallest_difference_elements\nend"
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
    assert(#numbers >= 2)
    local smallest_difference = math.huge
    local closest_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      local difference = math.abs(numbers[i] - numbers[i + 1])
      if difference < smallest_difference then
        smallest_difference = difference
        closest_elements = {numbers[i], numbers[i + 1]}
      end
    end
    return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local min_distance = math.huge
    local min_index = 1
    for i = 2, #numbers do
      local distance = numbers[i] - numbers[i - 1]
      if distance < min_distance then
        min_distance = distance
        min_index = i
      end
    end
    return numbers[min_index - 1], numbers[min_index]
  end
- |2-
      local min_distance = math.huge
      local min_distance_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local distance = numbers[i + 1] - numbers[i]
          if distance < min_distance then
              min_distance = distance
              min_distance_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_distance_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
      local closest_pair = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_pair = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_pair
  end
- |2-
      local closest_pair = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_pair = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_pair
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_diff_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < smallest_difference then
              smallest_difference = difference
              closest_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {0, 0}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
    local min_diff = math.huge
    local min_a, min_b
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local a, b = numbers[i], numbers[j]
        local diff = math.abs(a - b)
        if diff < min_diff then
          min_diff = diff
          min_a, min_b = a, b
        end
      end
    end
    return min_a, min_b
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_diff_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_pair = {math.huge, math.huge}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_pair = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_pair
  end
- |2-
      local min_distance = math.huge
      local min_index_1 = 1
      local min_index_2 = 2
      for i = 1, #numbers - 1 do
          local distance = math.abs(numbers[i] - numbers[i + 1])
          if distance < min_distance then
              min_distance = distance
              min_index_1 = i
              min_index_2 = i + 1
          end
      end
      return numbers[min_index_1], numbers[min_index_2]
  end
- |2-
      local smallest_diff = math.huge
      local smallest_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < smallest_diff then
                  smallest_diff = diff
                  smallest_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_diff_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- "\tlocal smallest_difference = math.huge\n\tlocal closest_elements = {}\n\tfor i
  = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal difference = math.abs(numbers[i]
  - numbers[j])\n\t\t\tif difference < smallest_difference then\n\t\t\t\tsmallest_difference
  = difference\n\t\t\t\tclosest_elements = {numbers[i], numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn
  closest_elements\nend"
- |2-
      local closest_distance = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_diff_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_pair = {0, 0}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_pair = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_pair
  end
- |2-
      local min_difference = math.huge
      local min_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < min_difference then
              min_difference = difference
              min_difference_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_difference_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {0, 0}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_a, min_b
      for i = 1, #numbers - 1 do
          local a = numbers[i]
          local b = numbers[i + 1]
          local diff = math.abs(a - b)
          if diff < min_diff then
              min_diff = diff
              min_a = a
              min_b = b
          end
      end
      return {min_a, min_b}
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local smallest_difference = math.huge
    local smallest_difference_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          smallest_difference_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return smallest_difference_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_diff_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_diff_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- "\tlocal min_difference = math.huge\n\tlocal closest_elements = {numbers[1], numbers[2]}\n\tfor
  i = 1, #numbers - 1 do\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal difference =
  math.abs(numbers[i] - numbers[j])\n\t\t\tif difference < min_difference then\n\t\t\t\tmin_difference
  = difference\n\t\t\t\tclosest_elements = {numbers[i], numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn
  closest_elements\nend"
- |2-
      local min_diff = math.huge
      local min_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local smallest_difference = math.huge
    local smallest_difference_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          smallest_difference_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return smallest_difference_elements
  end
- |2-
    local closest_pair = {numbers[1], numbers[2]}
    local closest_distance = math.abs(numbers[1] - numbers[2])
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local distance = math.abs(numbers[i] - numbers[j])
        if distance < closest_distance then
          closest_pair = {numbers[i], numbers[j]}
          closest_distance = distance
        end
      end
    end
    return closest_pair
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      local diff = numbers[i + 1] - numbers[i]
      if diff < min_diff then
        min_diff = diff
        min_diff_elements = {numbers[i], numbers[i + 1]}
      end
    end
    return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < smallest_difference then
              smallest_difference = difference
              closest_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return closest_elements
  end
- |2-
      local min_difference = math.huge
      local min_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < min_difference then
                  min_difference = difference
                  min_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_difference_elements
  end
- |2-
    local smallest_difference = math.huge
    local closest_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          closest_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {0, 0}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
    local smallest_difference = math.huge
    local smallest_difference_elements = {0, 0}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          smallest_difference_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return smallest_difference_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_pair = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_pair = {numbers[i], numbers[j]}
              end
          end
      end
      return min_pair
  end
- "\tlocal closest_distance = math.huge\n\tlocal closest_elements = {numbers[1], numbers[2]}\n\tfor
  i = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal distance = math.abs(numbers[i]
  - numbers[j])\n\t\t\tif distance < closest_distance then\n\t\t\t\tclosest_distance
  = distance\n\t\t\t\tclosest_elements = {numbers[i], numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn
  closest_elements\nend"
- |2-
      local min_distance = math.huge
      local min_distance_elements = {}
      for i = 1, #numbers - 1 do
          local distance = numbers[i + 1] - numbers[i]
          if distance < min_distance then
              min_distance = distance
              min_distance_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_distance_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  smallest_difference_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return smallest_difference_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_pair = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = math.abs(numbers[i] - numbers[i + 1])
          if diff < min_diff then
              min_diff = diff
              min_diff_pair = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_pair
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < smallest_difference then
              smallest_difference = difference
              closest_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < smallest_difference then
              smallest_difference = difference
              closest_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_numbers = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_numbers = {numbers[i], numbers[j]}
              end
          end
      end
      return min_numbers
  end
- "\tlocal min_diff = math.huge\n\tlocal min_diff_elements = {numbers[1], numbers[2]}\n\tfor
  i = 1, #numbers - 1 do\n\t\tlocal diff = math.abs(numbers[i] - numbers[i + 1])\n\t\tif
  diff < min_diff then\n\t\t\tmin_diff = diff\n\t\t\tmin_diff_elements = {numbers[i],
  numbers[i + 1]}\n\t\tend\n\tend\n\treturn min_diff_elements\nend"
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
    local smallest_difference = math.huge
    local smallest_difference_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          smallest_difference_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return smallest_difference_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {0, 0}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_diff_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_diff_elements
  end
- |2-
    local closest_distance = math.huge
    local closest_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      for j = i + 1, #numbers do
        local distance = math.abs(numbers[i] - numbers[j])
        if distance < closest_distance then
          closest_distance = distance
          closest_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return closest_elements
  end
- |2-
      local smallest_difference = math.huge
      local smallest_difference_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local difference = numbers[i + 1] - numbers[i]
          if difference < smallest_difference then
              smallest_difference = difference
              smallest_difference_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return smallest_difference_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local min_diff = math.huge
    local min_diff_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local diff = math.abs(numbers[i] - numbers[j])
        if diff < min_diff then
          min_diff = diff
          min_diff_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {0, 0}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
- |2-
    local min_diff = math.huge
    local min_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      local diff = numbers[i + 1] - numbers[i]
      if diff < min_diff then
        min_diff = diff
        min_elements = {numbers[i], numbers[i + 1]}
      end
    end
    return min_elements
  end
- |2-
      local min_diff = math.huge
      local min_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_elements
  end
- |2-
    local closest_diff = math.huge
    local closest_pair = {numbers[1], numbers[2]}
    for i = 1, #numbers - 1 do
      local diff = math.abs(numbers[i] - numbers[i + 1])
      if diff < closest_diff then
        closest_diff = diff
        closest_pair = {numbers[i], numbers[i + 1]}
      end
    end
    return closest_pair
  end
- |2-
      local closest_distance = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_numbers = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_numbers = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_numbers
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
      local smallest_difference = math.huge
      local closest_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          for j = i + 1, #numbers do
              local difference = math.abs(numbers[i] - numbers[j])
              if difference < smallest_difference then
                  smallest_difference = difference
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local closest_elements = {numbers[1], numbers[2]}
      local closest_distance = math.abs(numbers[1] - numbers[2])
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local distance = math.abs(numbers[i] - numbers[j])
              if distance < closest_distance then
                  closest_distance = distance
                  closest_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {}
      for i = 1, #numbers do
          for j = i + 1, #numbers do
              local diff = math.abs(numbers[i] - numbers[j])
              if diff < min_diff then
                  min_diff = diff
                  min_diff_elements = {numbers[i], numbers[j]}
              end
          end
      end
      return min_diff_elements
  end
- |2-
    local smallest_difference = math.huge
    local closest_elements = {numbers[1], numbers[2]}
    for i = 1, #numbers do
      for j = i + 1, #numbers do
        local difference = math.abs(numbers[i] - numbers[j])
        if difference < smallest_difference then
          smallest_difference = difference
          closest_elements = {numbers[i], numbers[j]}
        end
      end
    end
    return closest_elements
  end
- |2-
      local min_diff = math.huge
      local min_diff_elements = {numbers[1], numbers[2]}
      for i = 1, #numbers - 1 do
          local diff = numbers[i + 1] - numbers[i]
          if diff < min_diff then
              min_diff = diff
              min_diff_elements = {numbers[i], numbers[i + 1]}
          end
      end
      return min_diff_elements
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
