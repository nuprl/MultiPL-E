---
name: HumanEval_148_bf
language: lua
prompt: "-- There are eight planets in our solar system: the closerst to the Sun \n--
  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n-- Uranus,
  Neptune.\n-- Write a function that takes two planet names as strings planet1 and
  planet2. \n-- The function should return a table containing all planets whose orbits
  are \n-- located between the orbit of planet1 and the orbit of planet2, sorted by
  \n-- the proximity to the sun. \n-- The function should return an empty table if
  planet1 or planet2\n-- are not correct planet names. \n-- Examples\n-- >>> bf('Jupiter',
  'Neptune')\n-- {'Saturn', 'Uranus'}\n-- >>> bf('Earth', 'Mercury')\n-- 'Venus'\n--
  >>> bf('Mercury', 'Uranus')\n-- {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal
  function bf(planet1, planet2)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = bf
      lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})
      lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})
      lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})
      lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})
      lu.assertEquals(candidate('Earth', 'Earth'), {})
      lu.assertEquals(candidate('Mars', 'Earth'), {})
      lu.assertEquals(candidate('Jupiter', 'Makemake'), {})
  end

  os.exit(lu.LuaUnit.run())
completions:
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v ==
  planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tif p1 < p2 then\n\t\tfor
  i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\telse\n\t\tfor
  i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\tend\n\treturn
  res\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local i1, i2
      for i, v in ipairs(planets) do
          if v == planet1 then
              i1 = i
          end
          if v == planet2 then
              i2 = i
          end
      end
      if i1 == nil or i2 == nil then
          return {}
      end
      local res = {}
      if i1 < i2 then
          for i = i1 + 1, i2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = i2 + 1, i1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1 = 0
    local p2 = 0
    local result = {}
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    if p1 > p2 then
      for i = p2, p1 do
        table.insert(result, planets[i])
      end
    else
      for i = p1, p2 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1 = nil
    local p2 = nil
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == nil or p2 == nil then
      return {}
    end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local res = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(res, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
      if not p1 or not p2 then return {} end
      local res = {}
      for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i = 1, #planets do
          if planets[i] == planet1 then
              p1 = i
          end
          if planets[i] == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local index1, index2 = 0, 0
    for i, planet in ipairs(planets) do
      if planet == planet1 then
        index1 = i
      end
      if planet == planet2 then
        index2 = i
      end
    end
    if index1 == 0 or index2 == 0 then
      return {}
    end
    local result = {}
    if index1 < index2 then
      for i = index1 + 1, index2 - 1 do
        table.insert(result, planets[i])
      end
    else
      for i = index2 + 1, index1 - 1 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, p in ipairs(planets) do
      if p == planet1 then p1 = i end
      if p == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    local res = {}
    if p1 < p2 then
      for i = p1+1, p2-1 do
        table.insert(res, planets[i])
      end
    else
      for i = p1-1, p2+1, -1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v ==
  planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tlocal result = {}\n\tif p1 < p2
  then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\telse\n\t\tfor
  i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\tend\n\treturn
  result\nend"
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal r = {}\n\tfor i, v in ipairs(planets)
  do\n\t\tif v == planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\tend\n\tif
  p1 == 0 or p2 == 0 then return {} end\n\tif p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor
  i = p1 + 1, p2 - 1 do\n\t\ttable.insert(r, planets[i])\n\tend\n\treturn r\nend"
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v ==
  planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tif p1 < p2 then\n\t\tfor
  i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\telse\n\t\tfor
  i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\tend\n\treturn
  res\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              p1 = i
          end
          if planet == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local result = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(result, planets[i])
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local planet1_index = 0
      local planet2_index = 0
      local result = {}
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              planet1_index = i
          end
          if planet == planet2 then
              planet2_index = i
          end
      end
      if planet1_index == 0 or planet2_index == 0 then
          return result
      end
      if planet1_index < planet2_index then
          for i = planet1_index + 1, planet2_index - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = planet2_index + 1, planet1_index - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local res = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = planets[planet1], planets[planet2]
    if not p1 or not p2 then return {} end
    local t = {}
    for i = p1, p2 do
      table.insert(t, planets[i])
    end
    return t
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, p in ipairs(planets) do
          if p == planet1 then
              p1 = i
          end
          if p == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal result = {}\n\tfor i, v in ipairs(planets)
  do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2
  = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tif p1
  > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(result,
  planets[i])\n\tend\n\treturn result\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    local result = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(result, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local t = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(t, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(t, planets[i])
          end
      end
      return t
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, planet in ipairs(planets) do
      if planet == planet1 then
        p1 = i
      end
      if planet == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
      if not p1 or not p2 then return {} end
      local res = {}
      for i = p1, p2 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i = 1, #planets do
      if planets[i] == planet1 then
        p1 = i
      end
      if planets[i] == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        res[#res + 1] = planets[i]
      end
    else
      for i = p2 + 1, p1 - 1 do
        res[#res + 1] = planets[i]
      end
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              p1 = i
          end
          if planet == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
      if not p1 or not p2 then return {} end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)
      if p1 == nil or p2 == nil then return {} end
      if p1 > p2 then p1, p2 = p2, p1 end
      return table.slice(planets, p1 + 1, p2)
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal result = {}\n\tfor i, v in ipairs(planets)
  do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2
  = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tif p1
  > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(result,
  planets[i])\n\tend\n\treturn result\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, p in ipairs(planets) do
          if p == planet1 then
              p1 = i
          end
          if p == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1 = 0
    local p2 = 0
    local result = {}
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    if p1 > p2 then
      for i = p2, p1 do
        table.insert(result, planets[i])
      end
    else
      for i = p1, p2 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then
      p1, p2 = p2, p1
    end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local res = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(res, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local index1 = 0
      local index2 = 0
      local result = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              index1 = i
          end
          if v == planet2 then
              index2 = i
          end
      end
      if index1 == 0 or index2 == 0 then
          return {}
      end
      if index1 < index2 then
          for i = index1 + 1, index2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = index2 + 1, index1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then
      p1, p2 = p2, p1
    end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, planet in ipairs(planets) do
      if planet == planet1 then p1 = i end
      if planet == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then p1, p2 = p2, p1 end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1 = 0
    local p2 = 0
    local result = {}
    for i, planet in ipairs(planets) do
      if planet == planet1 then
        p1 = i
      end
      if planet == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    if p1 > p2 then
      for i = p2, p1 do
        table.insert(result, planets[i])
      end
    else
      for i = p1, p2 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
    if not p1 or not p2 then return {} end
    local res = {}
    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local planet1_pos, planet2_pos
      local result = {}
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              planet1_pos = i
          end
          if planet == planet2 then
              planet2_pos = i
          end
      end
      if planet1_pos == nil or planet2_pos == nil then
          return {}
      end
      if planet1_pos < planet2_pos then
          for i = planet1_pos + 1, planet2_pos - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = planet2_pos + 1, planet1_pos - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then p1 = i end
          if v == planet2 then p2 = i end
      end
      if p1 == 0 or p2 == 0 then return {} end
      local result = {}
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(result, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2
      local result = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == nil or p2 == nil then
          return {}
      end
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(result, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2
      for i = 1, #planets do
          if planets[i] == planet1 then
              p1 = i
          end
          if planets[i] == planet2 then
              p2 = i
          end
      end
      if not p1 or not p2 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == nil or p2 == nil then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then p1 = i end
          if v == planet2 then p2 = i end
      end
      if p1 == 0 or p2 == 0 then return {} end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then p1 = i end
          if v == planet2 then p2 = i end
      end
      if p1 == 0 or p2 == 0 then return {} end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local result = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return result
      end
      if p1 > p2 then
          local temp = p1
          p1 = p2
          p2 = temp
      end
      for i = p1 + 1, p2 - 1 do
          table.insert(result, planets[i])
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)
      if p1 == nil or p2 == nil then return {} end
      if p1 > p2 then p1, p2 = p2, p1 end
      return table.slice(planets, p1 + 1, p2)
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then p1, p2 = p2, p1 end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local i1, i2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              i1 = i
          end
          if v == planet2 then
              i2 = i
          end
      end
      if i1 == 0 or i2 == 0 then
          return {}
      end
      local result = {}
      if i1 < i2 then
          for i = i1 + 1, i2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = i2 + 1, i1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i = 1, #planets do
      if planets[i] == planet1 then
        p1 = i
      end
      if planets[i] == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    if p1 > p2 then
      p1, p2 = p2, p1
    end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      res[#res + 1] = planets[i]
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == nil or p2 == nil then
      return {}
    end
    local result = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(result, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1 = 0\n\tlocal p2 = 0\n\tlocal res = {}\n\tfor i = 1, #planets
  do\n\t\tif planets[i] == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif planets[i]
  == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn
  res\n\tend\n\tif p1 > p2 then\n\t\tlocal temp = p1\n\t\tp1 = p2\n\t\tp2 = temp\n\tend\n\tfor
  i = p1 + 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn res\nend"
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal planet1_index = 0\n\tlocal planet2_index = 0\n\tlocal result
  = {}\n\tfor i, planet in ipairs(planets) do\n\t\tif planet == planet1 then\n\t\t\tplanet1_index
  = i\n\t\tend\n\t\tif planet == planet2 then\n\t\t\tplanet2_index = i\n\t\tend\n\tend\n\tif
  planet1_index == 0 or planet2_index == 0 then\n\t\treturn {}\n\tend\n\tif planet1_index
  > planet2_index then\n\t\tfor i = planet2_index + 1, planet1_index - 1 do\n\t\t\ttable.insert(result,
  planets[i])\n\t\tend\n\telse\n\t\tfor i = planet1_index + 1, planet2_index - 1 do\n\t\t\ttable.insert(result,
  planets[i])\n\t\tend\n\tend\n\treturn result\nend"
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, planet in ipairs(planets) do
      if planet == planet1 then p1 = i end
      if planet == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then p1, p2 = p2, p1 end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, planet in ipairs(planets) do\n\t\tif
  planet == planet1 then p1 = i end\n\t\tif planet == planet2 then p2 = i end\n\tend\n\tif
  p1 == 0 or p2 == 0 then return {} end\n\tlocal res = {}\n\tif p1 < p2 then\n\t\tfor
  i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\telse\n\t\tfor
  i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\tend\n\treturn
  res\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)
    if p1 and p2 then
      local t = {}
      if p1 < p2 then
        for i = p1 + 1, p2 - 1 do
          table.insert(t, planets[i])
        end
      else
        for i = p1 - 1, p2 + 1, -1 do
          table.insert(t, planets[i])
        end
      end
      return t
    end
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == nil or p2 == nil then
      return {}
    end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i = 1, #planets do\n\t\tif planets[i] ==
  planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif planets[i] == planet2 then\n\t\t\tp2
  = i\n\t\tend\n\tend\n\tlocal res = {}\n\tif p1 == 0 or p2 == 0 then\n\t\treturn
  res\n\tend\n\tif p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor i = p1 + 1, p2
  - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn res\nend"
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    local t = {}
    if p1 < p2 then
      for i = p1, p2 do
        table.insert(t, planets[i])
      end
    else
      for i = p1, p2, -1 do
        table.insert(t, planets[i])
      end
    end
    return t
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2\n\tfor i, v in ipairs(planets) do\n\t\tif v == planet1
  then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  not p1 or not p2 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tfor i = math.min(p1,
  p2) + 1, math.max(p1, p2) - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn
  res\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)
      if p1 and p2 then
          local t = {}
          if p1 < p2 then
              for i = p1 + 1, p2 - 1 do
                  table.insert(t, planets[i])
              end
          else
              for i = p1 - 1, p2 + 1, -1 do
                  table.insert(t, planets[i])
              end
          end
          return t
      end
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local res = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(res, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then
      p1, p2 = p2, p1
    end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == nil or p2 == nil then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\tif
  not p1 or not p2 then return {} end\n\tlocal res = {}\n\tfor i = math.min(p1, p2)
  + 1, math.max(p1, p2) - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn
  res\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local result = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(result, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local planet1_index = 0
      local planet2_index = 0
      local result = {}
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              planet1_index = i
          end
          if planet == planet2 then
              planet2_index = i
          end
      end
      if planet1_index == 0 or planet2_index == 0 then
          return {}
      end
      if planet1_index < planet2_index then
          for i = planet1_index + 1, planet2_index - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = planet2_index + 1, planet1_index - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)
      if p1 == nil or p2 == nil then return {} end
      if p1 > p2 then p1, p2 = p2, p1 end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then p1 = i end
          if v == planet2 then p2 = i end
      end
      if p1 == 0 or p2 == 0 then return {} end
      if p1 > p2 then
          local tmp = p1
          p1 = p2
          p2 = tmp
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = table.find(planets, planet1)
      local p2 = table.find(planets, planet2)
      if p1 == nil or p2 == nil then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local planet1_index = 0
      local planet2_index = 0
      local result = {}
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              planet1_index = i
          end
          if planet == planet2 then
              planet2_index = i
          end
      end
      if planet1_index == 0 or planet2_index == 0 then
          return result
      end
      if planet1_index > planet2_index then
          for i = planet2_index, planet1_index do
              table.insert(result, planets[i])
          end
      else
          for i = planet1_index, planet2_index do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i = 1, #planets do
          if planets[i] == planet1 then
              p1 = i
          end
          if planets[i] == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local t = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(t, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(t, planets[i])
          end
      end
      return t
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 > p2 then
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2\n\tfor i, v in ipairs(planets) do\n\t\tif v == planet1
  then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  not p1 or not p2 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tfor i = math.min(p1,
  p2) + 1, math.max(p1, p2) - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn
  res\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    local t = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(t, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(t, planets[i])
      end
    end
    return t
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)
    if p1 == nil or p2 == nil then return {} end
    if p1 > p2 then p1, p2 = p2, p1 end
    local result = {}
    for i = p1+1, p2-1 do
      table.insert(result, planets[i])
    end
    return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2
      for i, p in ipairs(planets) do
          if p == planet1 then
              p1 = i
          end
          if p == planet2 then
              p2 = i
          end
      end
      if not p1 or not p2 then
          return {}
      end
      local t = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(t, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(t, planets[i])
          end
      end
      return t
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local index1 = 0
    local index2 = 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        index1 = i
      end
      if v == planet2 then
        index2 = i
      end
    end
    if index1 == 0 or index2 == 0 then
      return {}
    end
    local result = {}
    if index1 < index2 then
      for i = index1 + 1, index2 - 1 do
        table.insert(result, planets[i])
      end
    else
      for i = index2 + 1, index1 - 1 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2
      for i, p in ipairs(planets) do
          if p == planet1 then
              p1 = i
          end
          if p == planet2 then
              p2 = i
          end
      end
      if p1 == nil or p2 == nil then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
    if not p1 or not p2 then return {} end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p1 - 1, p2 + 1, -1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
    if not p1 or not p2 then return {} end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p1 - 1, p2 + 1, -1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1 = nil
    local p2 = nil
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == nil or p2 == nil then
      return {}
    end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    local res = {}
    for i = p1, p2 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v ==
  planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\tend\n\tif p1 ==
  0 or p2 == 0 then return {} end\n\tlocal res = {}\n\tif p1 < p2 then\n\t\tfor i
  = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\telse\n\t\tfor
  i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\tend\n\treturn
  res\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local pos1, pos2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              pos1 = i
          end
          if v == planet2 then
              pos2 = i
          end
      end
      if pos1 == 0 or pos2 == 0 then
          return {}
      end
      if pos1 > pos2 then
          pos1, pos2 = pos2, pos1
      end
      local res = {}
      for i = pos1 + 1, pos2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
    if p1 and p2 then
      local t = {}
      if p1 < p2 then
        for i = p1 + 1, p2 - 1 do
          table.insert(t, planets[i])
        end
      else
        for i = p1 - 1, p2 + 1, -1 do
          table.insert(t, planets[i])
        end
      end
      return t
    end
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = table.indexof(planets, planet1)
      local p2 = table.indexof(planets, planet2)
      if p1 == nil or p2 == nil then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 do
              table.insert(result, planets[i])
          end
      else
          for i = p1 - 1, p2, -1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if planet1 == v then
              p1 = i
          end
          if planet2 == v then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then p1 = i end
          if v == planet2 then p2 = i end
      end
      if p1 == 0 or p2 == 0 then return {} end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v ==
  planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tlocal
  res = {}\n\tif p1 == 0 or p2 == 0 then\n\t\treturn res\n\tend\n\tif p1 > p2 then\n\t\tp1,
  p2 = p2, p1\n\tend\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn
  res\nend"
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then p1, p2 = p2, p1 end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local index1 = 0
      local index2 = 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              index1 = i
          end
          if v == planet2 then
              index2 = i
          end
      end
      if index1 == 0 or index2 == 0 then
          return {}
      end
      if index1 > index2 then
          local temp = index1
          index1 = index2
          index2 = temp
      end
      local result = {}
      for i = index1 + 1, index2 - 1 do
          table.insert(result, planets[i])
      end
      return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == nil or p2 == nil then
      return {}
    end
    local res = {}
    if p1 > p2 then
      for i = p2, p1 do
        table.insert(res, planets[i])
      end
    else
      for i = p1, p2 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local pos1, pos2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              pos1 = i
          end
          if v == planet2 then
              pos2 = i
          end
      end
      if pos1 == 0 or pos2 == 0 then
          return {}
      end
      if pos1 > pos2 then
          pos1, pos2 = pos2, pos1
      end
      local res = {}
      for i = pos1 + 1, pos2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v ==
  planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tfor i = math.min(p1,
  p2) + 1, math.max(p1, p2) - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn
  res\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local result = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(result, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2\n\tlocal result = {}\n\tfor i, v in ipairs(planets) do\n\t\tif
  v == planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\tend\n\tif p1
  and p2 then\n\t\tif p1 < p2 then\n\t\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\t\ttable.insert(result,
  planets[i])\n\t\t\tend\n\t\telse\n\t\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\t\ttable.insert(result,
  planets[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      -- your code here
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal result = {}\n\tfor i = 1, #planets do\n\t\tif
  planets[i] == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif planets[i] == planet2
  then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn result\n\tend\n\tif
  p1 < p2 then\n\t\tfor i = p1 + 1, p2 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\telse\n\t\tfor
  i = p1 - 1, p2, -1 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\tend\n\treturn
  result\nend"
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v ==
  planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tif p1 < p2 then\n\t\tfor
  i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\telse\n\t\tfor
  i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\tend\n\treturn
  res\nend"
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal res = {}\n\tlocal p1, p2\n\tfor i, v in ipairs(planets) do\n\t\tif
  v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  p1 and p2 then\n\t\tif p1 < p2 then\n\t\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\t\ttable.insert(res,
  planets[i])\n\t\t\tend\n\t\telse\n\t\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\t\ttable.insert(res,
  planets[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend"
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)
    if p1 == nil or p2 == nil then return {} end
    local result = {}
    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do
      table.insert(result, planets[i])
    end
    return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
    if not p1 or not p2 then return {} end
    local res = {}
    for i = math.min(p1, p2), math.max(p1, p2) do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    local t = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(t, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(t, planets[i])
      end
    end
    return t
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local res = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(res, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local index1, index2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        index1 = i
      end
      if v == planet2 then
        index2 = i
      end
    end
    if index1 == 0 or index2 == 0 then
      return {}
    end
    local result = {}
    for i = index1 + 1, index2 - 1 do
      table.insert(result, planets[i])
    end
    return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1 = 0
    local p2 = 0
    local result = {}
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return result
    end
    if p1 > p2 then
      p1, p2 = p2, p1
    end
    for i = p1, p2 do
      table.insert(result, planets[i])
    end
    return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              p1 = i
          end
          if planet == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local result = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return result
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      for i = p1 + 1, p2 - 1 do
          table.insert(result, planets[i])
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = table.indexOf(planets, planet1), table.indexOf(planets, planet2)
      if p1 == -1 or p2 == -1 then return {} end
      local result = {}
      for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do
          table.insert(result, planets[i])
      end
      return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then
      p1, p2 = p2, p1
    end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal i1, i2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v ==
  planet1 then\n\t\t\ti1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\ti2 = i\n\t\tend\n\tend\n\tif
  i1 == 0 or i2 == 0 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tif i1 > i2 then\n\t\tfor
  i = i2, i1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\telse\n\t\tfor i =
  i1, i2 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\tend\n\treturn res\nend"
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    local res = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(res, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2
    for i, p in ipairs(planets) do
      if p == planet1 then
        p1 = i
      end
      if p == planet2 then
        p2 = i
      end
    end
    if not p1 or not p2 then
      return {}
    end
    local res = {}
    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    local res = {}
    if p1 > p2 then
      for i = p2, p1 do
        table.insert(res, planets[i])
      end
    else
      for i = p1, p2 do
        table.insert(res, planets[i])
      end
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then
      p1, p2 = p2, p1
    end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
      -- TODO: Implement this function
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
    if p1 and p2 then
      if p1 > p2 then
        p1, p2 = p2, p1
      end
      return table.slice(planets, p1 + 1, p2)
    end
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\tif
  not p1 or not p2 then return {} end\n\tlocal t = {}\n\tif p1 < p2 then\n\t\tfor
  i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(t, planets[i])\n\t\tend\n\telse\n\t\tfor
  i = p1 - 1, p2 + 1, -1 do\n\t\t\ttable.insert(t, planets[i])\n\t\tend\n\tend\n\treturn
  t\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local index1, index2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        index1 = i
      end
      if v == planet2 then
        index2 = i
      end
    end
    if index1 == 0 or index2 == 0 then
      return {}
    end
    local result = {}
    if index1 < index2 then
      for i = index1 + 1, index2 - 1 do
        table.insert(result, planets[i])
      end
    else
      for i = index2 + 1, index1 - 1 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal planet1_index = 0\n\tlocal planet2_index = 0\n\tlocal result
  = {}\n\tfor i, planet in ipairs(planets) do\n\t\tif planet == planet1 then\n\t\t\tplanet1_index
  = i\n\t\telseif planet == planet2 then\n\t\t\tplanet2_index = i\n\t\tend\n\tend\n\tif
  planet1_index == 0 or planet2_index == 0 then\n\t\treturn result\n\tend\n\tif planet1_index
  < planet2_index then\n\t\tfor i = planet1_index + 1, planet2_index - 1 do\n\t\t\ttable.insert(result,
  planets[i])\n\t\tend\n\telse\n\t\tfor i = planet2_index + 1, planet1_index - 1 do\n\t\t\ttable.insert(result,
  planets[i])\n\t\tend\n\tend\n\treturn result\nend"
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1 = table.indexof(planets, planet1)
    local p2 = table.indexof(planets, planet2)
    local result = {}
    if p1 and p2 then
      if p1 > p2 then
        for i = p2, p1 do
          table.insert(result, planets[i])
        end
      else
        for i = p1, p2 do
          table.insert(result, planets[i])
        end
      end
    end
    return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              p1 = i
          end
          if planet == planet2 then
              p2 = i
          end
      end
      if p1 == nil or p2 == nil then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then p1 = i end
          if v == planet2 then p2 = i end
      end
      if p1 == 0 or p2 == 0 then return {} end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local result = {}
    local p1, p2 = 0, 0
    for i, p in ipairs(planets) do
      if p == planet1 then p1 = i end
      if p == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(result, planets[i])
      end
    else
      for i = p1 - 1, p2 + 1, -1 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)
    if p1 and p2 then
      local t = {}
      for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do
        table.insert(t, planets[i])
      end
      return t
    end
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)
    if p1 and p2 then
      local res = {}
      if p1 < p2 then
        for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
        end
      else
        for i = p1 - 1, p2 + 1, -1 do
          table.insert(res, planets[i])
        end
      end
      return res
    else
      return {}
    end
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, p in ipairs(planets) do
          if p == planet1 then
              p1 = i
          end
          if p == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local result = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i = 1, #planets do
          if planets[i] == planet1 then
              p1 = i
          end
          if planets[i] == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local planet1_index, planet2_index
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              planet1_index = i
          end
          if planet == planet2 then
              planet2_index = i
          end
      end
      if planet1_index == nil or planet2_index == nil then
          return {}
      end
      local result = {}
      if planet1_index < planet2_index then
          for i = planet1_index + 1, planet2_index - 1 do
              table.insert(result, planets[i])
          end
      else
          for i = planet2_index + 1, planet1_index - 1 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2\n\tlocal result = {}\n\tfor i, v in ipairs(planets) do\n\t\tif
  v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  p1 and p2 then\n\t\tif p1 > p2 then\n\t\t\tfor i = p2, p1 do\n\t\t\t\ttable.insert(result,
  planets[i])\n\t\t\tend\n\t\telse\n\t\t\tfor i = p1, p2 do\n\t\t\t\ttable.insert(result,
  planets[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1 = 0\n\tlocal p2 = 0\n\tlocal result = {}\n\tfor i, v in ipairs(planets)
  do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2
  = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn result\n\tend\n\tif
  p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(result,
  planets[i])\n\tend\n\treturn result\nend"
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2
      for i, planet in ipairs(planets) do
          if planet == planet1 then
              p1 = i
          end
          if planet == planet2 then
              p2 = i
          end
      end
      if p1 == nil or p2 == nil then
          return {}
      end
      if p1 > p2 then
          p1, p2 = p2, p1
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = 0
      local p2 = 0
      local res = {}
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(res, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then p1, p2 = p2, p1 end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then
      p1, p2 = p2, p1
    end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)
    if p1 == nil or p2 == nil then return {} end
    if p1 > p2 then p1, p2 = p2, p1 end
    return table.slice(planets, p1 + 1, p2)
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then p1 = i end
          if v == planet2 then p2 = i end
      end
      if p1 == 0 or p2 == 0 then return {} end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',
  'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v ==
  planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif
  p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tif p1 < p2 then\n\t\tfor
  i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\telse\n\t\tfor
  i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\tend\n\treturn
  res\nend"
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    local result = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(result, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    local result = {}
    if p1 < p2 then
      for i = p1 + 1, p2 - 1 do
        table.insert(result, planets[i])
      end
    else
      for i = p2 + 1, p1 - 1 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      for i = p1, p2 do
          if i ~= p1 and i ~= p2 then
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then p1 = i end
          if v == planet2 then p2 = i end
      end
      if p1 == 0 or p2 == 0 then return {} end
      local res = {}
      for i = p1, p2 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      if p1 < p2 then
          for i = p1 + 1, p2 - 1 do
              table.insert(res, planets[i])
          end
      else
          for i = p2 + 1, p1 - 1 do
              table.insert(res, planets[i])
          end
      end
      return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1 = table.indexof(planets, planet1)
      local p2 = table.indexof(planets, planet2)
      if p1 == nil or p2 == nil then return {} end
      local result = {}
      if p1 > p2 then
          for i = p2, p1 do
              table.insert(result, planets[i])
          end
      else
          for i = p1, p2 do
              table.insert(result, planets[i])
          end
      end
      return result
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1, p2 = 0, 0
    for i, v in ipairs(planets) do
      if v == planet1 then p1 = i end
      if v == planet2 then p2 = i end
    end
    if p1 == 0 or p2 == 0 then return {} end
    if p1 > p2 then
      p1, p2 = p2, p1
    end
    local res = {}
    for i = p1 + 1, p2 - 1 do
      table.insert(res, planets[i])
    end
    return res
  end
- |2-
      local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
      local p1, p2 = 0, 0
      for i, v in ipairs(planets) do
          if v == planet1 then
              p1 = i
          end
          if v == planet2 then
              p2 = i
          end
      end
      if p1 == 0 or p2 == 0 then
          return {}
      end
      local res = {}
      for i = p1 + 1, p2 - 1 do
          table.insert(res, planets[i])
      end
      return res
  end
- |2-
    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}
    local p1 = 0
    local p2 = 0
    local result = {}
    for i, v in ipairs(planets) do
      if v == planet1 then
        p1 = i
      end
      if v == planet2 then
        p2 = i
      end
    end
    if p1 == 0 or p2 == 0 then
      return {}
    end
    if p1 > p2 then
      for i = p2, p1 do
        table.insert(result, planets[i])
      end
    else
      for i = p1, p2 do
        table.insert(result, planets[i])
      end
    end
    return result
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
