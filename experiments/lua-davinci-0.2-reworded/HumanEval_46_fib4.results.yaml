name: HumanEval_46_fib4
language: lua
results:
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppju1gkuu.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmppju1gkuu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xajbz1x.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp2xajbz1x.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpday60t_i.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpday60t_i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs8yfufy.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpvs8yfufy.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp465jx62m.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp465jx62m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local f0, f1, f2, f3\
    \ = 0, 0, 2, 0\n    for i = 4, n do\n        f0, f1, f2, f3 = f1, f2, f3, f0 +\
    \ f1 + f2 + f3\n    end\n    return f3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0_3o6an.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmps0_3o6an.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6o6hysz.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpo6o6hysz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqhv6z0r.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmppqhv6z0r.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_t8ttwa.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp4_t8ttwa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjc91tr2o.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpjc91tr2o.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b67wac1.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp9b67wac1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdbb7we7.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpcdbb7we7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoinitm_c.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpoinitm_c.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 1, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpif9qa5c2.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpif9qa5c2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6jqq_39.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp_6jqq_39.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohz4vmk6.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpohz4vmk6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqrgkscz.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpiqrgkscz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_iqyyav.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpq_iqyyav.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a = 0\n        local b = 0\n        local c = 2\n        local d = 0\n\
    \        for i = 4, n do\n            d = a + b + c\n            a = b\n     \
    \       b = c\n            c = d\n        end\n        return d\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5eccilb9.lua:42:\
    \ expected: 28, actual: 26\nstack traceback:\n\t/tmp/tmp5eccilb9.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return\
    \ 0\n  end\n  if n == 2 then\n    return 2\n  end\n  if n == 3 then\n    return\
    \ 0\n  end\n  local a = 0\n  local b = 0\n  local c = 2\n  local d = 0\n  local\
    \ i = 4\n  while i <= n do\n    a = b + c + d\n    b = c\n    c = d\n    d = a\n\
    \    i = i + 1\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgc80jb1.lua:49:\
    \ expected: 28, actual: 22\nstack traceback:\n\t/tmp/tmprgc80jb1.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaljop4xo.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpaljop4xo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tlocal a, b, c, d = 0, 0,\
    \ 2, 0\n\tfor i = 3, n do\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\tend\n\t\
    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76jlf2o7.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp76jlf2o7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3dbex7l.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpa3dbex7l.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyt0hn112.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpyt0hn112.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkyvlm4k.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpkkyvlm4k.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return\
    \ 0\n  end\n  if n == 2 then\n    return 2\n  end\n  if n == 3 then\n    return\
    \ 0\n  end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n    a, b, c, d\
    \ = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi284cve.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpmi284cve.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1tdows9.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpf1tdows9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14ijxq4e.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp14ijxq4e.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd62xk2op.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpd62xk2op.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g6hfzs7.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp7g6hfzs7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sz_a8ig.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp0sz_a8ig.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptetjo7wh.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmptetjo7wh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hzkyx5l.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp9hzkyx5l.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjft3ji9x.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpjft3ji9x.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp865air6c.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp865air6c.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6zf0z_r.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpk6zf0z_r.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu6de5va.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpyu6de5va.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7ctnnoh.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpr7ctnnoh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7n0bqx0.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpi7n0bqx0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 3 then\n     \
    \   return n * 2\n    end\n    local a, b, c, d = 0, 0, 2, 0\n    for i = 4, n\
    \ do\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1yi_fj8.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpv1yi_fj8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_cnm1zc.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpp_cnm1zc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptslp0c4e.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmptslp0c4e.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a = 0\n        local b = 0\n        local c = 2\n        local d = 0\n\
    \        for i = 4, n do\n            d = a + b + c\n            a = b\n     \
    \       b = c\n            c = d\n        end\n        return d\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kz2asi_.lua:42:\
    \ expected: 28, actual: 26\nstack traceback:\n\t/tmp/tmp6kz2asi_.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3oniha2v.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp3oniha2v.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0uyhpj8.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpk0uyhpj8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4tkbscz.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpx4tkbscz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbf1tfwr.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpgbf1tfwr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1ormj6c.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpo1ormj6c.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppey9muij.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmppey9muij.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphre7dvah.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmphre7dvah.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then\n     \
    \   return nil\n    end\n    if n == 0 then\n        return 0\n    end\n    if\
    \ n == 1 then\n        return 0\n    end\n    if n == 2 then\n        return 2\n\
    \    end\n    if n == 3 then\n        return 0\n    end\n    local a = 0\n   \
    \ local b = 0\n    local c = 2\n    local d = 0\n    local i = 4\n    while i\
    \ <= n do\n        a = b + c + d\n        b = c\n        c = d\n        d = a\n\
    \        i = i + 1\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41e1o7xo.lua:49:\
    \ expected: 28, actual: 22\nstack traceback:\n\t/tmp/tmp41e1o7xo.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9of1ach.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpn9of1ach.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    if n == 0 then\n        return a\n    elseif n == 1 then\n    \
    \    return b\n    elseif n == 2 then\n        return c\n    elseif n == 3 then\n\
    \        return d\n    end\n    for i = 4, n do\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34mwfdsn.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp34mwfdsn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e5imimh.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp3e5imimh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xupcloj.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp6xupcloj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8dlxgmq.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpe8dlxgmq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqvsugzk.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpmqvsugzk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkxp6hq0.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmptkxp6hq0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a = 0\n        local b = 0\n        local c = 2\n        local d = 0\n\
    \        for i = 4, n do\n            d = a + b + c\n            a = b\n     \
    \       b = c\n            c = d\n        end\n        return d\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_107sor.lua:42:\
    \ expected: 28, actual: 26\nstack traceback:\n\t/tmp/tmps_107sor.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_x2hijg.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpr_x2hijg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 3, n do\n    a, b, c,\
    \ d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wt64s25.lua:28:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp5wt64s25.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp___v_7xb.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp___v_7xb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tlocal a, b, c, d = 0, 0,\
    \ 2, 0\n\tfor i = 4, n do\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\tend\n\t\
    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 3 then\n     \
    \   return n\n    end\n    local a, b, c, d = 0, 0, 2, 0\n    for i = 4, n do\n\
    \        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uafmsqz.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp0uafmsqz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then\n     \
    \   return nil\n    end\n    if n == 0 then\n        return 0\n    end\n    if\
    \ n == 1 then\n        return 0\n    end\n    if n == 2 then\n        return 2\n\
    \    end\n    if n == 3 then\n        return 0\n    end\n    local a = 0\n   \
    \ local b = 0\n    local c = 2\n    local d = 0\n    for i = 4, n do\n       \
    \ local e = a + b + c + d\n        a = b\n        b = c\n        c = d\n     \
    \   d = e\n    end\n    return a + b + c + d\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3braois.lua:47:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpe3braois.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofp5kc7b.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpofp5kc7b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 0 end\n  if n ==\
    \ 2 then return 2 end\n  if n == 3 then return 0 end\n  local a, b, c, d = 0,\
    \ 0, 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n\
    \  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk24e51ae.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpk24e51ae.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh4_r99o.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpqh4_r99o.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67hf1y0_.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp67hf1y0_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a = 0\n        local b = 0\n        local c = 2\n        local d = 0\n\
    \        for i = 4, n do\n            d = a + b + c\n            a = b\n     \
    \       b = c\n            c = d\n        end\n        return d\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1w5rmt7.lua:42:\
    \ expected: 28, actual: 26\nstack traceback:\n\t/tmp/tmpc1w5rmt7.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpto9z_lep.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpto9z_lep.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin2zaeoc.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpin2zaeoc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmbynien.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpnmbynien.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tlocal a, b, c, d = 0, 0,\
    \ 2, 0\n\tfor i = 3, n do\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\tend\n\t\
    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnddrczx6.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpnddrczx6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvus04a23.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpvus04a23.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ggoe7aa.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp0ggoe7aa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then\n     \
    \   return nil\n    end\n    local a, b, c, d = 0, 0, 2, 0\n    for i = 3, n do\n\
    \        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp599x1jp_.lua:28:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp599x1jp_.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 3, n do\n    a, b, c,\
    \ d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg_zbl5h.lua:28:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpxg_zbl5h.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a = 0\n        local b = 0\n        local c = 2\n        local d = 0\n\
    \        for i = 4, n do\n            d = a + b + c\n            a = b\n     \
    \       b = c\n            c = d\n        end\n        return d\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ygvltpv.lua:42:\
    \ expected: 28, actual: 26\nstack traceback:\n\t/tmp/tmp6ygvltpv.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1mrlxso.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpf1mrlxso.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6szogro.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpi6szogro.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr9w46br.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpgr9w46br.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wjkdmu9.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp_wjkdmu9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiltdxpdy.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpiltdxpdy.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  -- TODO: implement this\
    \ function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsrknn1g.lua:21:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmpnsrknn1g.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then\n     \
    \   return nil\n    end\n    local a, b, c, d = 0, 0, 2, 0\n    for i = 3, n do\n\
    \        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8v2we1u.lua:28:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmph8v2we1u.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthbmkkay.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpthbmkkay.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 2, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zpn1694.lua:25:\
    \ expected: 4, actual: 14\nstack traceback:\n\t/tmp/tmp9zpn1694.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzong794t.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpzong794t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjshfxig6.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpjshfxig6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8kvsltt.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp_8kvsltt.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tlocal a, b, c, d = 0, 0,\
    \ 2, 0\n\tfor i = 4, n do\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\tend\n\t\
    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitwakwz3.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpitwakwz3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrt811_n.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmphrt811_n.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh_eltnv.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpeh_eltnv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4g6twb6a.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp4g6twb6a.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyia555_2.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpyia555_2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a, b, c, d = 0, 0,\
    \ 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n  \
    \  a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
