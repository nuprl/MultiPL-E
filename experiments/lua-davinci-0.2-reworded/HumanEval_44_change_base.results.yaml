---
name: HumanEval_44_change_base
language: lua
results:
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local s = ''
      while x > 0 do
        local r = x % base
        x = (x - r) / base
        s = tostring(r) .. s
      end
      return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7gsw1ha.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpi7gsw1ha.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytjsczj6.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpytjsczj6.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84_gy5xj.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp84_gy5xj.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            local r = x % base
            s = tostring(r) .. s
            x = math.floor(x / base)
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      local r
      while x > 0 do
        r = x % base
        x = math.floor(x / base)
        result = tostring(r) .. result
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local remainder = x % base
            x = math.floor(x / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3xsilqc.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpw3xsilqc.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        result = tostring(x % base) .. result
        x = math.floor(x / base)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            local r = x % base
            res = tostring(r) .. res
            x = (x - r) / base
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34339juf.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp34339juf.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            local r = x % base
            s = s .. tostring(r)
            x = (x - r) / base
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfktits3d.lua:23:
    expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpfktits3d.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local quotient = x
        local remainder = 0
        while quotient > 0 do
            remainder = quotient % base
            quotient = math.floor(quotient / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            local r = x % base
            s = tostring(r) .. s
            x = math.floor(x / base)
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local digit = x % base
            result = tostring(digit) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            s = tostring(x % base) .. s
            x = math.floor(x / base)
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn54v9zx2.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpn54v9zx2.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            local r = x % base
            res = tostring(r) .. res
            x = (x - r) / base
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydgo4gy7.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpydgo4gy7.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local quotient = x
        while quotient > 0 do
            local remainder = quotient % base
            quotient = math.floor(quotient / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = (x - r) / base
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxtrn88i.lua:23:
    expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpnxtrn88i.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local mod = x % base
            result = tostring(mod) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ioamsjf.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp2ioamsjf.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ""
        while x > 0 do
            local r = x % base
            s = s .. tostring(r)
            x = (x - r) / base
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkt2a_u54.lua:23:
    expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpkt2a_u54.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacmodhb6.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpacmodhb6.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            local r = x % base
            res = tostring(r) .. res
            x = (x - r) / base
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lzzujnt.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp0lzzujnt.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        result = tostring(x % base) .. result
        x = math.floor(x / base)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local digit = x % base
            result = tostring(digit) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local digit = x % base
        result = tostring(digit) .. result
        x = math.floor(x / base)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ""
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6w2wvf4k.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp6w2wvf4k.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = (x - r) / base
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkgu233n.lua:23:
    expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpbkgu233n.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local x = x
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            s = tostring(r) .. s
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp682vml8d.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp682vml8d.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = (x - r) / base
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjbi55a6.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpbjbi55a6.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            local digit = x % base
            res = tostring(digit) .. res
            x = math.floor(x / base)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local digit = x % base
            result = tostring(digit) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5iam9sg.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp_5iam9sg.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        x = (x - r) / base
        result = tostring(r) .. result
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai1se5ne.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpai1se5ne.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local remainder = x % base
            result = tostring(remainder) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local remainder = x % base
        result = tostring(remainder) .. result
        x = (x - remainder) / base
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpueoe819y.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpueoe819y.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local d = x % base
            result = tostring(d) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxofawoy.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpuxofawoy.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local m = x % base
            result = tostring(m) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        result = tostring(r) .. result
        x = (x - r) / base
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9l6xlzr.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpu9l6xlzr.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3nocy0a.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpf3nocy0a.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local quotient = x
        while quotient > 0 do
            local remainder = quotient % base
            result = tostring(remainder) .. result
            quotient = math.floor(quotient / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfujg6nh.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpcfujg6nh.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = string.format('%d%s', r, result)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            s = tostring(r) .. s
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local digit = x % base
            x = math.floor(x / base)
            result = tostring(digit) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            s = tostring(x % base) .. s
            x = math.floor(x / base)
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local remainder = x % base
            x = math.floor(x / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazqfvu93.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpazqfvu93.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local remainder = x % base
            result = tostring(remainder) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf0g5vpt.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpsf0g5vpt.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        x = (x - r) / base
        result = tostring(r) .. result
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26bzl3qm.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp26bzl3qm.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = (x - r) / base
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfybo4sa6.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpfybo4sa6.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Change numerical base of input number x to base.\n-- return string
    representation after the conversion.\n-- base numbers are less than 10.\n-- >>>
    change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7,
    2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal result = ''\n\twhile
    x > 0 do\n\t\tlocal r = x % base\n\t\tx = math.floor(x / base)\n\t\tresult = tostring(r)
    .. result\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,
    3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,
    2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,
    2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,
    4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,
    6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,
    8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ""
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73ys8vmb.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp73ys8vmb.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        result = tostring(x % base) .. result
        x = math.floor(x / base)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85ejhxcx.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp85ejhxcx.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            s = tostring(r) .. s
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxq041v5.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpuxq041v5.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        x = math.floor(x / base)
        result = tostring(r) .. result
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasaci4lj.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpasaci4lj.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local remainder = 0
        while x > 0 do
            remainder = x % base
            x = math.floor(x / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmaab6gl.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpxmaab6gl.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        x = math.floor(x / base)
        result = tostring(r) .. result
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local digits = {}
        local i = 1
        while x > 0 do
            digits[i] = x % base
            x = math.floor(x / base)
            i = i + 1
        end
        local s = ""
        for i = #digits, 1, -1 do
            s = s .. tostring(digits[i])
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        x = math.floor(x / base)
        result = tostring(r) .. result
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ""
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        x = (x - r) / base
        result = tostring(r) .. result
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop1hw_8u.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpop1hw_8u.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local remainder = x % base
            x = math.floor(x / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            s = tostring(x % base) .. s
            x = math.floor(x / base)
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfagv9vv.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmprfagv9vv.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local remainder = x % base
            x = (x - remainder) / base
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8vq63re.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpz8vq63re.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local remainder = x % base
            x = math.floor(x / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            local r = x % base
            res = tostring(r) .. res
            x = (x - r) / base
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvd68hk9j.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpvd68hk9j.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local quotient = x
        while quotient > 0 do
            local remainder = quotient % base
            result = tostring(remainder) .. result
            quotient = math.floor(quotient / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        x = (x - r) / base
        result = tostring(r) .. result
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh2hkrq7.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpxh2hkrq7.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ""
        local remainder = 0
        while x > 0 do
            remainder = x % base
            x = math.floor(x / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            res = tostring(x % base) .. res
            x = math.floor(x / base)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = result .. tostring(r)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9j3pa1vv.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp9j3pa1vv.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            local r = x % base
            res = tostring(r) .. res
            x = math.floor(x / base)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            s = s .. tostring(r)
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1bx89k0.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpa1bx89k0.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshtf5lbh.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpshtf5lbh.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ""
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l34zz80.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp5l34zz80.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        result = tostring(r) .. result
        x = (x - r) / base
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65jaxvja.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp65jaxvja.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local num = x
        while num > 0 do
            local r = num % base
            result = result .. tostring(r)
            num = math.floor(num / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp_3kjso.lua:25:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpwp_3kjso.lua:25:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrsyxknd.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpkrsyxknd.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp847hp0jv.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp847hp0jv.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            s = tostring(x % base) .. s
            x = math.floor(x / base)
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local rest = x
        while rest > 0 do
            local digit = rest % base
            rest = math.floor(rest / base)
            result = tostring(digit) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        result = tostring(r) .. result
        x = math.floor(x / base)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kkos8j1.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp7kkos8j1.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            res = tostring(x % base) .. res
            x = math.floor(x / base)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcc1jnjll.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpcc1jnjll.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local remainder = 0
        while x > 0 do
            remainder = x % base
            x = math.floor(x / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphx7o_9el.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmphx7o_9el.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        result = result .. tostring(r)
        x = math.floor(x / base)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83h3crks.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp83h3crks.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local mod = x % base
            x = math.floor(x / base)
            result = tostring(mod) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            local r = x % base
            res = tostring(r) .. res
            x = math.floor(x / base)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local mod = x % base
            result = tostring(mod) .. result
            x = (x - mod) / base
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylm16f8e.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpylm16f8e.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local ret = ''
      while x > 0 do
        local r = x % base
        ret = tostring(r) .. ret
        x = (x - r) / base
      end
      return ret
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhub4vsp.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpnhub4vsp.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95q6pwi4.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp95q6pwi4.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      while x > 0 do
        local r = x % base
        result = result .. tostring(r)
        x = math.floor(x / base)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zk55zee.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp2zk55zee.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3gxe8ni.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpm3gxe8ni.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ""
        while x > 0 do
            s = tostring(x % base) .. s
            x = math.floor(x / base)
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1a7ps0ls.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp1a7ps0ls.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            result = tostring(x % base) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local remainder = x % base
            x = math.floor(x / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            local r = x % base
            res = tostring(r) .. res
            x = (x - r) / base
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09id8haj.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp09id8haj.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r2wvl86.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp7r2wvl86.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
      local result = ''
      local rest = x
      while rest > 0 do
        local digit = rest % base
        rest = math.floor(rest / base)
        result = tostring(digit) .. result
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx68mzbzs.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpx68mzbzs.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            s = s .. tostring(r)
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposf26rgm.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmposf26rgm.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local s = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            s = string.char(r + 48) .. s
        end
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local mod = x % base
            result = tostring(mod) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local res = ''
        while x > 0 do
            local r = x % base
            res = tostring(r) .. res
            x = math.floor(x / base)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local digit = x % base
            result = tostring(digit) .. result
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = (x - r) / base
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9c3iefe.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpb9c3iefe.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = (x - r) / base
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_rh2klu.lua:23:
    expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmp7_rh2klu.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = math.floor(x / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91nxvpni.lua:24:
    expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp91nxvpni.lua:24:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        local rest = x
        while rest > 0 do
            local digit = rest % base
            result = tostring(digit) .. result
            rest = math.floor(rest / base)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local remainder = x % base
            x = math.floor(x / base)
            result = tostring(remainder) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = result .. tostring(r)
            x = (x - r) / base
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwzsl9z2.lua:23:
    expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpxwzsl9z2.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            x = math.floor(x / base)
            result = tostring(r) .. result
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Change numerical base of input number x to base.
    -- return string representation after the conversion.
    -- base numbers are less than 10.
    -- >>> change_base(8, 3)
    -- '22'
    -- >>> change_base(8, 2)
    -- '1000'
    -- >>> change_base(7, 2)
    -- '111'
    local function change_base(x, base)
        local result = ''
        while x > 0 do
            local r = x % base
            result = tostring(r) .. result
            x = (x - r) / base
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = change_base
        lu.assertEquals(candidate(8, 3), '22')
        lu.assertEquals(candidate(9, 3), '100')
        lu.assertEquals(candidate(234, 2), '11101010')
        lu.assertEquals(candidate(16, 2), '10000')
        lu.assertEquals(candidate(8, 2), '1000')
        lu.assertEquals(candidate(7, 2), '111')
        lu.assertEquals(candidate(2, 3), '2')
        lu.assertEquals(candidate(3, 4), '3')
        lu.assertEquals(candidate(4, 5), '4')
        lu.assertEquals(candidate(5, 6), '5')
        lu.assertEquals(candidate(6, 7), '6')
        lu.assertEquals(candidate(7, 8), '7')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21ry4ex7.lua:23:
    expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp21ry4ex7.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
