---
name: HumanEval_112_reverse_delete
language: lua
results:
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        local s1 = table.concat(t)
        local s2 = s1:reverse()
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local res = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          res[#res + 1] = ch
        end
      end
      local str = table.concat(res)
      local palindrome = true
      for i = 1, #str / 2 do
        if str:sub(i, i) ~= str:sub(#str - i + 1, #str - i + 1) then
          palindrome = false
          break
        end
      end
      return {str, palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local new_s = ''
        for i = 1, #s do
            local flag = false
            for j = 1, #c do
                if s:sub(i, i) == c:sub(j, j) then
                    flag = true
                    break
                end
            end
            if not flag then
                new_s = new_s .. s:sub(i, i)
            end
        end
        local flag = true
        for i = 1, #new_s / 2 do
            if new_s:sub(i, i) ~= new_s:sub(#new_s - i + 1, #new_s - i + 1) then
                flag = false
                break
            end
        end
        return {new_s, flag}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local result = {}
      local t = {}
      for i = 1, #s do
        t[i] = s:sub(i, i)
      end
      for i = 1, #t do
        local flag = false
        for j = 1, #c do
          if t[i] == c:sub(j, j) then
            flag = true
            break
          end
        end
        if not flag then
          table.insert(result, t[i])
        end
      end
      local str = table.concat(result)
      local flag = true
      for i = 1, #str / 2 do
        if str:sub(i, i) ~= str:sub(#str - i + 1, #str - i + 1) then
          flag = false
          break
        end
      end
      return {str, flag}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcna9ooug.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpcna9ooug.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre6t_5dr.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpre6t_5dr.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local found = false
        for j = 1, #c do
          if s:sub(i, i) == c:sub(j, j) then
            found = true
            break
          end
        end
        if not found then
          t[#t + 1] = s:sub(i, i)
        end
      end
      local s1 = table.concat(t)
      local s2 = s1:reverse()
      return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos8xqh98.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpos8xqh98.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local s1 = table.concat(t)
      local s2 = s1:reverse()
      return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == result:reverse()
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_tya67z.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmph_tya67z.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local res = {}
        local t = {}
        for i = 1, #s do
            t[i] = s:sub(i, i)
        end
        for i = 1, #t do
            local flag = true
            for j = 1, #c do
                if t[i] == c:sub(j, j) then
                    flag = false
                    break
                end
            end
            if flag then
                table.insert(res, t[i])
            end
        end
        local str = table.concat(res)
        local flag = true
        for i = 1, #str / 2 do
            if str:sub(i, i) ~= str:sub(#str - i + 1, #str - i + 1) then
                flag = false
                break
            end
        end
        return {str, flag}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == result:reverse()
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        local result = {}
        for i = 1, #s do
            t[i] = s:sub(i, i)
        end
        for i = 1, #t do
            if not c:find(t[i]) then
                table.insert(result, t[i])
            end
        end
        local str = table.concat(result)
        local palindrome = true
        for i = 1, #str / 2 do
            if str:sub(i, i) ~= str:sub(#str - i + 1, #str - i + 1) then
                palindrome = false
                break
            end
        end
        return {str, palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local found = false
        for j = 1, #c do
          if s:sub(i, i) == c:sub(j, j) then
            found = true
            break
          end
        end
        if not found then
          t[#t + 1] = s:sub(i, i)
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yi4_782.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmp5yi4_782.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local c = s:sub(i, i)
            if not c:find(c) then
                t[#t + 1] = c
            end
        end
        local s = table.concat(t)
        local r = s:reverse()
        return {s, s == r}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmruo7qw9.lua:29:
    expected: {\"bcd\", false}\nactual: {\"\", true}\nstack traceback:\n\t/tmp/tmpmruo7qw9.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqvne1im.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpzqvne1im.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s1 = table.concat(t)
        local s2 = s1:reverse()
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        return {table.concat(t), t[1] == t[#t]}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local r = table.concat(t)
      return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = true
        for i = 1, #result / 2 do
            if result:sub(i, i) ~= result:sub(#result - i + 1, #result - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local s = table.concat(t)
      return {s, s == s:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local result = {}
        local s_len = #s
        local c_len = #c
        local i = 1
        local j = 1
        local k = 1
        while i <= s_len do
            local s_char = s:sub(i, i)
            local is_in_c = false
            for j = 1, c_len do
                local c_char = c:sub(j, j)
                if s_char == c_char then
                    is_in_c = true
                    break
                end
            end
            if not is_in_c then
                result[k] = s_char
                k = k + 1
            end
            i = i + 1
        end
        local result_str = table.concat(result)
        local is_palindrome = true
        local result_len = #result_str
        for i = 1, result_len / 2 do
            if result_str:sub(i, i) ~= result_str:sub(result_len - i + 1, result_len - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {result_str, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local result = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(result, char)
            end
        end
        return {table.concat(result), table.concat(result) == table.concat(result, '', #result, 1, -1)}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g59af9y.lua:29:
    expected: {\"cdedc\", true}\nactual: {\"cdedc\", false}\nstack traceback:\n\t/tmp/tmp9g59af9y.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not string.find(c, s:sub(i, i)) then
                table.insert(t, s:sub(i, i))
            end
        end
        local res = table.concat(t)
        local is_palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        if not c:find(s:sub(i, i)) then
          t[#t + 1] = s:sub(i, i)
        end
      end
      return {table.concat(t), table.concat(t) == table.concat(t, '', #t, 1)}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48v3y2g3.lua:28:
    expected: {\"cdedc\", true}\nactual: {\"cdedc\", false}\nstack traceback:\n\t/tmp/tmp48v3y2g3.lua:28:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local r = table.concat(t)
      return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        if not c:find(s:sub(i, i)) then
          t[#t + 1] = s:sub(i, i)
        end
      end
      local res = table.concat(t)
      return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == string.reverse(res)
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = res == res:reverse()
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s = table.concat(t)
        local t = {}
        for i = #s, 1, -1 do
            t[#t + 1] = s:sub(i, i)
        end
        local s2 = table.concat(t)
        return {s, s == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local res = table.concat(t)
      return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrkewa15.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpxrkewa15.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == result:reverse()
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        return {table.concat(t), t[1] == t[#t]}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local res = {}
      local t = {}
      for i = 1, #s do
        if not t[s:sub(i, i)] then
          t[s:sub(i, i)] = true
          table.insert(res, s:sub(i, i))
        end
      end
      local str = table.concat(res)
      local is_palindrome = str == str:reverse()
      return {str, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw7kj532.lua:30:
    expected: {\"bcd\", false}\nactual: {\"abcde\", false}\nstack traceback:\n\t/tmp/tmpgw7kj532.lua:30:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = res == string.reverse(res)
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s = table.concat(t)
        local is_palindrome = true
        for i = 1, #s / 2 do
            if s:sub(i, i) ~= s:sub(#s - i + 1, #s - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {s, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local str = table.concat(t)
        local palindrome = true
        for i = 1, #str / 2 do
            if str:sub(i, i) ~= str:sub(#str - i + 1, #str - i + 1) then
                palindrome = false
                break
            end
        end
        return {str, palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local res = table.concat(t)
        return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local res = table.concat(t)
      return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7jwg8fe.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpl7jwg8fe.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s1 = table.concat(t)
        local s2 = s1:reverse()
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        return {table.concat(t), t[1] == t[#t]}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        if not c:find(s:sub(i, i)) then
          t[#t + 1] = s:sub(i, i)
        end
      end
      local res = table.concat(t)
      return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      return {table.concat(t), t[1] == t[#t]}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s1 = table.concat(t)
        local s2 = s1:reverse()
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local s1 = table.concat(t)
      local s2 = string.reverse(s1)
      return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s1 = table.concat(t)
        local s2 = string.reverse(s1)
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local r = table.concat(t)
      local is_palindrome = r == string.reverse(r)
      return {r, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                palindrome = false
                break
            end
        end
        return {res, palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = res == string.reverse(res)
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        local p = r == r:reverse()
        return {r, p}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == string.reverse(res)
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                palindrome = false
                break
            end
        end
        return {res, palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s1 = table.concat(t)
        local s2 = s1:reverse()
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local res = {}
        local t = {}
        for i = 1, #s do
            t[i] = s:sub(i, i)
        end
        for i = 1, #t do
            local flag = false
            for j = 1, #c do
                if t[i] == c:sub(j, j) then
                    flag = true
                    break
                end
            end
            if not flag then
                table.insert(res, t[i])
            end
        end
        local str = table.concat(res)
        local flag = true
        for i = 1, #str / 2 do
            if str:sub(i, i) ~= str:sub(#str - i + 1, #str - i + 1) then
                flag = false
                break
            end
        end
        return {str, flag}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s1 = table.concat(t)
        local s2 = s1:reverse()
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s1 = table.concat(t)
        local s2 = s1:reverse()
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        local p = r == r:reverse()
        return {r, p}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == string.reverse(res)
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local result = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                table.insert(result, s:sub(i, i))
            end
        end
        local result_string = table.concat(result)
        local is_palindrome = true
        for i = 1, #result_string / 2 do
            if result_string:sub(i, i) ~= result_string:sub(#result_string - i + 1, #result_string - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {result_string, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local res = {}
        for i = 1, #s do
            local found = false
            for j = 1, #c do
                if s[i] == c[j] then
                    found = true
                    break
                end
            end
            if not found then
                res[#res + 1] = s[i]
            end
        end
        local is_palindrome = true
        for i = 1, #res / 2 do
            if res[i] ~= res[#res - i + 1] then
                is_palindrome = false
                break
            end
        end
        return {table.concat(res), is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptznljce7.lua:40:
    expected: {\"bcd\", false}\nactual: {\"\", true}\nstack traceback:\n\t/tmp/tmptznljce7.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = true
        for i = 1, #result / 2 do
            if result:sub(i, i) ~= result:sub(#result - i + 1, #result - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == result:reverse()
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == result:reverse()
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local c = s:sub(i, i)
        if not c:find(c) then
          t[#t + 1] = c
        end
      end
      local s = table.concat(t)
      return {s, s == s:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjiw17lmz.lua:28:
    expected: {\"bcd\", false}\nactual: {\"\", true}\nstack traceback:\n\t/tmp/tmpjiw17lmz.lua:28:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s1 = table.concat(t)
        local s2 = s1:reverse()
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = true
        for i = 1, #result / 2 do
            if result:sub(i, i) ~= result:sub(#result - i + 1, #result - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == string.reverse(res)
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == result:reverse()
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local str = table.concat(t)
      return {str, str == str:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local result = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if c:find(char) == nil then
                table.insert(result, char)
            end
        end
        local result_str = table.concat(result)
        local is_palindrome = true
        for i = 1, #result_str / 2 do
            if result_str:sub(i, i) ~= result_str:sub(#result_str - i + 1, #result_str - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {result_str, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == res:reverse()
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == res:reverse()
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local result = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          table.insert(result, char)
        end
      end
      local result_string = table.concat(result)
      local is_palindrome = result_string == string.reverse(result_string)
      return {result_string, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local result = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(result, char)
            end
        end
        return {table.concat(result), table.concat(result) == table.concat(result, '', #result, 1, -1)}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21rb3cpi.lua:29:
    expected: {\"cdedc\", true}\nactual: {\"cdedc\", false}\nstack traceback:\n\t/tmp/tmp21rb3cpi.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == result:reverse()
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == res:reverse()
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local palindrome = true
      for i = 1, #result / 2 do
        if result:sub(i, i) ~= result:sub(#result - i + 1, #result - i + 1) then
          palindrome = false
          break
        end
      end
      return {result, palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = res == string.reverse(res)
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == string.reverse(res)
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local result = {}
        local str = ''
        local check = true
        for i = 1, #s do
            local flag = false
            for j = 1, #c do
                if s:sub(i, i) == c:sub(j, j) then
                    flag = true
                    break
                end
            end
            if not flag then
                str = str .. s:sub(i, i)
            end
        end
        for i = 1, #str / 2 do
            if str:sub(i, i) ~= str:sub(#str - i + 1, #str - i + 1) then
                check = false
                break
            end
        end
        result[1] = str
        result[2] = check
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == result:reverse()
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        local res = table.concat(t)
        return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == string.reverse(res)
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        if not c:find(s:sub(i, i)) then
          t[#t + 1] = s:sub(i, i)
        end
      end
      return {table.concat(t), t[1] == t[#t]}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_e5qqg6.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpj_e5qqg6.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == string.reverse(res)
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        local r = table.concat(t)
        local p = true
        for i = 1, #r / 2 do
            if r:sub(i, i) ~= r:sub(#r - i + 1, #r - i + 1) then
                p = false
                break
            end
        end
        return {r, p}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local found = false
            for j = 1, #c do
                if s:sub(i, i) == c:sub(j, j) then
                    found = true
                    break
                end
            end
            if not found then
                t[#t + 1] = s:sub(i, i)
            end
        end
        local result = table.concat(t)
        local is_palindrome = true
        for i = 1, #result / 2 do
            if result:sub(i, i) ~= result:sub(#result - i + 1, #result - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local palindrome = result == string.reverse(result)
      return {result, palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            if not c:find(s:sub(i, i)) then
                t[#t + 1] = s:sub(i, i)
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ci = s:sub(i, i)
            if not c:find(ci) then
                t[#t + 1] = ci
            end
        end
        local r = table.concat(t)
        local p = true
        for i = 1, #r / 2 do
            if r:sub(i, i) ~= r:sub(#r - i + 1, #r - i + 1) then
                p = false
                break
            end
        end
        return {r, p}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      return {res, res == res:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local result = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(result, char)
            end
        end
        local result_str = table.concat(result)
        return {result_str, result_str == result_str:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s = table.concat(t)
        local is_palindrome = true
        for i = 1, #s / 2 do
            if s:sub(i, i) ~= s:sub(#s - i + 1, #s - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {s, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s = table.concat(t)
        local is_palindrome = true
        for i = 1, #s / 2 do
            if s:sub(i, i) ~= s:sub(#s - i + 1, #s - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {s, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local r = table.concat(t)
      return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local result = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(result, char)
            end
        end
        local result_str = table.concat(result)
        local is_palindrome = result_str == string.reverse(result_str)
        return {result_str, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local r = table.concat(t)
      return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local r = table.concat(t)
      return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local palindrome = true
      for i = 1, #res / 2 do
        if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
          palindrome = false
          break
        end
      end
      return {res, palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == res:reverse()
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == res:reverse()
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pl9nfc1.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmp8pl9nfc1.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local s1 = table.concat(t)
        local s2 = s1:reverse()
        return {s1, s1 == s2}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == res:reverse()
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if c:find(ch) == nil then
                table.insert(t, ch)
            end
        end
        local r = table.concat(t)
        local p = r == string.reverse(r)
        return {r, p}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == result:reverse()
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = res == string.reverse(res)
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local res = table.concat(t)
      local palindrome = res == string.reverse(res)
      return {res, palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      return {result, result == result:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = true
        for i = 1, #res / 2 do
            if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then
                is_palindrome = false
                break
            end
        end
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local ss = table.concat(t)
      return {ss, ss == ss:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local check = result == string.reverse(result)
        return {result, check}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == string.reverse(res)
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local found = false
        for j = 1, #c do
          if s:sub(i, i) == c:sub(j, j) then
            found = true
            break
          end
        end
        if not found then
          t[#t + 1] = s:sub(i, i)
        end
      end
      local r = table.concat(t)
      local p = true
      for i = 1, #r / 2 do
        if r:sub(i, i) ~= r:sub(#r - i + 1, #r - i + 1) then
          p = false
          break
        end
      end
      return {r, p}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphmujd9y.lua:20:
    expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpphmujd9y.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local r = table.concat(t)
        return {r, r == r:reverse()}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local ch = s:sub(i, i)
        if not c:find(ch) then
          t[#t + 1] = ch
        end
      end
      local res = table.concat(t)
      local is_palindrome = res == string.reverse(res)
      return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local char = s:sub(i, i)
            if not c:find(char) then
                table.insert(t, char)
            end
        end
        local result = table.concat(t)
        local is_palindrome = result == string.reverse(result)
        return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = res == res:reverse()
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
      local t = {}
      for i = 1, #s do
        local char = s:sub(i, i)
        if not c:find(char) then
          t[#t + 1] = char
        end
      end
      local result = table.concat(t)
      local is_palindrome = result == string.reverse(result)
      return {result, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    -- then check if the result string is palindrome.
    -- A string is called palindrome if it reads the same backward as forward.
    -- You should return a table containing the result string and true/false for the check.
    -- Example
    -- >>> reverse_delete('abcde', 'ae')
    -- {'bcd', false}
    -- >>> reverse_delete('abcdef', 'b')
    -- {'acdef', false}
    -- >>> reverse_delete('abcdedcba', 'ab')
    -- {'cdedc', true}
    local function reverse_delete(s, c)
        local t = {}
        for i = 1, #s do
            local ch = s:sub(i, i)
            if not c:find(ch) then
                t[#t + 1] = ch
            end
        end
        local res = table.concat(t)
        local is_palindrome = res == string.reverse(res)
        return {res, is_palindrome}
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = reverse_delete
        lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
        lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
        lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
        lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
        lu.assertEquals(candidate('a', 'a'), {'', true})
        lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
        lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
        lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
        lu.assertEquals(candidate('mamma', 'mia'), {'', true})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
