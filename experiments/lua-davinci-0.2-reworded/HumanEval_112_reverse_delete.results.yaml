name: HumanEval_112_reverse_delete
language: lua
results:
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    local s1 = table.concat(t)\n    local s2 = s1:reverse()\n\
    \    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local res = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      res[#res + 1] = ch\n   \
    \ end\n  end\n  local str = table.concat(res)\n  local palindrome = true\n  for\
    \ i = 1, #str / 2 do\n    if str:sub(i, i) ~= str:sub(#str - i + 1, #str - i +\
    \ 1) then\n      palindrome = false\n      break\n    end\n  end\n  return {str,\
    \ palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'), {'bcd',\
    \ false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n \
    \   lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local new_s = ''\n    for i = 1, #s do\n\
    \        local flag = false\n        for j = 1, #c do\n            if s:sub(i,\
    \ i) == c:sub(j, j) then\n                flag = true\n                break\n\
    \            end\n        end\n        if not flag then\n            new_s = new_s\
    \ .. s:sub(i, i)\n        end\n    end\n    local flag = true\n    for i = 1,\
    \ #new_s / 2 do\n        if new_s:sub(i, i) ~= new_s:sub(#new_s - i + 1, #new_s\
    \ - i + 1) then\n            flag = false\n            break\n        end\n  \
    \  end\n    return {new_s, flag}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local result = {}\n  local t = {}\n  for i\
    \ = 1, #s do\n    t[i] = s:sub(i, i)\n  end\n  for i = 1, #t do\n    local flag\
    \ = false\n    for j = 1, #c do\n      if t[i] == c:sub(j, j) then\n        flag\
    \ = true\n        break\n      end\n    end\n    if not flag then\n      table.insert(result,\
    \ t[i])\n    end\n  end\n  local str = table.concat(result)\n  local flag = true\n\
    \  for i = 1, #str / 2 do\n    if str:sub(i, i) ~= str:sub(#str - i + 1, #str\
    \ - i + 1) then\n      flag = false\n      break\n    end\n  end\n  return {str,\
    \ flag}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n\
    \    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik',\
    \ false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba', 'v'),\
    \ {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  return {result, result ==\
    \ result:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcna9ooug.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpcna9ooug.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre6t_5dr.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpre6t_5dr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ found = false\n    for j = 1, #c do\n      if s:sub(i, i) == c:sub(j, j) then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      t[#t + 1] = s:sub(i, i)\n    end\n  end\n  local s1 = table.concat(t)\n\
    \  local s2 = s1:reverse()\n  return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos8xqh98.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpos8xqh98.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local s1 = table.concat(t)\n  local s2 = s1:reverse()\n  return {s1,\
    \ s1 == s2}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'), {'bcd',\
    \ false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n \
    \   lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == result:reverse()\n    return {result, is_palindrome}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_tya67z.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmph_tya67z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local res = {}\n    local t = {}\n    for\
    \ i = 1, #s do\n        t[i] = s:sub(i, i)\n    end\n    for i = 1, #t do\n  \
    \      local flag = true\n        for j = 1, #c do\n            if t[i] == c:sub(j,\
    \ j) then\n                flag = false\n                break\n            end\n\
    \        end\n        if flag then\n            table.insert(res, t[i])\n    \
    \    end\n    end\n    local str = table.concat(res)\n    local flag = true\n\
    \    for i = 1, #str / 2 do\n        if str:sub(i, i) ~= str:sub(#str - i + 1,\
    \ #str - i + 1) then\n            flag = false\n            break\n        end\n\
    \    end\n    return {str, flag}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == result:reverse()\n    return {result, is_palindrome}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    local result = {}\n   \
    \ for i = 1, #s do\n        t[i] = s:sub(i, i)\n    end\n    for i = 1, #t do\n\
    \        if not c:find(t[i]) then\n            table.insert(result, t[i])\n  \
    \      end\n    end\n    local str = table.concat(result)\n    local palindrome\
    \ = true\n    for i = 1, #str / 2 do\n        if str:sub(i, i) ~= str:sub(#str\
    \ - i + 1, #str - i + 1) then\n            palindrome = false\n            break\n\
    \        end\n    end\n    return {str, palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ found = false\n    for j = 1, #c do\n      if s:sub(i, i) == c:sub(j, j) then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      t[#t + 1] = s:sub(i, i)\n    end\n  end\n  local result = table.concat(t)\n\
    \  local is_palindrome = result == string.reverse(result)\n  return {result, is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local result = table.concat(t)\n  local is_palindrome = result == result:reverse()\n\
    \  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == result:reverse()\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yi4_782.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmp5yi4_782.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local c = s:sub(i, i)\n        if not c:find(c) then\n            t[#t +\
    \ 1] = c\n        end\n    end\n    local s = table.concat(t)\n    local r = s:reverse()\n\
    \    return {s, s == r}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmruo7qw9.lua:29:\
    \ expected: {\"bcd\", false}\nactual: {\"\", true}\nstack traceback:\n\t/tmp/tmpmruo7qw9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqvne1im.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpzqvne1im.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~=\
    \ res:sub(#res - i + 1, #res - i + 1) then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return {res, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s1 = table.concat(t)\n    local s2\
    \ = s1:reverse()\n    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    return {table.concat(t), t[1] == t[#t]}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local r = table.concat(t)\n  return {r, r == r:reverse()}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~=\
    \ res:sub(#res - i + 1, #res - i + 1) then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return {res, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local result = table.concat(t)\n  local is_palindrome = result == result:reverse()\n\
    \  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == result:reverse()\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = true\n    for i = 1, #result / 2 do\n        if result:sub(i, i) ~= result:sub(#result\
    \ - i + 1, #result - i + 1) then\n            is_palindrome = false\n        \
    \    break\n        end\n    end\n    return {result, is_palindrome}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local s = table.concat(t)\n  return {s, s == s:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local result = {}\n    local s_len = #s\n\
    \    local c_len = #c\n    local i = 1\n    local j = 1\n    local k = 1\n   \
    \ while i <= s_len do\n        local s_char = s:sub(i, i)\n        local is_in_c\
    \ = false\n        for j = 1, c_len do\n            local c_char = c:sub(j, j)\n\
    \            if s_char == c_char then\n                is_in_c = true\n      \
    \          break\n            end\n        end\n        if not is_in_c then\n\
    \            result[k] = s_char\n            k = k + 1\n        end\n        i\
    \ = i + 1\n    end\n    local result_str = table.concat(result)\n    local is_palindrome\
    \ = true\n    local result_len = #result_str\n    for i = 1, result_len / 2 do\n\
    \        if result_str:sub(i, i) ~= result_str:sub(result_len - i + 1, result_len\
    \ - i + 1) then\n            is_palindrome = false\n            break\n      \
    \  end\n    end\n    return {result_str, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local result = {}\n    for i = 1, #s do\n\
    \        local char = s:sub(i, i)\n        if not c:find(char) then\n        \
    \    table.insert(result, char)\n        end\n    end\n    return {table.concat(result),\
    \ table.concat(result) == table.concat(result, '', #result, 1, -1)}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g59af9y.lua:29:\
    \ expected: {\"cdedc\", true}\nactual: {\"cdedc\", false}\nstack traceback:\n\t\
    /tmp/tmp9g59af9y.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not string.find(c, s:sub(i, i)) then\n            table.insert(t, s:sub(i,\
    \ i))\n        end\n    end\n    local res = table.concat(t)\n    local is_palindrome\
    \ = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~= res:sub(#res\
    \ - i + 1, #res - i + 1) then\n            is_palindrome = false\n           \
    \ break\n        end\n    end\n    return {res, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    if not\
    \ c:find(s:sub(i, i)) then\n      t[#t + 1] = s:sub(i, i)\n    end\n  end\n  return\
    \ {table.concat(t), table.concat(t) == table.concat(t, '', #t, 1)}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48v3y2g3.lua:28:\
    \ expected: {\"cdedc\", true}\nactual: {\"cdedc\", false}\nstack traceback:\n\t\
    /tmp/tmp48v3y2g3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  return {result, result ==\
    \ result:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local r = table.concat(t)\n  return {r, r == r:reverse()}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    if not\
    \ c:find(s:sub(i, i)) then\n      t[#t + 1] = s:sub(i, i)\n    end\n  end\n  local\
    \ res = table.concat(t)\n  return {res, res == res:reverse()}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == string.reverse(res)\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = res == res:reverse()\n    return {res, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local result = table.concat(t)\n  local is_palindrome = result == result:reverse()\n\
    \  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s = table.concat(t)\n    local t\
    \ = {}\n    for i = #s, 1, -1 do\n        t[#t + 1] = s:sub(i, i)\n    end\n \
    \   local s2 = table.concat(t)\n    return {s, s == s2}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local res = table.concat(t)\n  return {res, res == res:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrkewa15.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpxrkewa15.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == result:reverse()\n    return {result, is_palindrome}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    return {table.concat(t), t[1] == t[#t]}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local res = {}\n  local t = {}\n  for i = 1,\
    \ #s do\n    if not t[s:sub(i, i)] then\n      t[s:sub(i, i)] = true\n      table.insert(res,\
    \ s:sub(i, i))\n    end\n  end\n  local str = table.concat(res)\n  local is_palindrome\
    \ = str == str:reverse()\n  return {str, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw7kj532.lua:30:\
    \ expected: {\"bcd\", false}\nactual: {\"abcde\", false}\nstack traceback:\n\t\
    /tmp/tmpgw7kj532.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    return\
    \ {res, res == res:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = res == string.reverse(res)\n    return {res, is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    return\
    \ {result, result == result:reverse()}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s = table.concat(t)\n    local is_palindrome\
    \ = true\n    for i = 1, #s / 2 do\n        if s:sub(i, i) ~= s:sub(#s - i + 1,\
    \ #s - i + 1) then\n            is_palindrome = false\n            break\n   \
    \     end\n    end\n    return {s, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    local r = table.concat(t)\n    return {r, r == r:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local str = table.concat(t)\n    local\
    \ palindrome = true\n    for i = 1, #str / 2 do\n        if str:sub(i, i) ~= str:sub(#str\
    \ - i + 1, #str - i + 1) then\n            palindrome = false\n            break\n\
    \        end\n    end\n    return {str, palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    return\
    \ {res, res == res:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local res = table.concat(t)\n    return {res,\
    \ res == res:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local res = table.concat(t)\n  return {res, res == res:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  return {res, res == res:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    return\
    \ {res, res == res:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7jwg8fe.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpl7jwg8fe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s1 = table.concat(t)\n    local s2\
    \ = s1:reverse()\n    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    return {table.concat(t), t[1] == t[#t]}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    if not\
    \ c:find(s:sub(i, i)) then\n      t[#t + 1] = s:sub(i, i)\n    end\n  end\n  local\
    \ res = table.concat(t)\n  return {res, res == res:reverse()}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  return {res, res == res:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  return {result, result ==\
    \ result:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  return {table.concat(t), t[1] == t[#t]}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s1 = table.concat(t)\n    local s2\
    \ = s1:reverse()\n    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local s1 = table.concat(t)\n  local s2 = string.reverse(s1)\n\
    \  return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s1 = table.concat(t)\n    local s2\
    \ = string.reverse(s1)\n    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local r = table.concat(t)\n  local is_palindrome = r == string.reverse(r)\n\
    \  return {r, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~= res:sub(#res\
    \ - i + 1, #res - i + 1) then\n            palindrome = false\n            break\n\
    \        end\n    end\n    return {res, palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = res == string.reverse(res)\n    return {res, is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    local p\
    \ = r == r:reverse()\n    return {r, p}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == string.reverse(res)\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~= res:sub(#res\
    \ - i + 1, #res - i + 1) then\n            palindrome = false\n            break\n\
    \        end\n    end\n    return {res, palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s1 = table.concat(t)\n    local s2\
    \ = s1:reverse()\n    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local res = {}\n    local t = {}\n    for\
    \ i = 1, #s do\n        t[i] = s:sub(i, i)\n    end\n    for i = 1, #t do\n  \
    \      local flag = false\n        for j = 1, #c do\n            if t[i] == c:sub(j,\
    \ j) then\n                flag = true\n                break\n            end\n\
    \        end\n        if not flag then\n            table.insert(res, t[i])\n\
    \        end\n    end\n    local str = table.concat(res)\n    local flag = true\n\
    \    for i = 1, #str / 2 do\n        if str:sub(i, i) ~= str:sub(#str - i + 1,\
    \ #str - i + 1) then\n            flag = false\n            break\n        end\n\
    \    end\n    return {str, flag}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s1 = table.concat(t)\n    local s2\
    \ = s1:reverse()\n    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local result = table.concat(t)\n  local is_palindrome = result == result:reverse()\n\
    \  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s1 = table.concat(t)\n    local s2\
    \ = s1:reverse()\n    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    local p\
    \ = r == r:reverse()\n    return {r, p}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == string.reverse(res)\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~=\
    \ res:sub(#res - i + 1, #res - i + 1) then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return {res, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local result = {}\n    for i = 1, #s do\n\
    \        if not c:find(s:sub(i, i)) then\n            table.insert(result, s:sub(i,\
    \ i))\n        end\n    end\n    local result_string = table.concat(result)\n\
    \    local is_palindrome = true\n    for i = 1, #result_string / 2 do\n      \
    \  if result_string:sub(i, i) ~= result_string:sub(#result_string - i + 1, #result_string\
    \ - i + 1) then\n            is_palindrome = false\n            break\n      \
    \  end\n    end\n    return {result_string, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local res = {}\n    for i = 1, #s do\n  \
    \      local found = false\n        for j = 1, #c do\n            if s[i] == c[j]\
    \ then\n                found = true\n                break\n            end\n\
    \        end\n        if not found then\n            res[#res + 1] = s[i]\n  \
    \      end\n    end\n    local is_palindrome = true\n    for i = 1, #res / 2 do\n\
    \        if res[i] ~= res[#res - i + 1] then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return {table.concat(res), is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptznljce7.lua:40:\
    \ expected: {\"bcd\", false}\nactual: {\"\", true}\nstack traceback:\n\t/tmp/tmptznljce7.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = true\n    for i = 1, #result / 2 do\n        if result:sub(i, i) ~= result:sub(#result\
    \ - i + 1, #result - i + 1) then\n            is_palindrome = false\n        \
    \    break\n        end\n    end\n    return {result, is_palindrome}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  return {res, res == res:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == result:reverse()\n    return {result, is_palindrome}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == result:reverse()\n    return {result, is_palindrome}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if not c:find(c) then\n      t[#t + 1] = c\n    end\n \
    \ end\n  local s = table.concat(t)\n  return {s, s == s:reverse()}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjiw17lmz.lua:28:\
    \ expected: {\"bcd\", false}\nactual: {\"\", true}\nstack traceback:\n\t/tmp/tmpjiw17lmz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s1 = table.concat(t)\n    local s2\
    \ = s1:reverse()\n    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    return {r,\
    \ r == r:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    local r = table.concat(t)\n    return {r, r == r:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = true\n    for i = 1, #result / 2 do\n        if result:sub(i, i) ~= result:sub(#result\
    \ - i + 1, #result - i + 1) then\n            is_palindrome = false\n        \
    \    break\n        end\n    end\n    return {result, is_palindrome}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    return {r,\
    \ r == r:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local res = table.concat(t)\n  local is_palindrome = res ==\
    \ string.reverse(res)\n  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    local r = table.concat(t)\n    return {r, r == r:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local result = table.concat(t)\n    local\
    \ is_palindrome = result == result:reverse()\n    return {result, is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local str = table.concat(t)\n  return {str, str == str:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    return {r,\
    \ r == r:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local result = {}\n    for i = 1, #s do\n\
    \        local char = s:sub(i, i)\n        if c:find(char) == nil then\n     \
    \       table.insert(result, char)\n        end\n    end\n    local result_str\
    \ = table.concat(result)\n    local is_palindrome = true\n    for i = 1, #result_str\
    \ / 2 do\n        if result_str:sub(i, i) ~= result_str:sub(#result_str - i +\
    \ 1, #result_str - i + 1) then\n            is_palindrome = false\n          \
    \  break\n        end\n    end\n    return {result_str, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == res:reverse()\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == res:reverse()\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local result = {}\n  for i = 1, #s do\n   \
    \ local char = s:sub(i, i)\n    if not c:find(char) then\n      table.insert(result,\
    \ char)\n    end\n  end\n  local result_string = table.concat(result)\n  local\
    \ is_palindrome = result_string == string.reverse(result_string)\n  return {result_string,\
    \ is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local result = {}\n    for i = 1, #s do\n\
    \        local char = s:sub(i, i)\n        if not c:find(char) then\n        \
    \    table.insert(result, char)\n        end\n    end\n    return {table.concat(result),\
    \ table.concat(result) == table.concat(result, '', #result, 1, -1)}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21rb3cpi.lua:29:\
    \ expected: {\"cdedc\", true}\nactual: {\"cdedc\", false}\nstack traceback:\n\t\
    /tmp/tmp21rb3cpi.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == result:reverse()\n    return {result, is_palindrome}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == res:reverse()\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local palindrome = true\n\
    \  for i = 1, #result / 2 do\n    if result:sub(i, i) ~= result:sub(#result -\
    \ i + 1, #result - i + 1) then\n      palindrome = false\n      break\n    end\n\
    \  end\n  return {result, palindrome}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = res == string.reverse(res)\n    return {res, is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local result = table.concat(t)\n  local is_palindrome = result == result:reverse()\n\
    \  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  return {res, res == res:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == string.reverse(res)\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == result:reverse()\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~=\
    \ res:sub(#res - i + 1, #res - i + 1) then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return {res, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local result = {}\n    local str = ''\n \
    \   local check = true\n    for i = 1, #s do\n        local flag = false\n   \
    \     for j = 1, #c do\n            if s:sub(i, i) == c:sub(j, j) then\n     \
    \           flag = true\n                break\n            end\n        end\n\
    \        if not flag then\n            str = str .. s:sub(i, i)\n        end\n\
    \    end\n    for i = 1, #str / 2 do\n        if str:sub(i, i) ~= str:sub(#str\
    \ - i + 1, #str - i + 1) then\n            check = false\n            break\n\
    \        end\n    end\n    result[1] = str\n    result[2] = check\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n\
    \    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik',\
    \ false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba', 'v'),\
    \ {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local result = table.concat(t)\n    local\
    \ is_palindrome = result == result:reverse()\n    return {result, is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    local res = table.concat(t)\n    return {res, res ==\
    \ res:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == string.reverse(res)\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    if not\
    \ c:find(s:sub(i, i)) then\n      t[#t + 1] = s:sub(i, i)\n    end\n  end\n  return\
    \ {table.concat(t), t[1] == t[#t]}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_e5qqg6.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpj_e5qqg6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == string.reverse(res)\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  return {result, result ==\
    \ result:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    local r = table.concat(t)\n    local p = true\n    for\
    \ i = 1, #r / 2 do\n        if r:sub(i, i) ~= r:sub(#r - i + 1, #r - i + 1) then\n\
    \            p = false\n            break\n        end\n    end\n    return {r,\
    \ p}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n\
    \    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik',\
    \ false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba', 'v'),\
    \ {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local found = false\n        for j = 1, #c do\n            if s:sub(i, i)\
    \ == c:sub(j, j) then\n                found = true\n                break\n \
    \           end\n        end\n        if not found then\n            t[#t + 1]\
    \ = s:sub(i, i)\n        end\n    end\n    local result = table.concat(t)\n  \
    \  local is_palindrome = true\n    for i = 1, #result / 2 do\n        if result:sub(i,\
    \ i) ~= result:sub(#result - i + 1, #result - i + 1) then\n            is_palindrome\
    \ = false\n            break\n        end\n    end\n    return {result, is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local palindrome = result\
    \ == string.reverse(result)\n  return {result, palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  return {result, result ==\
    \ result:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    return {r,\
    \ r == r:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    local r = table.concat(t)\n    return {r, r == r:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  return {result, result ==\
    \ result:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ci = s:sub(i, i)\n        if not c:find(ci) then\n            t[#t\
    \ + 1] = ci\n        end\n    end\n    local r = table.concat(t)\n    local p\
    \ = true\n    for i = 1, #r / 2 do\n        if r:sub(i, i) ~= r:sub(#r - i + 1,\
    \ #r - i + 1) then\n            p = false\n            break\n        end\n  \
    \  end\n    return {r, p}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  return {res, res == res:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    return {r,\
    \ r == r:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~=\
    \ res:sub(#res - i + 1, #res - i + 1) then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return {res, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    return {r,\
    \ r == r:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  return {result, result ==\
    \ result:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local result = {}\n    for i = 1, #s do\n\
    \        local char = s:sub(i, i)\n        if not c:find(char) then\n        \
    \    table.insert(result, char)\n        end\n    end\n    local result_str =\
    \ table.concat(result)\n    return {result_str, result_str == result_str:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s = table.concat(t)\n    local is_palindrome\
    \ = true\n    for i = 1, #s / 2 do\n        if s:sub(i, i) ~= s:sub(#s - i + 1,\
    \ #s - i + 1) then\n            is_palindrome = false\n            break\n   \
    \     end\n    end\n    return {s, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~=\
    \ res:sub(#res - i + 1, #res - i + 1) then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return {res, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s = table.concat(t)\n    local is_palindrome\
    \ = true\n    for i = 1, #s / 2 do\n        if s:sub(i, i) ~= s:sub(#s - i + 1,\
    \ #s - i + 1) then\n            is_palindrome = false\n            break\n   \
    \     end\n    end\n    return {s, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local r = table.concat(t)\n  return {r, r == r:reverse()}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local result = {}\n    for i = 1, #s do\n\
    \        local char = s:sub(i, i)\n        if not c:find(char) then\n        \
    \    table.insert(result, char)\n        end\n    end\n    local result_str =\
    \ table.concat(result)\n    local is_palindrome = result_str == string.reverse(result_str)\n\
    \    return {result_str, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local r = table.concat(t)\n  return {r, r == r:reverse()}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local r = table.concat(t)\n  return {r, r == r:reverse()}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  return {result, result ==\
    \ result:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local palindrome = true\n  for i = 1,\
    \ #res / 2 do\n    if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1) then\n\
    \      palindrome = false\n      break\n    end\n  end\n  return {res, palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == res:reverse()\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    return {r,\
    \ r == r:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == res:reverse()\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pl9nfc1.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmp8pl9nfc1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s1 = table.concat(t)\n    local s2\
    \ = s1:reverse()\n    return {s1, s1 == s2}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == res:reverse()\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if c:find(ch) == nil then\n            table.insert(t,\
    \ ch)\n        end\n    end\n    local r = table.concat(t)\n    local p = r ==\
    \ string.reverse(r)\n    return {r, p}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == result:reverse()\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == result:reverse()\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = res == string.reverse(res)\n    return {res, is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local res = table.concat(t)\n  local palindrome = res == string.reverse(res)\n\
    \  return {res, palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  return {result, result ==\
    \ result:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i, i) ~=\
    \ res:sub(#res - i + 1, #res - i + 1) then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return {res, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local ss = table.concat(t)\n  return {ss, ss == ss:reverse()}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local check\
    \ = result == string.reverse(result)\n    return {result, check}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == string.reverse(res)\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ found = false\n    for j = 1, #c do\n      if s:sub(i, i) == c:sub(j, j) then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      t[#t + 1] = s:sub(i, i)\n    end\n  end\n  local r = table.concat(t)\n\
    \  local p = true\n  for i = 1, #r / 2 do\n    if r:sub(i, i) ~= r:sub(#r - i\
    \ + 1, #r - i + 1) then\n      p = false\n      break\n    end\n  end\n  return\
    \ {r, p}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n\
    \    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik',\
    \ false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba', 'v'),\
    \ {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphmujd9y.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpphmujd9y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local r = table.concat(t)\n    return {r,\
    \ r == r:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    if not c:find(ch) then\n      t[#t + 1] = ch\n    end\n\
    \  end\n  local res = table.concat(t)\n  local is_palindrome = res == string.reverse(res)\n\
    \  return {res, is_palindrome}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if not c:find(char) then\n            table.insert(t,\
    \ char)\n        end\n    end\n    local result = table.concat(t)\n    local is_palindrome\
    \ = result == string.reverse(result)\n    return {result, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = res == res:reverse()\n    return {res, is_palindrome}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      t[#t + 1] = char\n \
    \   end\n  end\n  local result = table.concat(t)\n  local is_palindrome = result\
    \ == string.reverse(result)\n  return {result, is_palindrome}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = res == string.reverse(res)\n    return {res, is_palindrome}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
