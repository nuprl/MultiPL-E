---
name: HumanEval_104_unique_digits
language: lua
prompt: "-- Given a table of positive integers x. return a sorted table of all \n--
  elements that hasn't any even digit.\n-- Note: Returned table should be sorted in
  increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n--
  {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function unique_digits(x)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = unique_digits
      lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})
      lu.assertEquals(candidate({152, 323, 1422, 10}), {})
      lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})
      lu.assertEquals(candidate({135, 103, 31}), {31, 135})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local res = {}
    for _, v in ipairs(x) do
      local has_even = false
      while v > 0 do
        local d = v % 10
        if d % 2 == 0 then
          has_even = true
          break
        end
        v = math.floor(v / 10)
      end
      if not has_even then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local flag = true
          while num > 0 do
              if num % 2 == 0 then
                  flag = false
                  break
              end
              num = math.floor(num / 10)
          end
          if flag then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          local n = x[i]
          while n > 0 do
              if n % 2 == 0 then
                  has_even = true
                  break
              end
              n = math.floor(n / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      for i, v in ipairs(x) do
          local even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  even = true
                  break
              end
          end
          if not even then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      for i = 1, #x do
          local s = tostring(x[i])
          local has_even = false
          for j = 1, #s do
              if tonumber(s:sub(j, j)) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(t, x[i])
          end
      end
      table.sort(t)
      return t
  end
- |2-
    local result = {}
    for _, v in ipairs(x) do
      local has_even = false
      while v > 0 do
        local d = v % 10
        if d % 2 == 0 then
          has_even = true
          break
        end
        v = (v - d) / 10
      end
      if not has_even then
        table.insert(result, v)
      end
    end
    table.sort(result)
    return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local flag = true
          for i = 1, #tostring(v) do
              if tonumber(tostring(v):sub(i, i)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local is_unique = true
          for d in tostring(v):gmatch("%d") do
              if tonumber(d) % 2 == 0 then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          local num = x[i]
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for i = 1, #x do
          local flag = true
          for j = 1, #x[i] do
              if (x[i] % 2 == 0) then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, x[i])
          end
      end
      return res
  end
- |2-
      local function is_unique(n)
          while n > 0 do
              if n % 2 == 0 then
                  return false
              end
              n = math.floor(n / 10)
          end
          return true
      end
      local res = {}
      for _, v in ipairs(x) do
          if is_unique(v) then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              if (v % 10) % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local t = {}
      for _, v in ipairs(x) do
          local is_unique = true
          for d in tostring(v):gmatch("%d") do
              if tonumber(d) % 2 == 0 then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local flag = true
          for i = 1, #tostring(v) do
              if (tonumber(tostring(v):sub(i, i)) % 2 == 0) then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
    local result = {}
    for i = 1, #x do
      local has_even = false
      local number = x[i]
      while number > 0 do
        local digit = number % 10
        if digit % 2 == 0 then
          has_even = true
          break
        end
        number = math.floor(number / 10)
      end
      if not has_even then
        table.insert(result, x[i])
      end
    end
    table.sort(result)
    return result
  end
- |2-
      local t = {}
      for i, v in ipairs(x) do
          local flag = true
          for j = 1, #tostring(v) do
              if tonumber(tostring(v):sub(j, j)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          if not string.find(tostring(v), '[02468]') then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local unique = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(unique, v)
          end
      end
      table.sort(unique)
      return unique
  end
- |2-
      local function is_unique(n)
          while n > 0 do
              if n % 2 == 0 then
                  return false
              end
              n = math.floor(n / 10)
          end
          return true
      end
      local res = {}
      for _, v in ipairs(x) do
          if is_unique(v) then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local is_unique = true
          local str = tostring(v)
          for i = 1, #str do
              if tonumber(str:sub(i, i)) % 2 == 0 then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          local is_unique = true
          for j = 1, #x[i] do
              if x[i][j] % 2 == 0 then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local digits = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(digits, v)
          end
      end
      table.sort(digits)
      return digits
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          if not v:find("%d*[02468]%d*") then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for i = 1, #x do
          local has_even = false
          for j = 1, #tostring(x[i]) do
              if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local is_unique = true
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch("%d") do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local flag = true
          while num > 0 do
              if num % 2 == 0 then
                  flag = false
                  break
              end
              num = math.floor(num / 10)
          end
          if flag then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local is_unique = true
          local num = x[i]
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  is_unique = false
                  break
              end
              num = math.floor(num / 10)
          end
          if is_unique then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local function is_unique(n)
          while n > 0 do
              if n % 2 == 0 then
                  return false
              end
              n = math.floor(n / 10)
          end
          return true
      end
      local result = {}
      for _, v in ipairs(x) do
          if is_unique(v) then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local ret = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(ret, v)
          end
      end
      table.sort(ret)
      return ret
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              if num % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for i, v in ipairs(x) do
          local flag = true
          local tmp = v
          while tmp > 0 do
              if tmp % 2 == 0 then
                  flag = false
                  break
              end
              tmp = math.floor(tmp / 10)
          end
          if flag then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          for c in tostring(v):gmatch("%d") do
              if tonumber(c) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          if not has_even_digit(x[i]) then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch("%d") do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
    local t = {}
    for _, v in ipairs(x) do
      local even = false
      for d in tostring(v):gmatch('%d') do
        if tonumber(d) % 2 == 0 then
          even = true
          break
        end
      end
      if not even then
        table.insert(t, v)
      end
    end
    table.sort(t)
    return t
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
    local res = {}
    for _, v in ipairs(x) do
      local has_even = false
      while v > 0 do
        local d = v % 10
        if d % 2 == 0 then
          has_even = true
          break
        end
        v = math.floor(v / 10)
      end
      if not has_even then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      for _, v in ipairs(x) do
          local flag = true
          for i = 1, #tostring(v) do
              if tonumber(tostring(v):sub(i, i)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(x) do
      local has_even = false
      while v > 0 do
        local d = v % 10
        if d % 2 == 0 then
          has_even = true
          break
        end
        v = math.floor(v / 10)
      end
      if not has_even then
        table.insert(result, v)
      end
    end
    table.sort(result)
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local str = tostring(x[i])
          local has_even = false
          for j = 1, #str do
              if tonumber(str:sub(j, j)) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local is_unique = true
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
    local result = {}
    for _, v in ipairs(x) do
      local has_even = false
      for c in tostring(v):gmatch("%d") do
        if tonumber(c) % 2 == 0 then
          has_even = true
          break
        end
      end
      if not has_even then
        table.insert(result, v)
      end
    end
    table.sort(result)
    return result
  end
- |2-
    local t = {}
    for i = 1, #x do
      local n = x[i]
      local even = false
      while n > 0 do
        local d = n % 10
        if d % 2 == 0 then
          even = true
          break
        end
        n = math.floor(n / 10)
      end
      if not even then
        t[#t + 1] = x[i]
      end
    end
    table.sort(t)
    return t
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = (v - d) / 10
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local function is_unique(n)
          while n > 0 do
              if n % 2 == 0 then
                  return false
              end
              n = math.floor(n / 10)
          end
          return true
      end
      local t = {}
      for _, v in ipairs(x) do
          if is_unique(v) then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for i = 1, #x do
          local is_unique = true
          local n = x[i]
          while n > 0 do
              local digit = n % 10
              if digit % 2 == 0 then
                  is_unique = false
                  break
              end
              n = math.floor(n / 10)
          end
          if is_unique then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- "\tlocal t = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal s = tostring(v)\n\t\tlocal
  has_even = false\n\t\tfor i = 1, #s do\n\t\t\tif tonumber(s:sub(i, i)) % 2 == 0
  then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not has_even
  then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend"
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      for i = 1, #x do
          local n = x[i]
          local has_even_digit = false
          while n > 0 do
              local d = n % 10
              if d % 2 == 0 then
                  has_even_digit = true
                  break
              end
              n = (n - d) / 10
          end
          if not has_even_digit then
              t[#t + 1] = x[i]
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local is_unique = true
          local s = tostring(v)
          for i = 1, #s do
              if tonumber(s:sub(i, i)) % 2 == 0 then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i, v in ipairs(x) do
          local is_unique = true
          for j = 1, #tostring(v) do
              if (tonumber(tostring(v):sub(j, j)) % 2 == 0) then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(x) do
      local has_even_digit = false
      local v_str = tostring(v)
      for i = 1, #v_str do
        local digit = tonumber(v_str:sub(i, i))
        if digit % 2 == 0 then
          has_even_digit = true
          break
        end
      end
      if not has_even_digit then
        table.insert(result, v)
      end
    end
    table.sort(result)
    return result
  end
- |2-
      local result = {}
      for i, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              if (v % 10) % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          if not v:find("%d*[02468]%d*") then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local t = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
    local t = {}
    for i = 1, #x do
      local n = x[i]
      local has_even = false
      while n > 0 do
        local d = n % 10
        if d % 2 == 0 then
          has_even = true
          break
        end
        n = math.floor(n / 10)
      end
      if not has_even then
        t[#t + 1] = x[i]
      end
    end
    table.sort(t)
    return t
  end
- |2-
      local t = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
    local res = {}
    for i = 1, #x do
      local has_even = false
      for j = 1, #tostring(x[i]) do
        if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then
          has_even = true
          break
        end
      end
      if not has_even then
        table.insert(res, x[i])
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          for j = 1, #tostring(x[i]) do
              if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local flag = true
          for i = 1, #tostring(v) do
              if tonumber(tostring(v):sub(i, i)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(x) do
      local has_even = false
      while v > 0 do
        local d = v % 10
        if d % 2 == 0 then
          has_even = true
          break
        end
        v = math.floor(v / 10)
      end
      if not has_even then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local n = x[i]
          local has_even = false
          while n > 0 do
              local digit = n % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              n = math.floor(n / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i,v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch("%d") do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          for j = 1, #tostring(x[i]) do
              if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local function has_even_digit(n)
          while n > 0 do
              if n % 2 == 0 then
                  return true
              end
              n = math.floor(n / 10)
          end
          return false
      end
      local result = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for c in tostring(v):gmatch('.') do
              if tonumber(c) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      for i, v in ipairs(x) do
          local has_even = false
          for c in tostring(v):gmatch("%d") do
              if tonumber(c) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      for i, v in ipairs(x) do
          local flag = true
          for j = 1, #tostring(v) do
              if (tonumber(tostring(v):sub(j, j)) % 2 == 0) then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
    local result = {}
    for i = 1, #x do
      local has_even = false
      local num = x[i]
      while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
          has_even = true
          break
        end
        num = math.floor(num / 10)
      end
      if not has_even then
        table.insert(result, x[i])
      end
    end
    table.sort(result)
    return result
  end
- |2-
    local res = {}
    for _, v in ipairs(x) do
      local even = false
      while v > 0 do
        if (v % 10) % 2 == 0 then
          even = true
          break
        end
        v = math.floor(v / 10)
      end
      if not even then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local t = {}
      for i = 1, #x do
          local s = tostring(x[i])
          local has_even = false
          for j = 1, #s do
              if tonumber(s:sub(j, j)) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(t, x[i])
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      for i = 1, #x do
          local s = tostring(x[i])
          local has_even = false
          for j = 1, #s do
              if tonumber(s:sub(j, j)) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(t, x[i])
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local flag = true
          while num > 0 do
              if num % 2 == 0 then
                  flag = false
                  break
              end
              num = math.floor(num / 10)
          end
          if flag then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
    local result = {}
    for i, v in ipairs(x) do
      if not has_even_digit(v) then
        table.insert(result, v)
      end
    end
    table.sort(result)
    return result
  end
- |2-
    local result = {}
    for _, v in ipairs(x) do
      local is_unique = true
      for c in tostring(v):gmatch("%d") do
        if tonumber(c) % 2 == 0 then
          is_unique = false
          break
        end
      end
      if is_unique then
        table.insert(result, v)
      end
    end
    table.sort(result)
    return result
  end
- "\tlocal res = {}\n\tfor i = 1, #x do\n\t\tlocal has_even = false\n\t\tlocal num
  = x[i]\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit % 2 ==
  0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num
  / 10)\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(res, x[i])\n\t\tend\n\tend\n\ttable.sort(res)\n\treturn
  res\nend"
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          for j = 1, #tostring(x[i]) do
              if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for i = 1, #x do
          local n = x[i]
          local has_even = false
          while n > 0 do
              local d = n % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              n = math.floor(n / 10)
          end
          if not has_even then
              res[#res + 1] = x[i]
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local is_unique = true
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  is_unique = false
                  break
              end
              num = math.floor(num / 10)
          end
          if is_unique then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch("%d") do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local function has_even_digit(n)
          while n > 0 do
              if n % 2 == 0 then
                  return true
              end
              n = math.floor(n / 10)
          end
          return false
      end
      local res = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              if num % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
    local res = {}
    for i = 1, #x do
      local num = x[i]
      local is_unique = true
      while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
          is_unique = false
          break
        end
        num = math.floor(num / 10)
      end
      if is_unique then
        table.insert(res, x[i])
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- "\tlocal t = {}\n\tfor i, v in ipairs(x) do\n\t\tlocal s = tostring(v)\n\t\tlocal
  flag = true\n\t\tfor j = 1, #s do\n\t\t\tif tonumber(s:sub(j, j)) % 2 == 0 then\n\t\t\t\tflag
  = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(t,
  v)\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend"
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(x) do
      local has_even = false
      for d in tostring(v):gmatch("%d") do
        if tonumber(d) % 2 == 0 then
          has_even = true
          break
        end
      end
      if not has_even then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local function has_even_digit(n)
          while n > 0 do
              if n % 2 == 0 then
                  return true
              end
              n = math.floor(n / 10)
          end
          return false
      end
      local res = {}
      for i = 1, #x do
          if not has_even_digit(x[i]) then
              res[#res + 1] = x[i]
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch("%d") do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local flag = true
          while num > 0 do
              if num % 2 == 0 then
                  flag = false
                  break
              end
              num = math.floor(num / 10)
          end
          if flag then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(x) do
      local is_unique = true
      for d in tostring(v):gmatch("%d") do
        if d % 2 == 0 then
          is_unique = false
          break
        end
      end
      if is_unique then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
    local res = {}
    for _, v in ipairs(x) do
      local has_even = false
      while v > 0 do
        local d = v % 10
        if d % 2 == 0 then
          has_even = true
          break
        end
        v = math.floor(v / 10)
      end
      if not has_even then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
    local result = {}
    for _, v in ipairs(x) do
      if not string.find(tostring(v), '[02468]') then
        table.insert(result, v)
      end
    end
    table.sort(result)
    return result
  end
- "\tlocal t = {}\n\tfor i = 1, #x do\n\t\tlocal s = tostring(x[i])\n\t\tlocal flag
  = true\n\t\tfor j = 1, #s do\n\t\t\tif tonumber(s:sub(j, j)) % 2 == 0 then\n\t\t\t\tflag
  = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(t,
  x[i])\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend"
- |2-
      local res = {}
      for i = 1, #x do
          local str = tostring(x[i])
          local is_unique = true
          for j = 1, #str do
              if tonumber(str:sub(j, j)) % 2 == 0 then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for i, v in ipairs(x) do
          local flag = true
          for j = 1, #tostring(v) do
              if tonumber(tostring(v):sub(j, j)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local flag = true
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local flag = true
          for j = 1, #tostring(x[i]) do
              if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          local num = x[i]
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local is_unique = true
          for i = 1, #tostring(v) do
              if (tonumber(tostring(v):sub(i, i)) % 2 == 0) then
                  is_unique = false
                  break
              end
          end
          if is_unique then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local flag = true
          for i = 1, #tostring(v) do
              if tonumber(tostring(v):sub(i, i)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          local is_unique = true
          local num = x[i]
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  is_unique = false
                  break
              end
              num = math.floor(num / 10)
          end
          if is_unique then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local flag = true
          for i = 1, #tostring(v) do
              if tonumber(tostring(v):sub(i, i)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          local num = x[i]
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, _)
          end
      end
      return result
  end
- |2-
    local digits = {}
    for i = 1, #x do
      local num = x[i]
      local has_even = false
      while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
          has_even = true
          break
        end
        num = math.floor(num / 10)
      end
      if not has_even then
        table.insert(digits, x[i])
      end
    end
    table.sort(digits)
    return digits
  end
- |2-
    local res = {}
    for i, v in ipairs(x) do
      if not has_even_digit(v) then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              if (num % 10) % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch("%d") do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              if (v % 10) % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local function has_even_digit(n)
          while n > 0 do
              if n % 2 == 0 then
                  return true
              end
              n = math.floor(n / 10)
          end
          return false
      end
      local result = {}
      for _, v in ipairs(x) do
          if not has_even_digit(v) then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local unique = true
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  unique = false
                  break
              end
          end
          if unique then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(x) do
      if not v:find("[02468]") then
        table.insert(result, v)
      end
    end
    table.sort(result)
    return result
  end
- |2-
    local res = {}
    for _, v in ipairs(x) do
      local unique = true
      for d in tostring(v):gmatch('%d') do
        if tonumber(d) % 2 == 0 then
          unique = false
          break
        end
      end
      if unique then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local num = x[i]
          local unique = true
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  unique = false
                  break
              end
              num = (num - digit) / 10
          end
          if unique then
              res[#res + 1] = x[i]
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local t = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local has_even = false
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for i = 1, #x do
          local flag = true
          for j = 1, #tostring(x[i]) do
              if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local t = {}
      for _, v in ipairs(x) do
          local even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  even = true
                  break
              end
          end
          if not even then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local is_unique = true
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  is_unique = false
                  break
              end
              num = math.floor(num / 10)
          end
          if is_unique then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          local num = x[i]
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              num = (num - digit) / 10
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local is_unique = true
          local num = x[i]
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  is_unique = false
                  break
              end
              num = math.floor(num / 10)
          end
          if is_unique then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
    local result = {}
    for i = 1, #x do
      local has_even = false
      local num = x[i]
      while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
          has_even = true
          break
        end
        num = math.floor(num / 10)
      end
      if not has_even then
        table.insert(result, x[i])
      end
    end
    table.sort(result)
    return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for i, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              if (v % 10) % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      for i = 1, #x do
          local s = tostring(x[i])
          local flag = true
          for j = 1, #s do
              if tonumber(s:sub(j, j)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(t, x[i])
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          for d in tostring(v):gmatch('%d') do
              if tonumber(d) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local res = {}
      for i = 1, #x do
          if not x[i]:find("%d+") then
              res[#res + 1] = x[i]
          end
      end
      return res
  end
- |2-
      local res = {}
      for i = 1, #x do
          local flag = true
          for j = 1, #tostring(x[i]) do
              if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(x) do
          local flag = true
          for i = 1, #tostring(v) do
              if tonumber(tostring(v):sub(i, i)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(res, v)
          end
      end
      table.sort(res)
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(x) do
      local is_unique = true
      for d in tostring(v):gmatch('%d') do
        if tonumber(d) % 2 == 0 then
          is_unique = false
          break
        end
      end
      if is_unique then
        table.insert(res, v)
      end
    end
    table.sort(res)
    return res
  end
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          for digit in tostring(x[i]):gmatch('%d') do
              if tonumber(digit) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local digit = v % 10
              if digit % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
    local unique_digits = {}
    for i = 1, #x do
      local unique = true
      local num = x[i]
      while num > 0 do
        if num % 2 == 0 then
          unique = false
          break
        end
        num = math.floor(num / 10)
      end
      if unique then
        table.insert(unique_digits, x[i])
      end
    end
    table.sort(unique_digits)
    return unique_digits
  end
- |2-
      local res = {}
      for i = 1, #x do
          local has_even = false
          local num = x[i]
          while num > 0 do
              if num % 2 == 0 then
                  has_even = true
                  break
              end
              num = math.floor(num / 10)
          end
          if not has_even then
              table.insert(res, x[i])
          end
      end
      table.sort(res)
      return res
  end
- |2-
      local t = {}
      for i, v in ipairs(x) do
          local flag = true
          for j = 1, #tostring(v) do
              if tonumber(tostring(v):sub(j, j)) % 2 == 0 then
                  flag = false
                  break
              end
          end
          if flag then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(result, v)
          end
      end
      table.sort(result)
      return result
  end
- |2-
      local t = {}
      for _, v in ipairs(x) do
          local has_even = false
          while v > 0 do
              local d = v % 10
              if d % 2 == 0 then
                  has_even = true
                  break
              end
              v = math.floor(v / 10)
          end
          if not has_even then
              table.insert(t, v)
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local result = {}
      for i = 1, #x do
          local has_even = false
          for j = 1, #tostring(x[i]) do
              if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then
                  has_even = true
                  break
              end
          end
          if not has_even then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
- |2-
    local result = {}
    for _, v in ipairs(x) do
      local has_even = false
      while v > 0 do
        local d = v % 10
        if d % 2 == 0 then
          has_even = true
          break
        end
        v = math.floor(v / 10)
      end
      if not has_even then
        table.insert(result, v)
      end
    end
    table.sort(result)
    return result
  end
- |2-
      local result = {}
      for i = 1, #x do
          local num = x[i]
          local is_unique = true
          while num > 0 do
              local digit = num % 10
              if digit % 2 == 0 then
                  is_unique = false
                  break
              end
              num = math.floor(num / 10)
          end
          if is_unique then
              table.insert(result, x[i])
          end
      end
      table.sort(result)
      return result
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
