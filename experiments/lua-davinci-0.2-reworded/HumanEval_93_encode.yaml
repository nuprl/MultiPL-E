name: HumanEval_93_encode
language: lua
prompt: "-- Write a function that takes a message, and encodes in such a \n-- way\
  \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
  \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
  \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n--\
  \ >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
  \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
  \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
  \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw\
  \ WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for _, v in ipairs(vowels)\
    \ do\n            if char == v then\n                char = vowels[((vowels[v]\
    \ or 0) + 2) % 5 + 1]\n                break\n            end\n        end\n \
    \       encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char == char:upper() then\n \
    \     char = char:lower()\n    else\n      char = char:upper()\n    end\n    for\
    \ j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[j + 2]\n            if next_vowel == nil then\n\
    \                next_vowel = vowels[1]\n            end\n            encoded\
    \ = encoded .. next_vowel\n        else\n            if char == char:upper() then\n\
    \                encoded = encoded .. char:lower()\n            else\n       \
    \         encoded = encoded .. char:upper()\n            end\n        end\n  \
    \  end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    local isVowel = false\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        isVowel = true\n      \
    \  break\n      end\n    end\n    if isVowel then\n      local index = (j + 2)\
    \ % #vowels\n      if index == 0 then\n        index = #vowels\n      end\n  \
    \    char = vowels[index]\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ % #vowels) + 1]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local c = message:sub(i,\
    \ i)\n    local isVowel = false\n    for j = 1, #vowels do\n      if c == vowels[j]\
    \ then\n        isVowel = true\n        break\n      end\n    end\n    if isVowel\
    \ then\n      local index = (c:byte() - 96) % 5 + 1\n      encoded = encoded ..\
    \ vowels[index]\n    else\n      if c:byte() >= 65 and c:byte() <= 90 then\n \
    \       encoded = encoded .. string.char(c:byte() + 32)\n      elseif c:byte()\
    \ >= 97 and c:byte() <= 122 then\n        encoded = encoded .. string.char(c:byte()\
    \ - 32)\n      else\n        encoded = encoded .. c\n      end\n    end\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i, i)\n\
    \        if c:match('%a') then\n            if c:match('%l') then\n          \
    \      c = c:upper()\n            else\n                c = c:lower()\n      \
    \      end\n            for j = 1, #vowels do\n                if c == vowels[j]\
    \ then\n                    c = vowels[(j + 2) % #vowels + 1]\n              \
    \      break\n                end\n            end\n        end\n        encoded\
    \ = encoded .. c\n    end\n    return encoded\nend", "    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char:match('[a-z]') then\n            char = char:upper()\n        elseif char:match('[A-Z]')\
    \ then\n            char = char:lower()\n        end\n        if char:match('[aeiou]')\
    \ then\n            char = char:sub(3, 3)\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local vowels = 'aeiou'\n  local encoded = ''\n  for i = 1, #message do\n  \
    \  local char = message:sub(i, i)\n    local char_lower = char:lower()\n    local\
    \ char_upper = char:upper()\n    local char_index = alphabet:find(char_lower)\n\
    \    if char_index then\n      local char_encoded = ''\n      if vowels:find(char_lower)\
    \ then\n        char_encoded = alphabet:sub(char_index + 2, char_index + 2)\n\
    \      else\n        char_encoded = alphabet:sub(char_index, char_index)\n   \
    \   end\n      if char == char_lower then\n        encoded = encoded .. char_encoded\n\
    \      else\n        encoded = encoded .. char_encoded:upper()\n      end\n  \
    \  else\n      encoded = encoded .. char\n    end\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for _, v in\
    \ ipairs(vowels) do\n            if char == v then\n                is_vowel =\
    \ true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = string.find(vowels, char)\n            if index\
    \ == #vowels then\n                index = 1\n            else\n             \
    \   index = index + 1\n            end\n            char = vowels[index]\n   \
    \     end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % 5 + 1]\n                break\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ % #vowels) + 1]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  -- TODO: implement this function\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char:match('[a-z]') then\n\
    \            char = char:upper()\n        elseif char:match('[A-Z]') then\n  \
    \          char = char:lower()\n        end\n        if char:match('[aeiou]')\
    \ then\n            char = string.char(string.byte(char) + 2)\n        end\n \
    \       encoded = encoded .. char\n    end\n    return encoded\nend", "    --\
    \ TODO: implement this function\nend", "    local encoded = ''\n    for i = 1,\
    \ #message do\n        local char = message:sub(i, i)\n        if char:match('[a-z]')\
    \ then\n            char = char:upper()\n        elseif char:match('[A-Z]') then\n\
    \            char = char:lower()\n        end\n        if char:match('[aeiou]')\
    \ then\n            local index = string.find('aeiou', char)\n            char\
    \ = 'aeiou':sub(index + 2, index + 2)\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[(j % #vowels) + 1]\n           \
    \ encoded = encoded .. next_vowel\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "  local result = {}\n\
    \  for i=1,#message do\n    local char = message:sub(i,i)\n    local char_code\
    \ = string.byte(char)\n    if char_code >= 65 and char_code <= 90 then\n     \
    \ char_code = char_code + 32\n    elseif char_code >= 97 and char_code <= 122\
    \ then\n      char_code = char_code - 32\n    end\n    if char_code == 97 then\n\
    \      char_code = 99\n    elseif char_code == 101 then\n      char_code = 103\n\
    \    elseif char_code == 105 then\n      char_code = 107\n    elseif char_code\
    \ == 111 then\n      char_code = 113\n    elseif char_code == 117 then\n     \
    \ char_code = 119\n    end\n    table.insert(result, string.char(char_code))\n\
    \  end\n  return table.concat(result)\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexof(vowels, char) then\n            local index\
    \ = table.indexof(vowels, char)\n            if index == #vowels then\n      \
    \          char = vowels[1]\n            else\n                char = vowels[index\
    \ + 1]\n            end\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local isVowel = false\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        isVowel = true\n        break\n      end\n    end\n    if isVowel\
    \ then\n      local nextVowel = vowels[(j % #vowels) + 1]\n      encoded = encoded\
    \ .. nextVowel\n    else\n      local isUpper = char == char:upper()\n      if\
    \ isUpper then\n        encoded = encoded .. char:lower()\n      else\n      \
    \  encoded = encoded .. char:upper()\n      end\n    end\n  end\n  return encoded\n\
    end", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('%a') then\n            local is_upper = char:match('%u')\n\
    \            local is_vowel = vowels:find(char:lower())\n            if is_vowel\
    \ then\n                local index = (is_vowel + 2) % #alphabet\n           \
    \     char = alphabet:sub(index, index)\n            end\n            if is_upper\
    \ then\n                char = char:upper()\n            end\n            encoded\
    \ = encoded .. char\n        else\n            encoded = encoded .. char\n   \
    \     end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_char = message:sub(i\
    \ + 1, i + 1)\n            local next_next_char = message:sub(i + 2, i + 2)\n\
    \            if next_char == nil then\n                next_char = ''\n      \
    \      end\n            if next_next_char == nil then\n                next_next_char\
    \ = ''\n            end\n            encoded = encoded .. next_next_char .. next_char\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend", "    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char:match('[aeiou]') then\n\
    \            local index = string.find(vowels, char)\n            encoded = encoded\
    \ .. vowels:sub(index + 2, index + 2)\n        elseif char:match('[AEIOU]') then\n\
    \            local index = string.find(vowels, char:lower())\n            encoded\
    \ = encoded .. vowels:sub(index + 2, index + 2):upper()\n        else\n      \
    \      encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    local lower = char:lower()\n    local is_upper = char == char:upper()\n \
    \   local is_vowel = vowels:find(lower)\n    if is_vowel then\n      local index\
    \ = alphabet:find(lower)\n      local next_index = index + 2\n      if next_index\
    \ > #alphabet then\n        next_index = next_index - #alphabet\n      end\n \
    \     char = alphabet:sub(next_index, next_index)\n    end\n    if is_upper then\n\
    \      char = char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('[%a]') then\n            if char:match('[%a]') then\n\
    \                if char:match('[%a]') then\n                    if char:match('[%a]')\
    \ then\n                        if char:match('[%a]') then\n                 \
    \           if char:match('[%a]') then\n                                if char:match('[%a]')\
    \ then\n                                    if char:match('[%a]') then\n     \
    \                                   if char:match('[%a]') then\n             \
    \                               if char:match('[%a]') then\n                 \
    \                               if char:match('[%a]') then\n                 \
    \                                   if char:match('[%a]') then\n             \
    \                                           if char:match('[%a]') then\n     \
    \                                                       if char:match('[%a]')\
    \ then\n                                                                if char:match('[%a]')\
    \ then\n                                                                    if\
    \ char:match('[%a]') then\n                                                  \
    \                      if char:match('[%a]') then\n                          \
    \                                                  if char:match('[%a]') then\n\
    \                                                                            \
    \    if char:match('[%a]') then\n                                            \
    \                                        if char:match('[%a]') then\n        \
    \                                                                            \
    \    if char:match('[%a]') then\n                                            \
    \                                                if char:match('[%a]') then\n\
    \                                                                            \
    \                    if char:match('[%a]') then\n                            \
    \                                                                        if char:match('[%a]')\
    \ then\n                                                                     \
    \                                   if char:match('[%a]') then\n             \
    \                                                                            \
    \                   if char:match('[%a]') then\n                             \
    \                                                                            \
    \       if char:match('[%a]') then\n                                         \
    \                                                                           if\
    \ char:match('[%a]') then\n                                                  \
    \                                                                      if char:match('[%a]')\
    \ then\n                                                                     \
    \                                                       if char:match('[%a]')\
    \ then\n                ", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = (string.byte(char) - 96) % 5 + 1\n         \
    \   encoded = encoded .. vowels[index]\n        else\n            if char == char:upper()\
    \ then\n                encoded = encoded .. char:lower()\n            else\n\
    \                encoded = encoded .. char:upper()\n            end\n        end\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local pos = string.find(vowels, char)\n            if pos == #vowels then\n\
    \                pos = 1\n            else\n                pos = pos + 1\n  \
    \          end\n            char = vowels[pos]\n        end\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    local is_vowel = false\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        is_vowel = true\n        break\n      end\n    end\n    if is_vowel\
    \ then\n      local index = (string.find(vowels, char) + 2) % #vowels\n      if\
    \ index == 0 then\n        index = #vowels\n      end\n      char = vowels[index]\n\
    \    end\n    encoded = encoded .. char:upper()\n  end\n  return encoded\nend",
  "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels:sub(j, j) then\n                is_vowel = true\n     \
    \           break\n            end\n        end\n        if is_vowel then\n  \
    \          local index = alphabet:find(char)\n            local new_index = index\
    \ + 2\n            if new_index > #alphabet then\n                new_index =\
    \ new_index - #alphabet\n            end\n            encoded = encoded .. alphabet:sub(new_index,\
    \ new_index)\n        else\n            if char == char:upper() then\n       \
    \         encoded = encoded .. char:lower()\n            else\n              \
    \  encoded = encoded .. char:upper()\n            end\n        end\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for _, vowel\
    \ in ipairs(vowels) do\n            if char == vowel then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[((i - 1) % #vowels) + 1]\n     \
    \       encoded = encoded .. next_vowel:upper()\n        else\n            encoded\
    \ = encoded .. char:lower()\n        end\n    end\n    return encoded\nend", " \
    \   local encoded = ''\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.indexOf(vowels, char)\
    \ then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n   \
    \     end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    if table.contains(vowels, char) then\n      local index = table.indexof(vowels,\
    \ char)\n      char = vowels[(index + 2) % #vowels]\n    end\n    encoded = encoded\
    \ .. char\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.indexOf(vowels, char) then\n            char = vowels[(table.indexOf(vowels,\
    \ char) + 2) % 5]\n        end\n        encoded = encoded .. char\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            encoded = encoded\
    \ .. next_vowel\n        else\n            encoded = encoded .. char\n       \
    \ end\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if table.indexof(vowels, char) then\n\
    \      char = vowels[(table.indexof(vowels, char) + 2) % 5]\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexof(vowels, char) then\n            local index\
    \ = table.indexof(vowels, char)\n            if index == #vowels then\n      \
    \          char = vowels[1]\n            else\n                char = vowels[index\
    \ + 1]\n            end\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % 5 + 1]\n                break\n\
    \            end\n        end\n        encoded[#encoded + 1] = char\n    end\n\
    \    return table.concat(encoded)\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        if table.contains(vowels, char) then\n            local index = table.indexof(vowels,\
    \ char)\n            if index == #vowels then\n                char = vowels[1]\n\
    \            else\n                char = vowels[index + 1]\n            end\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if string.byte(char)\
    \ >= 97 and string.byte(char) <= 122 then\n            char = string.char(string.byte(char)\
    \ - 32)\n        elseif string.byte(char) >= 65 and string.byte(char) <= 90 then\n\
    \            char = string.char(string.byte(char) + 32)\n        end\n       \
    \ encoded[#encoded + 1] = char\n    end\n    return table.concat(encoded)\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[(j % #vowels) + 1]\n           \
    \ encoded = encoded .. next_vowel\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        is_vowel = true\n        break\n\
    \      end\n    end\n    if is_vowel then\n      local next_vowel = vowels[j +\
    \ 2]\n      if next_vowel == nil then\n        next_vowel = vowels[1]\n      end\n\
    \      encoded = encoded .. next_vowel\n    else\n      encoded = encoded .. char\n\
    \    end\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        if table.contains(vowels, char) then\n            local index = table.indexof(vowels,\
    \ char)\n            if index == #vowels then\n                index = 1\n   \
    \         else\n                index = index + 1\n            end\n         \
    \   char = vowels[index]\n        end\n        encoded = encoded .. char\n   \
    \ end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[j\
    \ + 2]\n                break\n            end\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local index = (string.byte(char) - 96) %\
    \ 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n      \
    \      if char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local lower = char:lower()\n\
    \        if lower == char then\n            char = char:upper()\n        end\n\
    \        if table.contains(vowels, lower) then\n            local index = table.indexof(vowels,\
    \ lower)\n            char = vowels[(index + 2) % #vowels + 1]\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if vowels:find(char)\
    \ then\n            local index = vowels:find(char)\n            char = vowels:sub(index\
    \ + 2, index + 2)\n        end\n        encoded = encoded .. char\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[j + 2]\n            if next_vowel\
    \ == nil then\n                next_vowel = vowels[1]\n            end\n     \
    \       encoded = encoded .. next_vowel\n        else\n            if char ==\
    \ char:upper() then\n                encoded = encoded .. char:lower()\n     \
    \       else\n                encoded = encoded .. char:upper()\n            end\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        local is_vowel = false\n        for\
    \ j = 1, #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = (string.byte(char) - 96) % 26 + 1\n        \
    \    char = string.char(index + 96)\n        end\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[j + 2]\n            if next_vowel == nil then\n\
    \                next_vowel = vowels[1]\n            end\n            encoded\
    \ = encoded .. next_vowel\n        else\n            if char == char:upper() then\n\
    \                encoded = encoded .. char:lower()\n            else\n       \
    \         encoded = encoded .. char:upper()\n            end\n        end\n  \
    \  end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        if c == c:upper() then\n            c = c:lower()\n        else\n\
    \            c = c:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if c == vowels[j] then\n                c = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local next_vowel\
    \ = vowels[(j % #vowels) + 1]\n            encoded = encoded .. next_vowel\n \
    \       else\n            encoded = encoded .. char\n        end\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[(j % #vowels) + 1]\n           \
    \ encoded = encoded .. next_vowel\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "    local encoded\
    \ = ''\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local char_lower = char:lower()\n\
    \        if char_lower == char then\n            char = char:upper()\n       \
    \ end\n        if table.contains(vowels, char_lower) then\n            local index\
    \ = table.indexof(vowels, char_lower)\n            char = vowels[(index + 2) %\
    \ #vowels + 1]\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local index\
    \ = (string.byte(char) - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n\
    \        else\n            if string.byte(char) >= 65 and string.byte(char) <=\
    \ 90 then\n                encoded = encoded .. string.char(string.byte(char)\
    \ + 32)\n            elseif string.byte(char) >= 97 and string.byte(char) <= 122\
    \ then\n                encoded = encoded .. string.char(string.byte(char) - 32)\n\
    \            else\n                encoded = encoded .. char\n            end\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        local is_vowel = false\n        for\
    \ j = 1, #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = (string.byte(char) - 96) % 5 + 1\n         \
    \   char = vowels[index]\n        end\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded[#encoded + 1] = char\n    end\n    return table.concat(encoded)\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local char_lower = char:lower()\n        local char_upper = char:upper()\n\
    \        local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char_lower == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = j + 2\n            if index > #vowels then\n               \
    \ index = index - #vowels\n            end\n            char = vowels[index]\n\
    \        end\n        if char == char_lower then\n            encoded = encoded\
    \ .. char_upper\n        else\n            encoded = encoded .. char_lower\n \
    \       end\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels do\n \
    \     if char == vowels[j] then\n        is_vowel = true\n        break\n    \
    \  end\n    end\n    if is_vowel then\n      local next_vowel = vowels[(j % #vowels)\
    \ + 1]\n      encoded = encoded .. next_vowel\n    else\n      encoded = encoded\
    \ .. char\n    end\n  end\n  return encoded\nend", "  -- TODO: Implement this\
    \ function\nend", "    local encoded = ''\n    for i = 1, #message do\n      \
    \  local char = message:sub(i, i)\n        if char:match('[a-z]') then\n     \
    \       encoded = encoded .. char:upper()\n        elseif char:match('[A-Z]')\
    \ then\n            encoded = encoded .. char:lower()\n        else\n        \
    \    encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = {'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local char_lower\
    \ = char:lower()\n        local char_upper = char:upper()\n        local char_index\
    \ = nil\n        for j = 1, #alphabet do\n            if alphabet[j] == char_lower\
    \ then\n                char_index = j\n                break\n            end\n\
    \        end\n        if char_index ~= nil then\n            local new_char_index\
    \ = char_index + 2\n            if new_char_index > #alphabet then\n         \
    \       new_char_index = new_char_index - #alphabet\n            end\n       \
    \     local new_char = alphabet[new_char_index]\n            local is_vowel =\
    \ false\n            for j = 1, #vowels do\n                if new_char == vowels[j]\
    \ then\n                    is_vowel = true\n                    break\n     \
    \           end\n            end\n            if is_vowel then\n             \
    \   if char == char_lower then\n                    encoded = encoded .. new_char:upper()\n\
    \                else\n                    encoded = encoded .. new_char:lower()\n\
    \                end\n            else\n                if char == char_lower\
    \ then\n                    encoded = encoded .. new_char\n                else\n\
    \                    encoded = encoded .. new_char:upper()\n                end\n\
    \            end\n        else\n            encoded = encoded .. char\n      \
    \  end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.indexOf(vowels, char) then\n            char = vowels[(table.indexOf(vowels,\
    \ char) + 2) % 5]\n        end\n        encoded = encoded .. char\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  -- TODO: Implement this function\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local c = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if c == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (c:byte() -\
    \ 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            encoded = encoded .. c:lower()\n        end\n    end\n    return\
    \ encoded:upper()\nend", end, "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ letter = message:sub(i, i)\n        if letter == letter:upper() then\n     \
    \       letter = letter:lower()\n        else\n            letter = letter:upper()\n\
    \        end\n        if table.indexOf(vowels, letter) then\n            local\
    \ index = table.indexOf(vowels, letter)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 1\n            end\n            letter = vowels[index]\n        end\n      \
    \  encoded = encoded .. letter\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexof(vowels, char) then\n            char =\
    \ vowels[(table.indexof(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels:sub(j, j) then\n                is_vowel = true\n           \
    \     break\n            end\n        end\n        if is_vowel then\n        \
    \    local index = alphabet:find(char)\n            if index + 2 > #alphabet then\n\
    \                index = index + 2 - #alphabet\n            else\n           \
    \     index = index + 2\n            end\n            char = alphabet:sub(index,\
    \ index)\n        end\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexOf(vowels, char) then\n            char =\
    \ vowels[(table.indexOf(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexof(vowels, char) then\n            char =\
    \ vowels[(table.indexof(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encodedMessage = ''\n  local messageLength\
    \ = string.len(message)\n  local i = 1\n  while i <= messageLength do\n    local\
    \ letter = string.sub(message, i, i)\n    local letterIndex = table.indexOf(alphabet,\
    \ letter)\n    if letterIndex then\n      if letter == string.upper(letter) then\n\
    \        letter = string.lower(letter)\n        letterIndex = table.indexOf(alphabet,\
    \ letter)\n      end\n      if table.indexOf(vowels, letter) then\n        letterIndex\
    \ = letterIndex + 2\n        if letterIndex > #alphabet then\n          letterIndex\
    \ = letterIndex - #alphabet\n        end\n        letter = alphabet[letterIndex]\n\
    \      end\n      if string.sub(message, i, i) == string.upper(string.sub(message,\
    \ i, i)) then\n        letter = string.upper(letter)\n      end\n      encodedMessage\
    \ = encodedMessage .. letter\n    else\n      encodedMessage = encodedMessage\
    \ .. letter\n    end\n    i = i + 1\n  end\n  return encodedMessage\nend", " \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local c = message:sub(i, i)\n    local is_vowel = false\n \
    \   for j = 1, #vowels do\n      if c == vowels[j] then\n        is_vowel = true\n\
    \        break\n      end\n    end\n    if is_vowel then\n      encoded = encoded\
    \ .. string.char(string.byte(c) + 2)\n    else\n      encoded = encoded .. c\n\
    \    end\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        local is_vowel = false\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                is_vowel = true\n\
    \                break\n            end\n        end\n        if is_vowel then\n\
    \            local next_vowel = vowels[(j % #vowels) + 1]\n            encoded\
    \ = encoded .. next_vowel\n        else\n            encoded = encoded .. char\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local isVowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                isVowel =\
    \ true\n                break\n            end\n        end\n        if isVowel\
    \ then\n            local index = 1\n            for j = 1, #alphabet do\n   \
    \             if char == alphabet[j] then\n                    index = j\n   \
    \                 break\n                end\n            end\n            if\
    \ index + 2 > #alphabet then\n                index = index + 2 - #alphabet\n\
    \            else\n                index = index + 2\n            end\n      \
    \      encoded = encoded .. alphabet[index]\n        else\n            if char\
    \ == char:upper() then\n                encoded = encoded .. char:lower()\n  \
    \          else\n                encoded = encoded .. char:upper()\n         \
    \   end\n        end\n    end\n    return encoded\nend", "    local alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local index = alphabet:find(char:lower())\n        if index then\n\
    \            local offset = (index + 2) % #alphabet\n            if offset ==\
    \ 0 then\n                offset = #alphabet\n            end\n            local\
    \ newChar = alphabet:sub(offset, offset)\n            if char:lower() == char\
    \ then\n                encoded = encoded .. newChar\n            else\n     \
    \           encoded = encoded .. newChar:upper()\n            end\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if vowels:find(char) then\n      local\
    \ index = vowels:find(char)\n      char = vowels:sub(index + 2, index + 2)\n \
    \   end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[(j % #vowels)\
    \ + 1]\n            encoded = encoded .. next_vowel\n        else\n          \
    \  if char:match('%a') then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char\n            end\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local c = message:sub(i, i)\n        if c == c:upper() then\n            c =\
    \ c:lower()\n        else\n            c = c:upper()\n        end\n        for\
    \ j = 1, #vowels do\n            if c == vowels[j] then\n                c = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ c\n    end\n    return encoded\nend", "    local encoded = ''\n    for i = 1,\
    \ #message do\n        local char = message:sub(i, i)\n        local lower = char:lower()\n\
    \        if lower == 'a' then\n            encoded = encoded .. 'c'\n        elseif\
    \ lower == 'e' then\n            encoded = encoded .. 'g'\n        elseif lower\
    \ == 'i' then\n            encoded = encoded .. 'k'\n        elseif lower == 'o'\
    \ then\n            encoded = encoded .. 'q'\n        elseif lower == 'u' then\n\
    \            encoded = encoded .. 's'\n        elseif lower == 'y' then\n    \
    \        encoded = encoded .. 'a'\n        elseif lower == 'z' then\n        \
    \    encoded = encoded .. 'b'\n        elseif lower == char then\n           \
    \ encoded = encoded .. lower:upper()\n        else\n            encoded = encoded\
    \ .. lower\n        end\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c == c:upper() then\n  \
    \          c = c:lower()\n        else\n            c = c:upper()\n        end\n\
    \        for j = 1, #vowels do\n            if c == vowels[j] then\n         \
    \       c = vowels[(j + 2) % #vowels]\n            end\n        end\n        encoded\
    \ = encoded .. c\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local isVowel = false\n       \
    \ for j = 1, #vowels do\n            if char == vowels[j] then\n             \
    \   isVowel = true\n                break\n            end\n        end\n    \
    \    if isVowel then\n            local index = string.find(vowels, char)\n  \
    \          if index == #vowels then\n                index = 1\n            else\n\
    \                index = index + 1\n            end\n            encoded = encoded\
    \ .. vowels[index]\n        else\n            if char == char:upper() then\n \
    \               encoded = encoded .. char:lower()\n            else\n        \
    \        encoded = encoded .. char:upper()\n            end\n        end\n   \
    \ end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[j\
    \ + 2]\n                break\n            end\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char:match('[a-z]') then\n            char = char:upper()\n        elseif char:match('[A-Z]')\
    \ then\n            char = char:lower()\n        end\n        if char:match('[aeiou]')\
    \ then\n            char = char:sub(3, 3)\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ c = message:sub(i, i)\n        if c == c:upper() then\n            c = c:lower()\n\
    \        else\n            c = c:upper()\n        end\n        for _, v in ipairs(vowels)\
    \ do\n            if c == v then\n                c = vowels[(vowels[v] + 2) %\
    \ 5]\n            end\n        end\n        encoded = encoded .. c\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.indexof(vowels, char) then\n            char = vowels[(table.indexof(vowels,\
    \ char) + 2) % 5]\n        end\n        encoded = encoded .. char\n    end\n \
    \   return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        char = vowels[(j + 2) % #vowels]\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                index = 1\n            else\n \
    \               index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for _, v in ipairs(vowels)\
    \ do\n            if char == v then\n                local next = v:byte() + 2\n\
    \                if next > 122 then\n                    next = next - 26\n  \
    \              end\n                char = string.char(next)\n            end\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.indexof(vowels,\
    \ char) then\n            char = vowels[(table.indexof(vowels, char) + 2) % 5]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            encoded = encoded\
    \ .. next_vowel\n        else\n            encoded = encoded .. char\n       \
    \ end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[(j % #vowels) + 1]\n           \
    \ encoded = encoded .. next_vowel\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded_message = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    local is_vowel = false\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        is_vowel = true\n     \
    \   break\n      end\n    end\n    if is_vowel then\n      local next_vowel =\
    \ vowels[(j % #vowels) + 1]\n      encoded_message = encoded_message .. next_vowel\n\
    \    else\n      encoded_message = encoded_message .. char\n    end\n  end\n \
    \ return encoded_message:upper()\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        if table.indexOf(vowels, char) then\n            local index = table.indexOf(vowels,\
    \ char)\n            if index == #vowels then\n                index = 0\n   \
    \         end\n            char = vowels[index + 2]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        if vowels:find(char)\
    \ then\n            local index = vowels:find(char)\n            char = vowels:sub(index\
    \ + 2, index + 2)\n        end\n        encoded = encoded .. char\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[(j % #vowels) + 1]\n           \
    \ encoded = encoded .. next_vowel\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "  local encoded =\
    \ ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match('[a-z]')\
    \ then\n      encoded = encoded .. char:upper()\n    elseif char:match('[A-Z]')\
    \ then\n      encoded = encoded .. char:lower()\n    else\n      encoded = encoded\
    \ .. char\n    end\n  end\n  return encoded\nend", "    local encoded = ''\n \
    \   for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char:match('[a-z]') then\n            char = char:upper()\n        elseif char:match('[A-Z]')\
    \ then\n            char = char:lower()\n        end\n        if char:match('[aeiou]')\
    \ then\n            char = char:gsub('[aeiou]', function(c)\n                local\
    \ index = string.find('aeiou', c)\n                return 'aeiou':sub(index +\
    \ 2, index + 2)\n            end)\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local isVowel = false\n        for j = 1, #vowels do\n         \
    \   if char == vowels[j] then\n                isVowel = true\n              \
    \  break\n            end\n        end\n        if isVowel then\n            local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n            if index == 0\
    \ then\n                index = #vowels\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char:upper()\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.indexof(vowels,\
    \ char) then\n            char = vowels[(table.indexof(vowels, char) + 2) % 5]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n\
    \    for i=1, #message do\n        local c = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j=1, #vowels do\n            if c == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (c:byte() -\
    \ 96) % 5 + 1\n            c = vowels[index]\n        end\n        if c:byte()\
    \ >= 97 and c:byte() <= 122 then\n            c = string.char(c:byte() - 32)\n\
    \        elseif c:byte() >= 65 and c:byte() <= 90 then\n            c = string.char(c:byte()\
    \ + 32)\n        end\n        table.insert(encoded, c)\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - 96) % 5 + 1\n            char = vowels[index]\n\
    \        end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        is_vowel = true\n        break\n\
    \      end\n    end\n    if is_vowel then\n      local index = (string.find(vowels,\
    \ char) + 2) % #vowels\n      if index == 0 then\n        index = #vowels\n  \
    \    end\n      char = vowels[index]\n    end\n    encoded = encoded .. char:upper()\n\
    \  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for _, v\
    \ in ipairs(vowels) do\n            if char == v then\n                char =\
    \ vowels[((vowels[v] or 0) + 2) % 5 + 1]\n                break\n            end\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - string.byte('a') + 2) % 26\n            encoded = encoded .. string.char(string.byte('a')\
    \ + index)\n        else\n            if char == char:upper() then\n         \
    \       encoded = encoded .. char:lower()\n            else\n                encoded\
    \ = encoded .. char:upper()\n            end\n        end\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local index\
    \ = string.find(vowels, char)\n            if index == #vowels then\n        \
    \        index = 1\n            else\n                index = index + 1\n    \
    \        end\n            char = vowels[index]\n        end\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % 5 + 1]\n                break\n            end\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c == c:upper() then\n  \
    \          c = c:lower()\n        else\n            c = c:upper()\n        end\n\
    \        if table.contains(vowels, c) then\n            local index = table.indexof(vowels,\
    \ c)\n            if index == #vowels then\n                index = 1\n      \
    \      else\n                index = index + 1\n            end\n            c\
    \ = vowels[index]\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local next_vowel\
    \ = vowels[(j % #vowels) + 1]\n            encoded = encoded .. next_vowel\n \
    \       else\n            encoded = encoded .. char\n        end\n    end\n  \
    \  return encoded\nend", "    -- TODO: Implement\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local next_vowel = vowels[(j % #vowels) +\
    \ 1]\n            encoded = encoded .. next_vowel\n        else\n            if\
    \ char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexof(vowels,\
    \ char) then\n            local index = alphabet:find(char)\n            char\
    \ = alphabet:sub(index + 2, index + 2)\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local vowels = 'aeiou'\n  local encoded = ''\n  for i = 1, #message do\n  \
    \  local char = message:sub(i, i)\n    local index = alphabet:find(char:lower())\n\
    \    if index then\n      local is_vowel = vowels:find(char:lower())\n      if\
    \ is_vowel then\n        index = index + 2\n        if index > #alphabet then\n\
    \          index = index - #alphabet\n        end\n      end\n      if char:lower()\
    \ == char then\n        encoded = encoded .. alphabet:sub(index, index)\n    \
    \  else\n        encoded = encoded .. alphabet:sub(index, index):upper()\n   \
    \   end\n    else\n      encoded = encoded .. char\n    end\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = ((char:byte() - 96) + 2) % 26\n            if index == 0 then\
    \ index = 26 end\n            encoded = encoded .. string.char(index + 96)\n \
    \       else\n            encoded = encoded .. char:upper()\n        end\n   \
    \ end\n    return encoded\nend", "    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char:match('[a-z]') then\n\
    \            char = char:upper()\n        elseif char:match('[A-Z]') then\n  \
    \          char = char:lower()\n        end\n        if char:match('[aeiou]')\
    \ then\n            char = char:sub(3, 3)\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "  local encoded = ''\n  for i =\
    \ 1, #message do\n    local char = message:sub(i, i)\n    if char:match('[aeiou]')\
    \ then\n      local index = string.find(alphabet, char)\n      local new_index\
    \ = index + 2\n      if new_index > #alphabet then\n        new_index = new_index\
    \ - #alphabet\n      end\n      char = alphabet:sub(new_index, new_index)\n  \
    \  end\n    encoded = encoded .. char:upper()\n  end\n  return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local isVowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        isVowel =\
    \ true\n        break\n      end\n    end\n    if isVowel then\n      local nextVowel\
    \ = vowels[j + 2]\n      if not nextVowel then\n        nextVowel = vowels[1]\n\
    \      end\n      encoded = encoded .. nextVowel\n    else\n      encoded = encoded\
    \ .. char:upper()\n    end\n  end\n  return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        local is_vowel = false\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                is_vowel = true\n    \
    \            char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        if not is_vowel then\n            encoded = encoded .. char\n       \
    \ end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % 5 + 1]\n                break\n     \
    \       end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char\
    \ == char:upper() then\n      char = char:lower()\n    else\n      char = char:upper()\n\
    \    end\n    local isVowel = false\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        isVowel = true\n        local nextVowel = vowels[j\
    \ + 2]\n        if not nextVowel then\n          nextVowel = vowels[1]\n     \
    \   end\n        char = nextVowel\n        break\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "    local alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    local vowels = 'AEIOU'\n    local result = ''\n    for i = 1, #message do\n\
    \        local letter = message:sub(i, i)\n        if letter == letter:upper()\
    \ then\n            letter = letter:lower()\n        else\n            letter\
    \ = letter:upper()\n        end\n        if vowels:find(letter) then\n       \
    \     local index = vowels:find(letter)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 1\n            end\n            letter = vowels:sub(index, index)\n        end\n\
    \        result = result .. letter\n    end\n    return result\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    local isVowel = false\n    for j\
    \ = 1, #vowels do\n      if char == vowels[j] then\n        isVowel = true\n \
    \       break\n      end\n    end\n    if isVowel then\n      local index = (string.find(vowels,\
    \ char) + 2) % #vowels\n      if index == 0 then\n        index = #vowels\n  \
    \    end\n      encoded = encoded .. vowels[index]\n    else\n      encoded =\
    \ encoded .. char\n    end\n  end\n  return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if char ==\
    \ 'a' then\n            char = 'c'\n        elseif char == 'e' then\n        \
    \    char = 'g'\n        elseif char == 'i' then\n            char = 'k'\n   \
    \     elseif char == 'o' then\n            char = 'q'\n        elseif char ==\
    \ 'u' then\n            char = 'y'\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "\tlocal encoded = ''\n\tfor i = 1,\
    \ #message do\n\t\tlocal char = message:sub(i, i)\n\t\tif char:find('[a-zA-Z]')\
    \ then\n\t\t\tif char:find('[a-z]') then\n\t\t\t\tchar = char:upper()\n\t\t\t\
    else\n\t\t\t\tchar = char:lower()\n\t\t\tend\n\t\t\tif char:find('[aeiou]') then\n\
    \t\t\t\tchar = char:sub(3, 3)\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. char\n\
    \tend\n\treturn encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[j + 2]\n        break\n      end\n\
    \    end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          isVowel = true\n                break\n            end\n        end\n\
    \        if isVowel then\n            local index = (char:byte() - 96) % 5 + 1\n\
    \            char = vowels[index]\n        end\n        encoded = encoded .. char:upper()\n\
    \    end\n    return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if vowels:find(char) then\n            local index = vowels:find(char)\n\
    \            char = vowels:sub(index + 2, index + 2)\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char:match('%a') then\n            local char_lower = char:lower()\n\
    \            local char_index = alphabet:find(char_lower)\n            if char_index\
    \ then\n                local new_char_index = char_index + 2\n              \
    \  if new_char_index > #alphabet then\n                    new_char_index = new_char_index\
    \ - #alphabet\n                end\n                local new_char = alphabet:sub(new_char_index,\
    \ new_char_index)\n                if vowels:find(new_char) then\n           \
    \         new_char = new_char:upper()\n                end\n                encoded\
    \ = encoded .. new_char\n            end\n        else\n            encoded =\
    \ encoded .. char\n        end\n    end\n    return encoded\nend", "    local\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('%a') then\n            local char_lower = char:lower()\n\
    \            local char_index = alphabet:find(char_lower)\n            if char_index\
    \ then\n                if char_lower:match('[aeiou]') then\n                \
    \    char_index = char_index + 2\n                    if char_index > #alphabet\
    \ then\n                        char_index = char_index - #alphabet\n        \
    \            end\n                end\n                if char:match('%l') then\n\
    \                    char = alphabet:sub(char_index, char_index)\n           \
    \     else\n                    char = alphabet:sub(char_index, char_index):upper()\n\
    \                end\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local lower = char:lower()\n\
    \        local index = alphabet:find(lower)\n        if index then\n         \
    \   if lower == char then\n                -- lowercase\n                local\
    \ new_index = index + 2\n                if new_index > #alphabet then\n     \
    \               new_index = new_index - #alphabet\n                end\n     \
    \           char = alphabet:sub(new_index, new_index)\n            else\n    \
    \            -- uppercase\n                local new_index = index + 2\n     \
    \           if new_index > #alphabet then\n                    new_index = new_index\
    \ - #alphabet\n                end\n                char = alphabet:sub(new_index,\
    \ new_index):upper()\n            end\n            if vowels:find(lower) then\n\
    \                char = char:upper()\n            end\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexOf(vowels, char) then\n            char =\
    \ vowels[(table.indexOf(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local index = (string.byte(char) - 96) %\
    \ 5 + 1\n            char = vowels[index]\n        end\n        if string.byte(char)\
    \ >= 97 and string.byte(char) <= 122 then\n            char = string.char(string.byte(char)\
    \ - 32)\n        elseif string.byte(char) >= 65 and string.byte(char) <= 90 then\n\
    \            char = string.char(string.byte(char) + 32)\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[(j % #vowels)\
    \ + 1]\n            encoded = encoded .. next_vowel\n        else\n          \
    \  if char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend", "    local alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local lower = char:lower()\n        local index = alphabet:find(lower)\n\
    \        if index then\n            local is_vowel = vowels:find(lower)\n    \
    \        if is_vowel then\n                index = index + 2\n               \
    \ if index > #alphabet then\n                    index = index - #alphabet\n \
    \               end\n            end\n            local new_char = alphabet:sub(index,\
    \ index)\n            if char == char:upper() then\n                new_char =\
    \ new_char:upper()\n            end\n            encoded = encoded .. new_char\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local lower = char:lower()\n\
    \        local is_vowel = vowels:find(lower)\n        if is_vowel then\n     \
    \       local index = (is_vowel + 2) % #alphabet\n            if index == 0 then\n\
    \                index = #alphabet\n            end\n            char = alphabet:sub(index,\
    \ index)\n        else\n            char = lower:upper()\n        end\n      \
    \  encoded = encoded .. char\n    end\n    return encoded\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    local isVowel = false\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        isVowel = true\n      \
    \  break\n      end\n    end\n    if isVowel then\n      local nextVowel = vowels[(j\
    \ % #vowels) + 1]\n      encoded = encoded .. nextVowel\n    else\n      encoded\
    \ = encoded .. char\n    end\n  end\n  return encoded:upper()\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local char_lower = char:lower()\n\
    \        if char_lower == char then\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char_lower == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels + 1]\n                break\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i, i)\n\
    \        if c == c:upper() then\n            c = c:lower()\n        else\n   \
    \         c = c:upper()\n        end\n        if table.indexOf(vowels, c) then\n\
    \            c = vowels[(table.indexOf(vowels, c) + 2) % 5 + 1]\n        end\n\
    \        encoded = encoded .. c\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local letter = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if letter == vowels[j] then\n    \
    \            is_vowel = true\n                break\n            end\n       \
    \ end\n        if is_vowel then\n            local index = (string.byte(letter)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if string.byte(letter) >= 65 and string.byte(letter) <= 90 then\n\
    \                encoded = encoded .. string.char(string.byte(letter) + 32)\n\
    \            elseif string.byte(letter) >= 97 and string.byte(letter) <= 122 then\n\
    \                encoded = encoded .. string.char(string.byte(letter) - 32)\n\
    \            else\n                encoded = encoded .. letter\n            end\n\
    \        end\n    end\n    return encoded\nend", end, "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local index = (string.byte(char) - 96) %\
    \ 5 + 1\n            char = vowels[index]\n        end\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            encoded = encoded\
    \ .. next_vowel\n        else\n            encoded = encoded .. char\n       \
    \ end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local lower = char:lower()\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if lower == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (lower:byte()\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]:upper()\n    \
    \    else\n            encoded = encoded .. char:upper()\n        end\n    end\n\
    \    return encoded\nend", "    local encoded = ''\n    for i = 1, #message do\n\
    \        local c = message:sub(i, i)\n        if c == c:upper() then\n       \
    \     c = c:lower()\n        else\n            c = c:upper()\n        end\n  \
    \      if c == 'a' then\n            c = 'c'\n        elseif c == 'e' then\n \
    \           c = 'g'\n        elseif c == 'i' then\n            c = 'k'\n     \
    \   elseif c == 'o' then\n            c = 'q'\n        elseif c == 'u' then\n\
    \            c = 'y'\n        end\n        encoded = encoded .. c\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ result = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = string.find(vowels, char)\n            if index == #vowels then\n\
    \                result = result .. vowels[1]\n            else\n            \
    \    result = result .. vowels[index + 1]\n            end\n        else\n   \
    \         if char == char:upper() then\n                result = result .. char:lower()\n\
    \            else\n                result = result .. char:upper()\n         \
    \   end\n        end\n    end\n    return result\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local c = message:sub(i, i)\n        if c == c:upper() then\n         \
    \   c = c:lower()\n        else\n            c = c:upper()\n        end\n    \
    \    if table.contains(vowels, c) then\n            c = vowels[(table.indexof(vowels,\
    \ c) + 2) % 5 + 1]\n        end\n        encoded = encoded .. c\n    end\n   \
    \ return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[(j % #vowels)\
    \ + 1]\n            encoded = encoded .. next_vowel\n        else\n          \
    \  encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local result = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local lower = char:lower()\n        local index = alphabet:find(lower)\n\
    \        if index then\n            if lower == char then\n                result\
    \ = result .. alphabet:sub(index, index):upper()\n            else\n         \
    \       result = result .. alphabet:sub(index, index)\n            end\n     \
    \   else\n            result = result .. char\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[(j % #vowels) + 1]\n           \
    \ encoded = encoded .. next_vowel\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ % #vowels) + 1]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                char = vowels[1]\n            else\n\
    \                char = vowels[index + 1]\n            end\n        end\n    \
    \    encoded = encoded .. char\n    end\n    return encoded\nend", "  -- TODO\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        local found = false\n  \
    \      for j = 1, #vowels do\n            if char == vowels[j] then\n        \
    \        found = true\n                char = vowels[(j + 2) % #vowels]\n    \
    \        end\n        end\n        if not found then\n            char = char\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                if j == #vowels then\n\
    \                    char = vowels[1]\n                else\n                \
    \    char = vowels[j + 1]\n                end\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "\tlocal\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1, #message\
    \ do\n\t\tlocal char = message:sub(i, i)\n\t\tif char == char:upper() then\n\t\
    \t\tchar = char:lower()\n\t\telse\n\t\t\tchar = char:upper()\n\t\tend\n\t\tfor\
    \ j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\tchar = vowels[j\
    \ + 2]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\
    \treturn encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[j + 2]\n            if not next_vowel then\n   \
    \             next_vowel = vowels[1]\n            end\n            encoded = encoded\
    \ .. next_vowel\n        else\n            if char == char:upper() then\n    \
    \            encoded = encoded .. char:lower()\n            else\n           \
    \     encoded = encoded .. char:upper()\n            end\n        end\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local lower = char:lower()\n        local is_vowel = false\n   \
    \     for j = 1, #vowels do\n            if lower == vowels[j] then\n        \
    \        is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[(j % #vowels)\
    \ + 1]\n            local next_vowel_index = lower:find(next_vowel)\n        \
    \    local next_next_vowel = lower:sub(next_vowel_index + 1, next_vowel_index\
    \ + 1)\n            encoded[#encoded + 1] = next_next_vowel\n        else\n  \
    \          encoded[#encoded + 1] = char:upper()\n        end\n    end\n    return\
    \ table.concat(encoded)\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            encoded = encoded\
    \ .. next_vowel\n        else\n            encoded = encoded .. char\n       \
    \ end\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local is_vowel = false\n    for j = 1, #vowels do\n      if char ==\
    \ vowels[j] then\n        is_vowel = true\n        break\n      end\n    end\n\
    \    if is_vowel then\n      local next_vowel = vowels[(j % #vowels) + 1]\n  \
    \    encoded = encoded .. next_vowel\n    else\n      encoded = encoded .. char:lower()\n\
    \    end\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        local is_vowel = false\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                is_vowel = true\n\
    \                break\n            end\n        end\n        if is_vowel then\n\
    \            local index = string.find(vowels, char)\n            if index ==\
    \ #vowels then\n                encoded = encoded .. vowels[1]\n            else\n\
    \                encoded = encoded .. vowels[index + 1]\n            end\n   \
    \     else\n            if char == char:upper() then\n                encoded\
    \ = encoded .. char:lower()\n            else\n                encoded = encoded\
    \ .. char:upper()\n            end\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - string.byte('a') + 2) % 26\n          \
    \  encoded = encoded .. string.char(string.byte('a') + index)\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c:match('%a') then\n   \
    \         if c:match('%l') then\n                c = c:upper()\n            else\n\
    \                c = c:lower()\n            end\n            for j = 1, #vowels\
    \ do\n                if c == vowels[j] then\n                    c = vowels[(j\
    \ + 2) % #vowels + 1]\n                    break\n                end\n      \
    \      end\n        end\n        encoded = encoded .. c\n    end\n    return encoded\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
