---
name: HumanEval_93_encode
language: lua
prompt: "-- Write a function that takes a message, and encodes in such a \n-- way
  that it swaps case of all letters, replaces all vowels in \n-- the message with
  the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.
  \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n-- >>>
  encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = encode
      lu.assertEquals(candidate('TEST'), 'tgst')
      lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')
      lu.assertEquals(candidate('YES'), 'ygs')
      lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')
      lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for _, v in ipairs(vowels) do
              if char == v then
                  char = vowels[((vowels[v] or 0) + 2) % 5 + 1]
                  break
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      for j = 1, #vowels do
        if char == vowels[j] then
          char = vowels[(j + 2) % #vowels]
        end
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[j + 2]
              if next_vowel == nil then
                  next_vowel = vowels[1]
              end
              encoded = encoded .. next_vowel
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      local isVowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          isVowel = true
          break
        end
      end
      if isVowel then
        local index = (j + 2) % #vowels
        if index == 0 then
          index = #vowels
        end
        char = vowels[index]
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j % #vowels) + 1]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local c = message:sub(i, i)
      local isVowel = false
      for j = 1, #vowels do
        if c == vowels[j] then
          isVowel = true
          break
        end
      end
      if isVowel then
        local index = (c:byte() - 96) % 5 + 1
        encoded = encoded .. vowels[index]
      else
        if c:byte() >= 65 and c:byte() <= 90 then
          encoded = encoded .. string.char(c:byte() + 32)
        elseif c:byte() >= 97 and c:byte() <= 122 then
          encoded = encoded .. string.char(c:byte() - 32)
        else
          encoded = encoded .. c
        end
      end
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
              for j = 1, #vowels do
                  if c == vowels[j] then
                      c = vowels[(j + 2) % #vowels + 1]
                      break
                  end
              end
          end
          encoded = encoded .. c
      end
      return encoded
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('[a-z]') then
              char = char:upper()
          elseif char:match('[A-Z]') then
              char = char:lower()
          end
          if char:match('[aeiou]') then
              char = char:sub(3, 3)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local alphabet = 'abcdefghijklmnopqrstuvwxyz'
    local vowels = 'aeiou'
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local char_lower = char:lower()
      local char_upper = char:upper()
      local char_index = alphabet:find(char_lower)
      if char_index then
        local char_encoded = ''
        if vowels:find(char_lower) then
          char_encoded = alphabet:sub(char_index + 2, char_index + 2)
        else
          char_encoded = alphabet:sub(char_index, char_index)
        end
        if char == char_lower then
          encoded = encoded .. char_encoded
        else
          encoded = encoded .. char_encoded:upper()
        end
      else
        encoded = encoded .. char
      end
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 5 + 1
              char = vowels[index]
          end
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for _, v in ipairs(vowels) do
              if char == v then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = string.find(vowels, char)
              if index == #vowels then
                  index = 1
              else
                  index = index + 1
              end
              char = vowels[index]
          end
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % 5 + 1]
                  break
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j % #vowels) + 1]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('[a-z]') then
              char = char:upper()
          elseif char:match('[A-Z]') then
              char = char:lower()
          end
          if char:match('[aeiou]') then
              char = string.char(string.byte(char) + 2)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('[a-z]') then
              char = char:upper()
          elseif char:match('[A-Z]') then
              char = char:lower()
          end
          if char:match('[aeiou]') then
              local index = string.find('aeiou', char)
              char = 'aeiou':sub(index + 2, index + 2)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
    local result = {}
    for i=1,#message do
      local char = message:sub(i,i)
      local char_code = string.byte(char)
      if char_code >= 65 and char_code <= 90 then
        char_code = char_code + 32
      elseif char_code >= 97 and char_code <= 122 then
        char_code = char_code - 32
      end
      if char_code == 97 then
        char_code = 99
      elseif char_code == 101 then
        char_code = 103
      elseif char_code == 105 then
        char_code = 107
      elseif char_code == 111 then
        char_code = 113
      elseif char_code == 117 then
        char_code = 119
      end
      table.insert(result, string.char(char_code))
    end
    return table.concat(result)
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexof(vowels, char) then
              local index = table.indexof(vowels, char)
              if index == #vowels then
                  char = vowels[1]
              else
                  char = vowels[index + 1]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local isVowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          isVowel = true
          break
        end
      end
      if isVowel then
        local nextVowel = vowels[(j % #vowels) + 1]
        encoded = encoded .. nextVowel
      else
        local isUpper = char == char:upper()
        if isUpper then
          encoded = encoded .. char:lower()
        else
          encoded = encoded .. char:upper()
        end
      end
    end
    return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('%a') then
              local is_upper = char:match('%u')
              local is_vowel = vowels:find(char:lower())
              if is_vowel then
                  local index = (is_vowel + 2) % #alphabet
                  char = alphabet:sub(index, index)
              end
              if is_upper then
                  char = char:upper()
              end
              encoded = encoded .. char
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_char = message:sub(i + 1, i + 1)
              local next_next_char = message:sub(i + 2, i + 2)
              if next_char == nil then
                  next_char = ''
              end
              if next_next_char == nil then
                  next_next_char = ''
              end
              encoded = encoded .. next_next_char .. next_char
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('[aeiou]') then
              local index = string.find(vowels, char)
              encoded = encoded .. vowels:sub(index + 2, index + 2)
          elseif char:match('[AEIOU]') then
              local index = string.find(vowels, char:lower())
              encoded = encoded .. vowels:sub(index + 2, index + 2):upper()
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
    local alphabet = 'abcdefghijklmnopqrstuvwxyz'
    local vowels = 'aeiou'
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local lower = char:lower()
      local is_upper = char == char:upper()
      local is_vowel = vowels:find(lower)
      if is_vowel then
        local index = alphabet:find(lower)
        local next_index = index + 2
        if next_index > #alphabet then
          next_index = next_index - #alphabet
        end
        char = alphabet:sub(next_index, next_index)
      end
      if is_upper then
        char = char:upper()
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- "    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,
  i)\n        if char:match('[%a]') then\n            if char:match('[%a]') then\n
  \               if char:match('[%a]') then\n                    if char:match('[%a]')
  then\n                        if char:match('[%a]') then\n                            if
  char:match('[%a]') then\n                                if char:match('[%a]') then\n
  \                                   if char:match('[%a]') then\n                                        if
  char:match('[%a]') then\n                                            if char:match('[%a]')
  then\n                                                if char:match('[%a]') then\n
  \                                                   if char:match('[%a]') then\n
  \                                                       if char:match('[%a]') then\n
  \                                                           if char:match('[%a]')
  then\n                                                                if char:match('[%a]')
  then\n                                                                    if char:match('[%a]')
  then\n                                                                        if
  char:match('[%a]') then\n                                                                            if
  char:match('[%a]') then\n                                                                                if
  char:match('[%a]') then\n                                                                                    if
  char:match('[%a]') then\n                                                                                        if
  char:match('[%a]') then\n                                                                                            if
  char:match('[%a]') then\n                                                                                                if
  char:match('[%a]') then\n                                                                                                    if
  char:match('[%a]') then\n                                                                                                        if
  char:match('[%a]') then\n                                                                                                            if
  char:match('[%a]') then\n                                                                                                                if
  char:match('[%a]') then\n                                                                                                                    if
  char:match('[%a]') then\n                                                                                                                        if
  char:match('[%a]') then\n                                                                                                                            if
  char:match('[%a]') then\n                "
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 5 + 1
              encoded = encoded .. vowels[index]
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local pos = string.find(vowels, char)
              if pos == #vowels then
                  pos = 1
              else
                  pos = pos + 1
              end
              char = vowels[pos]
          end
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local is_vowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          is_vowel = true
          break
        end
      end
      if is_vowel then
        local index = (string.find(vowels, char) + 2) % #vowels
        if index == 0 then
          index = #vowels
        end
        char = vowels[index]
      end
      encoded = encoded .. char:upper()
    end
    return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels:sub(j, j) then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = alphabet:find(char)
              local new_index = index + 2
              if new_index > #alphabet then
                  new_index = new_index - #alphabet
              end
              encoded = encoded .. alphabet:sub(new_index, new_index)
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for _, vowel in ipairs(vowels) do
              if char == vowel then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[((i - 1) % #vowels) + 1]
              encoded = encoded .. next_vowel:upper()
          else
              encoded = encoded .. char:lower()
          end
      end
      return encoded
  end
- |2-
      local encoded = ''
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexOf(vowels, char) then
              char = vowels[(table.indexOf(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      if table.contains(vowels, char) then
        local index = table.indexof(vowels, char)
        char = vowels[(index + 2) % #vowels]
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexOf(vowels, char) then
              char = vowels[(table.indexOf(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      if table.indexof(vowels, char) then
        char = vowels[(table.indexof(vowels, char) + 2) % 5]
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexof(vowels, char) then
              local index = table.indexof(vowels, char)
              if index == #vowels then
                  char = vowels[1]
              else
                  char = vowels[index + 1]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = {}
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % 5 + 1]
                  break
              end
          end
          encoded[#encoded + 1] = char
      end
      return table.concat(encoded)
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.contains(vowels, char) then
              local index = table.indexof(vowels, char)
              if index == #vowels then
                  char = vowels[1]
              else
                  char = vowels[index + 1]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = {}
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 5 + 1
              char = vowels[index]
          end
          if string.byte(char) >= 97 and string.byte(char) <= 122 then
              char = string.char(string.byte(char) - 32)
          elseif string.byte(char) >= 65 and string.byte(char) <= 90 then
              char = string.char(string.byte(char) + 32)
          end
          encoded[#encoded + 1] = char
      end
      return table.concat(encoded)
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local is_vowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          is_vowel = true
          break
        end
      end
      if is_vowel then
        local next_vowel = vowels[j + 2]
        if next_vowel == nil then
          next_vowel = vowels[1]
        end
        encoded = encoded .. next_vowel
      else
        encoded = encoded .. char
      end
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.contains(vowels, char) then
              local index = table.indexof(vowels, char)
              if index == #vowels then
                  index = 1
              else
                  index = index + 1
              end
              char = vowels[index]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[j + 2]
                  break
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 5 + 1
              encoded = encoded .. vowels[index]
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local lower = char:lower()
          if lower == char then
              char = char:upper()
          end
          if table.contains(vowels, lower) then
              local index = table.indexof(vowels, lower)
              char = vowels[(index + 2) % #vowels + 1]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if vowels:find(char) then
              local index = vowels:find(char)
              char = vowels:sub(index + 2, index + 2)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[j + 2]
              if next_vowel == nil then
                  next_vowel = vowels[1]
              end
              encoded = encoded .. next_vowel
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 26 + 1
              char = string.char(index + 96)
          end
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[j + 2]
              if next_vowel == nil then
                  next_vowel = vowels[1]
              end
              encoded = encoded .. next_vowel
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c == c:upper() then
              c = c:lower()
          else
              c = c:upper()
          end
          for j = 1, #vowels do
              if c == vowels[j] then
                  c = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. c
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local encoded = ''
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      for i = 1, #message do
          local char = message:sub(i, i)
          local char_lower = char:lower()
          if char_lower == char then
              char = char:upper()
          end
          if table.contains(vowels, char_lower) then
              local index = table.indexof(vowels, char_lower)
              char = vowels[(index + 2) % #vowels + 1]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 5 + 1
              encoded = encoded .. vowels[index]
          else
              if string.byte(char) >= 65 and string.byte(char) <= 90 then
                  encoded = encoded .. string.char(string.byte(char) + 32)
              elseif string.byte(char) >= 97 and string.byte(char) <= 122 then
                  encoded = encoded .. string.char(string.byte(char) - 32)
              else
                  encoded = encoded .. char
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = {}
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 5 + 1
              char = vowels[index]
          end
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          encoded[#encoded + 1] = char
      end
      return table.concat(encoded)
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      for j = 1, #vowels do
        if char == vowels[j] then
          char = vowels[(j + 2) % #vowels]
        end
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local char_lower = char:lower()
          local char_upper = char:upper()
          local is_vowel = false
          for j = 1, #vowels do
              if char_lower == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = j + 2
              if index > #vowels then
                  index = index - #vowels
              end
              char = vowels[index]
          end
          if char == char_lower then
              encoded = encoded .. char_upper
          else
              encoded = encoded .. char_lower
          end
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local is_vowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          is_vowel = true
          break
        end
      end
      if is_vowel then
        local next_vowel = vowels[(j % #vowels) + 1]
        encoded = encoded .. next_vowel
      else
        encoded = encoded .. char
      end
    end
    return encoded
  end
- |2-
    -- TODO: Implement this function
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('[a-z]') then
              encoded = encoded .. char:upper()
          elseif char:match('[A-Z]') then
              encoded = encoded .. char:lower()
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.contains(vowels, char) then
              local index = table.indexof(vowels, char)
              if index == #vowels then
                  index = 1
              else
                  index = index + 1
              end
              char = vowels[index]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local char_lower = char:lower()
          local char_upper = char:upper()
          local char_index = nil
          for j = 1, #alphabet do
              if alphabet[j] == char_lower then
                  char_index = j
                  break
              end
          end
          if char_index ~= nil then
              local new_char_index = char_index + 2
              if new_char_index > #alphabet then
                  new_char_index = new_char_index - #alphabet
              end
              local new_char = alphabet[new_char_index]
              local is_vowel = false
              for j = 1, #vowels do
                  if new_char == vowels[j] then
                      is_vowel = true
                      break
                  end
              end
              if is_vowel then
                  if char == char_lower then
                      encoded = encoded .. new_char:upper()
                  else
                      encoded = encoded .. new_char:lower()
                  end
              else
                  if char == char_lower then
                      encoded = encoded .. new_char
                  else
                      encoded = encoded .. new_char:upper()
                  end
              end
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexOf(vowels, char) then
              char = vowels[(table.indexOf(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    -- TODO: Implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if c == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (c:byte() - 96) % 5 + 1
              encoded = encoded .. vowels[index]
          else
              encoded = encoded .. c:lower()
          end
      end
      return encoded:upper()
  end
- end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local letter = message:sub(i, i)
          if letter == letter:upper() then
              letter = letter:lower()
          else
              letter = letter:upper()
          end
          if table.indexOf(vowels, letter) then
              local index = table.indexOf(vowels, letter)
              if index == #vowels then
                  index = 1
              else
                  index = index + 1
              end
              letter = vowels[index]
          end
          encoded = encoded .. letter
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexof(vowels, char) then
              char = vowels[(table.indexof(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels:sub(j, j) then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = alphabet:find(char)
              if index + 2 > #alphabet then
                  index = index + 2 - #alphabet
              else
                  index = index + 2
              end
              char = alphabet:sub(index, index)
          end
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexOf(vowels, char) then
              char = vowels[(table.indexOf(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexof(vowels, char) then
              char = vowels[(table.indexof(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encodedMessage = ''
    local messageLength = string.len(message)
    local i = 1
    while i <= messageLength do
      local letter = string.sub(message, i, i)
      local letterIndex = table.indexOf(alphabet, letter)
      if letterIndex then
        if letter == string.upper(letter) then
          letter = string.lower(letter)
          letterIndex = table.indexOf(alphabet, letter)
        end
        if table.indexOf(vowels, letter) then
          letterIndex = letterIndex + 2
          if letterIndex > #alphabet then
            letterIndex = letterIndex - #alphabet
          end
          letter = alphabet[letterIndex]
        end
        if string.sub(message, i, i) == string.upper(string.sub(message, i, i)) then
          letter = string.upper(letter)
        end
        encodedMessage = encodedMessage .. letter
      else
        encodedMessage = encodedMessage .. letter
      end
      i = i + 1
    end
    return encodedMessage
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local c = message:sub(i, i)
      local is_vowel = false
      for j = 1, #vowels do
        if c == vowels[j] then
          is_vowel = true
          break
        end
      end
      if is_vowel then
        encoded = encoded .. string.char(string.byte(c) + 2)
      else
        encoded = encoded .. c
      end
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local isVowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  isVowel = true
                  break
              end
          end
          if isVowel then
              local index = 1
              for j = 1, #alphabet do
                  if char == alphabet[j] then
                      index = j
                      break
                  end
              end
              if index + 2 > #alphabet then
                  index = index + 2 - #alphabet
              else
                  index = index + 2
              end
              encoded = encoded .. alphabet[index]
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local index = alphabet:find(char:lower())
          if index then
              local offset = (index + 2) % #alphabet
              if offset == 0 then
                  offset = #alphabet
              end
              local newChar = alphabet:sub(offset, offset)
              if char:lower() == char then
                  encoded = encoded .. newChar
              else
                  encoded = encoded .. newChar:upper()
              end
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
    local alphabet = 'abcdefghijklmnopqrstuvwxyz'
    local vowels = 'aeiou'
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      if vowels:find(char) then
        local index = vowels:find(char)
        char = vowels:sub(index + 2, index + 2)
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              if char:match('%a') then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c == c:upper() then
              c = c:lower()
          else
              c = c:upper()
          end
          for j = 1, #vowels do
              if c == vowels[j] then
                  c = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. c
      end
      return encoded
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local lower = char:lower()
          if lower == 'a' then
              encoded = encoded .. 'c'
          elseif lower == 'e' then
              encoded = encoded .. 'g'
          elseif lower == 'i' then
              encoded = encoded .. 'k'
          elseif lower == 'o' then
              encoded = encoded .. 'q'
          elseif lower == 'u' then
              encoded = encoded .. 's'
          elseif lower == 'y' then
              encoded = encoded .. 'a'
          elseif lower == 'z' then
              encoded = encoded .. 'b'
          elseif lower == char then
              encoded = encoded .. lower:upper()
          else
              encoded = encoded .. lower
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c == c:upper() then
              c = c:lower()
          else
              c = c:upper()
          end
          for j = 1, #vowels do
              if c == vowels[j] then
                  c = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. c
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local isVowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  isVowel = true
                  break
              end
          end
          if isVowel then
              local index = string.find(vowels, char)
              if index == #vowels then
                  index = 1
              else
                  index = index + 1
              end
              encoded = encoded .. vowels[index]
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[j + 2]
                  break
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('[a-z]') then
              char = char:upper()
          elseif char:match('[A-Z]') then
              char = char:lower()
          end
          if char:match('[aeiou]') then
              char = char:sub(3, 3)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c == c:upper() then
              c = c:lower()
          else
              c = c:upper()
          end
          for _, v in ipairs(vowels) do
              if c == v then
                  c = vowels[(vowels[v] + 2) % 5]
              end
          end
          encoded = encoded .. c
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexof(vowels, char) then
              char = vowels[(table.indexof(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      for j = 1, #vowels do
        if char == vowels[j] then
          char = vowels[(j + 2) % #vowels]
        end
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[j + 2]
                  break
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.contains(vowels, char) then
              local index = table.indexof(vowels, char)
              if index == #vowels then
                  index = 1
              else
                  index = index + 1
              end
              char = vowels[index]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for _, v in ipairs(vowels) do
              if char == v then
                  local next = v:byte() + 2
                  if next > 122 then
                      next = next - 26
                  end
                  char = string.char(next)
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexof(vowels, char) then
              char = vowels[(table.indexof(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded_message = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local is_vowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          is_vowel = true
          break
        end
      end
      if is_vowel then
        local next_vowel = vowels[(j % #vowels) + 1]
        encoded_message = encoded_message .. next_vowel
      else
        encoded_message = encoded_message .. char
      end
    end
    return encoded_message:upper()
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexOf(vowels, char) then
              local index = table.indexOf(vowels, char)
              if index == #vowels then
                  index = 0
              end
              char = vowels[index + 2]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if vowels:find(char) then
              local index = vowels:find(char)
              char = vowels:sub(index + 2, index + 2)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char:match('[a-z]') then
        encoded = encoded .. char:upper()
      elseif char:match('[A-Z]') then
        encoded = encoded .. char:lower()
      else
        encoded = encoded .. char
      end
    end
    return encoded
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('[a-z]') then
              char = char:upper()
          elseif char:match('[A-Z]') then
              char = char:lower()
          end
          if char:match('[aeiou]') then
              char = char:gsub('[aeiou]', function(c)
                  local index = string.find('aeiou', c)
                  return 'aeiou':sub(index + 2, index + 2)
              end)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local isVowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  isVowel = true
                  break
              end
          end
          if isVowel then
              local index = (string.find(vowels, char) + 2) % #vowels
              if index == 0 then
                  index = #vowels
              end
              char = vowels[index]
          end
          encoded = encoded .. char:upper()
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexof(vowels, char) then
              char = vowels[(table.indexof(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = {}
      for i=1, #message do
          local c = message:sub(i, i)
          local is_vowel = false
          for j=1, #vowels do
              if c == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (c:byte() - 96) % 5 + 1
              c = vowels[index]
          end
          if c:byte() >= 97 and c:byte() <= 122 then
              c = string.char(c:byte() - 32)
          elseif c:byte() >= 65 and c:byte() <= 90 then
              c = string.char(c:byte() + 32)
          end
          table.insert(encoded, c)
      end
      return table.concat(encoded)
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 5 + 1
              char = vowels[index]
          end
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local is_vowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          is_vowel = true
          break
        end
      end
      if is_vowel then
        local index = (string.find(vowels, char) + 2) % #vowels
        if index == 0 then
          index = #vowels
        end
        char = vowels[index]
      end
      encoded = encoded .. char:upper()
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for _, v in ipairs(vowels) do
              if char == v then
                  char = vowels[((vowels[v] or 0) + 2) % 5 + 1]
                  break
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - string.byte('a') + 2) % 26
              encoded = encoded .. string.char(string.byte('a') + index)
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = string.find(vowels, char)
              if index == #vowels then
                  index = 1
              else
                  index = index + 1
              end
              char = vowels[index]
          end
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % 5 + 1]
                  break
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c == c:upper() then
              c = c:lower()
          else
              c = c:upper()
          end
          if table.contains(vowels, c) then
              local index = table.indexof(vowels, c)
              if index == #vowels then
                  index = 1
              else
                  index = index + 1
              end
              c = vowels[index]
          end
          encoded = encoded .. c
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      -- TODO: Implement
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexof(vowels, char) then
              local index = alphabet:find(char)
              char = alphabet:sub(index + 2, index + 2)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local alphabet = 'abcdefghijklmnopqrstuvwxyz'
    local vowels = 'aeiou'
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local index = alphabet:find(char:lower())
      if index then
        local is_vowel = vowels:find(char:lower())
        if is_vowel then
          index = index + 2
          if index > #alphabet then
            index = index - #alphabet
          end
        end
        if char:lower() == char then
          encoded = encoded .. alphabet:sub(index, index)
        else
          encoded = encoded .. alphabet:sub(index, index):upper()
        end
      else
        encoded = encoded .. char
      end
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = ((char:byte() - 96) + 2) % 26
              if index == 0 then index = 26 end
              encoded = encoded .. string.char(index + 96)
          else
              encoded = encoded .. char:upper()
          end
      end
      return encoded
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('[a-z]') then
              char = char:upper()
          elseif char:match('[A-Z]') then
              char = char:lower()
          end
          if char:match('[aeiou]') then
              char = char:sub(3, 3)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char:match('[aeiou]') then
        local index = string.find(alphabet, char)
        local new_index = index + 2
        if new_index > #alphabet then
          new_index = new_index - #alphabet
        end
        char = alphabet:sub(new_index, new_index)
      end
      encoded = encoded .. char:upper()
    end
    return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local isVowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          isVowel = true
          break
        end
      end
      if isVowel then
        local nextVowel = vowels[j + 2]
        if not nextVowel then
          nextVowel = vowels[1]
        end
        encoded = encoded .. nextVowel
      else
        encoded = encoded .. char:upper()
      end
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  char = vowels[(j + 2) % #vowels]
              end
          end
          if not is_vowel then
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % 5 + 1]
                  break
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      local isVowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          isVowel = true
          local nextVowel = vowels[j + 2]
          if not nextVowel then
            nextVowel = vowels[1]
          end
          char = nextVowel
          break
        end
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
      local vowels = 'AEIOU'
      local result = ''
      for i = 1, #message do
          local letter = message:sub(i, i)
          if letter == letter:upper() then
              letter = letter:lower()
          else
              letter = letter:upper()
          end
          if vowels:find(letter) then
              local index = vowels:find(letter)
              if index == #vowels then
                  index = 1
              else
                  index = index + 1
              end
              letter = vowels:sub(index, index)
          end
          result = result .. letter
      end
      return result
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local isVowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          isVowel = true
          break
        end
      end
      if isVowel then
        local index = (string.find(vowels, char) + 2) % #vowels
        if index == 0 then
          index = #vowels
        end
        encoded = encoded .. vowels[index]
      else
        encoded = encoded .. char
      end
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if char == 'a' then
              char = 'c'
          elseif char == 'e' then
              char = 'g'
          elseif char == 'i' then
              char = 'k'
          elseif char == 'o' then
              char = 'q'
          elseif char == 'u' then
              char = 'y'
          end
          encoded = encoded .. char
      end
      return encoded
  end
- "\tlocal encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i,
  i)\n\t\tif char:find('[a-zA-Z]') then\n\t\t\tif char:find('[a-z]') then\n\t\t\t\tchar
  = char:upper()\n\t\t\telse\n\t\t\t\tchar = char:lower()\n\t\t\tend\n\t\t\tif char:find('[aeiou]')
  then\n\t\t\t\tchar = char:sub(3, 3)\n\t\t\tend\n\t\tend\n\t\tencoded = encoded ..
  char\n\tend\n\treturn encoded\nend"
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      for j = 1, #vowels do
        if char == vowels[j] then
          char = vowels[j + 2]
          break
        end
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local isVowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  isVowel = true
                  break
              end
          end
          if isVowel then
              local index = (char:byte() - 96) % 5 + 1
              char = vowels[index]
          end
          encoded = encoded .. char:upper()
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if vowels:find(char) then
              local index = vowels:find(char)
              char = vowels:sub(index + 2, index + 2)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('%a') then
              local char_lower = char:lower()
              local char_index = alphabet:find(char_lower)
              if char_index then
                  local new_char_index = char_index + 2
                  if new_char_index > #alphabet then
                      new_char_index = new_char_index - #alphabet
                  end
                  local new_char = alphabet:sub(new_char_index, new_char_index)
                  if vowels:find(new_char) then
                      new_char = new_char:upper()
                  end
                  encoded = encoded .. new_char
              end
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char:match('%a') then
              local char_lower = char:lower()
              local char_index = alphabet:find(char_lower)
              if char_index then
                  if char_lower:match('[aeiou]') then
                      char_index = char_index + 2
                      if char_index > #alphabet then
                          char_index = char_index - #alphabet
                      end
                  end
                  if char:match('%l') then
                      char = alphabet:sub(char_index, char_index)
                  else
                      char = alphabet:sub(char_index, char_index):upper()
                  end
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local lower = char:lower()
          local index = alphabet:find(lower)
          if index then
              if lower == char then
                  -- lowercase
                  local new_index = index + 2
                  if new_index > #alphabet then
                      new_index = new_index - #alphabet
                  end
                  char = alphabet:sub(new_index, new_index)
              else
                  -- uppercase
                  local new_index = index + 2
                  if new_index > #alphabet then
                      new_index = new_index - #alphabet
                  end
                  char = alphabet:sub(new_index, new_index):upper()
              end
              if vowels:find(lower) then
                  char = char:upper()
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.indexOf(vowels, char) then
              char = vowels[(table.indexOf(vowels, char) + 2) % 5]
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 5 + 1
              char = vowels[index]
          end
          if string.byte(char) >= 97 and string.byte(char) <= 122 then
              char = string.char(string.byte(char) - 32)
          elseif string.byte(char) >= 65 and string.byte(char) <= 90 then
              char = string.char(string.byte(char) + 32)
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local lower = char:lower()
          local index = alphabet:find(lower)
          if index then
              local is_vowel = vowels:find(lower)
              if is_vowel then
                  index = index + 2
                  if index > #alphabet then
                      index = index - #alphabet
                  end
              end
              local new_char = alphabet:sub(index, index)
              if char == char:upper() then
                  new_char = new_char:upper()
              end
              encoded = encoded .. new_char
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local lower = char:lower()
          local is_vowel = vowels:find(lower)
          if is_vowel then
              local index = (is_vowel + 2) % #alphabet
              if index == 0 then
                  index = #alphabet
              end
              char = alphabet:sub(index, index)
          else
              char = lower:upper()
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local isVowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          isVowel = true
          break
        end
      end
      if isVowel then
        local nextVowel = vowels[(j % #vowels) + 1]
        encoded = encoded .. nextVowel
      else
        encoded = encoded .. char
      end
    end
    return encoded:upper()
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local char_lower = char:lower()
          if char_lower == char then
              char = char:upper()
          end
          for j = 1, #vowels do
              if char_lower == vowels[j] then
                  char = vowels[(j + 2) % #vowels + 1]
                  break
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c == c:upper() then
              c = c:lower()
          else
              c = c:upper()
          end
          if table.indexOf(vowels, c) then
              c = vowels[(table.indexOf(vowels, c) + 2) % 5 + 1]
          end
          encoded = encoded .. c
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local letter = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if letter == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(letter) - 96) % 5 + 1
              encoded = encoded .. vowels[index]
          else
              if string.byte(letter) >= 65 and string.byte(letter) <= 90 then
                  encoded = encoded .. string.char(string.byte(letter) + 32)
              elseif string.byte(letter) >= 97 and string.byte(letter) <= 122 then
                  encoded = encoded .. string.char(string.byte(letter) - 32)
              else
                  encoded = encoded .. letter
              end
          end
      end
      return encoded
  end
- end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - 96) % 5 + 1
              char = vowels[index]
          end
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      for j = 1, #vowels do
        if char == vowels[j] then
          char = vowels[(j + 2) % #vowels]
        end
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local lower = char:lower()
          local is_vowel = false
          for j = 1, #vowels do
              if lower == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (lower:byte() - 96) % 5 + 1
              encoded = encoded .. vowels[index]:upper()
          else
              encoded = encoded .. char:upper()
          end
      end
      return encoded
  end
- |2-
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c == c:upper() then
              c = c:lower()
          else
              c = c:upper()
          end
          if c == 'a' then
              c = 'c'
          elseif c == 'e' then
              c = 'g'
          elseif c == 'i' then
              c = 'k'
          elseif c == 'o' then
              c = 'q'
          elseif c == 'u' then
              c = 'y'
          end
          encoded = encoded .. c
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = string.find(vowels, char)
              if index == #vowels then
                  result = result .. vowels[1]
              else
                  result = result .. vowels[index + 1]
              end
          else
              if char == char:upper() then
                  result = result .. char:lower()
              else
                  result = result .. char:upper()
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c == c:upper() then
              c = c:lower()
          else
              c = c:upper()
          end
          if table.contains(vowels, c) then
              c = vowels[(table.indexof(vowels, c) + 2) % 5 + 1]
          end
          encoded = encoded .. c
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local alphabet = 'abcdefghijklmnopqrstuvwxyz'
      local vowels = 'aeiou'
      local result = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local lower = char:lower()
          local index = alphabet:find(lower)
          if index then
              if lower == char then
                  result = result .. alphabet:sub(index, index):upper()
              else
                  result = result .. alphabet:sub(index, index)
              end
          else
              result = result .. char
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      if char == char:upper() then
        char = char:lower()
      else
        char = char:upper()
      end
      for j = 1, #vowels do
        if char == vowels[j] then
          char = vowels[(j % #vowels) + 1]
        end
      end
      encoded = encoded .. char
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          if table.contains(vowels, char) then
              local index = table.indexof(vowels, char)
              if index == #vowels then
                  char = vowels[1]
              else
                  char = vowels[index + 1]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
    -- TODO
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          local found = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  found = true
                  char = vowels[(j + 2) % #vowels]
              end
          end
          if not found then
              char = char
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  if j == #vowels then
                      char = vowels[1]
                  else
                      char = vowels[j + 1]
                  end
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1,
  #message do\n\t\tlocal char = message:sub(i, i)\n\t\tif char == char:upper() then\n\t\t\tchar
  = char:lower()\n\t\telse\n\t\t\tchar = char:upper()\n\t\tend\n\t\tfor j = 1, #vowels
  do\n\t\t\tif char == vowels[j] then\n\t\t\t\tchar = vowels[j + 2]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tencoded
  = encoded .. char\n\tend\n\treturn encoded\nend"
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[j + 2]
              if not next_vowel then
                  next_vowel = vowels[1]
              end
              encoded = encoded .. next_vowel
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = {}
      for i = 1, #message do
          local char = message:sub(i, i)
          local lower = char:lower()
          local is_vowel = false
          for j = 1, #vowels do
              if lower == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              local next_vowel_index = lower:find(next_vowel)
              local next_next_vowel = lower:sub(next_vowel_index + 1, next_vowel_index + 1)
              encoded[#encoded + 1] = next_next_vowel
          else
              encoded[#encoded + 1] = char:upper()
          end
      end
      return table.concat(encoded)
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local next_vowel = vowels[(j % #vowels) + 1]
              encoded = encoded .. next_vowel
          else
              encoded = encoded .. char
          end
      end
      return encoded
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local encoded = ''
    for i = 1, #message do
      local char = message:sub(i, i)
      local is_vowel = false
      for j = 1, #vowels do
        if char == vowels[j] then
          is_vowel = true
          break
        end
      end
      if is_vowel then
        local next_vowel = vowels[(j % #vowels) + 1]
        encoded = encoded .. next_vowel
      else
        encoded = encoded .. char:lower()
      end
    end
    return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = string.find(vowels, char)
              if index == #vowels then
                  encoded = encoded .. vowels[1]
              else
                  encoded = encoded .. vowels[index + 1]
              end
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          if char == char:upper() then
              char = char:lower()
          else
              char = char:upper()
          end
          for j = 1, #vowels do
              if char == vowels[j] then
                  char = vowels[(j + 2) % #vowels]
              end
          end
          encoded = encoded .. char
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local char = message:sub(i, i)
          local is_vowel = false
          for j = 1, #vowels do
              if char == vowels[j] then
                  is_vowel = true
                  break
              end
          end
          if is_vowel then
              local index = (string.byte(char) - string.byte('a') + 2) % 26
              encoded = encoded .. string.char(string.byte('a') + index)
          else
              if char == char:upper() then
                  encoded = encoded .. char:lower()
              else
                  encoded = encoded .. char:upper()
              end
          end
      end
      return encoded
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local encoded = ''
      for i = 1, #message do
          local c = message:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
              for j = 1, #vowels do
                  if c == vowels[j] then
                      c = vowels[(j + 2) % #vowels + 1]
                      break
                  end
              end
          end
          encoded = encoded .. c
      end
      return encoded
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
