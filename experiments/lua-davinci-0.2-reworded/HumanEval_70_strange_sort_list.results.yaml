language: lua
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_removed, max_removed = lst:remove_at(min_idx), lst:remove_at(max_idx)\n\
    \    local min_removed_idx, max_removed_idx = min_removed:index_of(min), max_removed:index_of(max)\n\
    \    local min_removed_removed, max_removed_removed = min_removed:remove_at(min_removed_idx),\
    \ max_removed:remove_at(max_removed_idx)\n    return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe3rkpkfk.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpe3rkpkfk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpe3rkpkfk.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function strange_sort(lst, res)\n    if #lst == 0 then\n      return\
    \ res\n    end\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    table.remove_value(lst, min)\n    table.remove_value(lst, max)\n    table.insert(res,\
    \ min)\n    table.insert(res, max)\n    return strange_sort(lst, res)\n  end\n\
    \  return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp83aa4uy_.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp83aa4uy_.lua:16:\
    \ in function </tmp/tmp83aa4uy_.lua:12>\n\t(...tail calls...)\n\t/tmp/tmp83aa4uy_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_val = table.remove(lst,\
    \ min_idx)\n    local max_val = table.remove(lst, max_idx - 1)\n    table.insert(res,\
    \ min_val)\n    table.insert(res, max_val)\n    while #lst > 0 do\n        min\
    \ = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n        min_idx\
    \ = 1\n        max_idx = 1\n        for i, v in ipairs(lst) do\n            if\
    \ v == min then\n                min_idx = i\n            elseif v == max then\n\
    \                max_idx = i\n            end\n        end\n        min_val =\
    \ table.remove(lst, min_idx)\n        max_val = table.remove(lst, max_idx - 1)\n\
    \        table.insert(res, min_val)\n        table.insert(res, max_val)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxd36mp3u.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpxd36mp3u.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpxd36mp3u.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min_value, max_value, min_index, max_index\n  local\
    \ min_max_indexes = {}\n  local min_max_values = {}\n  local min_max_index = 1\n\
    \  local min_max_value = 1\n  local min_max_value_index = 1\n  local min_max_value_indexes\
    \ = {}\n  local min_max_value_values = {}\n  local min_max_value_index_index =\
    \ 1\n  local min_max_value_value_index = 1\n  local min_max_value_index_indexes\
    \ = {}\n  local min_max_value_value_indexes = {}\n  local min_max_value_index_index_index\
    \ = 1\n  local min_max_value_value_index_index = 1\n  local min_max_value_index_index_indexes\
    \ = {}\n  local min_max_value_value_index_indexes = {}\n  local min_max_value_index_index_index_index\
    \ = 1\n  local min_max_value_value_index_index_index = 1\n  local min_max_value_index_index_index_indexes\
    \ = {}\n  local min_max_value_value_index_index_indexes = {}\n  local min_max_value_index_index_index_index_index\
    \ = 1\n  local min_max_value_value_index_index_index_index = 1\n  local min_max_value_index_index_index_index_indexes\
    \ = {}\n  local min_max_value_value_index_index_index_indexes = {}\n  local min_max_value_index_index_index_index_index_index\
    \ = 1\n  local min_max_value_value_index_index_index_index_index = 1\n  local\
    \ min_max_value_index_index_index_index_index_indexes = {}\n  local min_max_value_value_index_index_index_index_indexes\
    \ = {}\n  local min_max_value_index_index_index_index_index_index_index = 1\n\
    \  local min_max_value_value_index_index_index\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplbwolsmx.lua:58: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i]\
    \ = min\n      table.remove(lst, min_idx)\n    else\n      res[i] = max\n    \
    \  table.remove(lst, max_idx)\n    end\n    min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    min_idx, max_idx = 1, 1\n    for j = 1, #lst do\n\
    \      if lst[j] == min then\n        min_idx = j\n      elseif lst[j] == max\
    \ then\n        max_idx = j\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp189jtvjs.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp189jtvjs.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp189jtvjs.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min_index, max_index = 1, #lst\n  local min_value,\
    \ max_value = lst[min_index], lst[max_index]\n  local min_found, max_found = false,\
    \ false\n  local min_count, max_count = 0, 0\n  local i = 1\n  while i <= #lst\
    \ do\n    if not min_found then\n      if lst[i] < min_value then\n        min_value\
    \ = lst[i]\n        min_index = i\n      end\n      min_count = min_count + 1\n\
    \      if min_count == #lst then\n        min_found = true\n      end\n    end\n\
    \    if not max_found then\n      if lst[i] > max_value then\n        max_value\
    \ = lst[i]\n        max_index = i\n      end\n      max_count = max_count + 1\n\
    \      if max_count == #lst then\n        max_found = true\n      end\n    end\n\
    \    i = i + 1\n  end\n  result[1] = min_value\n  result[2] = max_value\n  local\
    \ min_index_found, max_index_found = false, false\n  local j = 1\n  while j <=\
    \ #lst do\n    if not min_index_found then\n      if j ~= min_index and j ~= max_index\
    \ then\n        min_value = lst[j]\n        min_index = j\n        min_index_found\
    \ = true\n      end\n    end\n    if not max_index_found then\n      if j ~= min_index\
    \ and j ~= max_index then\n        max_value = lst[j]\n        max_index = j\n\
    \        max_index_found = true\n      end\n    end\n    j = j + 1\n  end\n  result[3]\
    \ = min_value\n  result[4] = max_value\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf_kzqha.lua:71:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 7}\nstack traceback:\n\t/tmp/tmpaf_kzqha.lua:71:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local i = 1\n    while i\
    \ <= #lst do\n        if i % 2 == 1 then\n            res[i] = min\n         \
    \   min_idx = min_idx + 1\n        else\n            res[i] = max\n          \
    \  max_idx = max_idx - 1\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8436t4x4.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8436t4x4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8436t4x4.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local sorted_lst = {}\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 1, 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min_val then\n            min_idx = i\n        elseif v\
    \ == max_val then\n            max_idx = i\n        end\n    end\n    local min_max_idx\
    \ = min_idx > max_idx and min_idx or max_idx\n    local max_min_idx = min_idx\
    \ > max_idx and max_idx or min_idx\n    for i = 1, #lst, 2 do\n        table.insert(sorted_lst,\
    \ lst[min_max_idx])\n        table.insert(sorted_lst, lst[max_min_idx])\n    end\n\
    \    return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq_84xi38.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpq_84xi38.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpq_84xi38.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    local min_cnt, max_cnt = 0, 0\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_cnt = min_cnt + 1\n        elseif lst[i] == max\
    \ then\n            max_cnt = max_cnt + 1\n        end\n    end\n    for i = 1,\
    \ #lst do\n        if not min_found then\n            if lst[i] == min then\n\
    \                min_idx = i\n                min_found = true\n            end\n\
    \        elseif not max_found then\n            if lst[i] == max then\n      \
    \          max_idx = i\n                max_found = true\n            end\n  \
    \      end\n        if min_found and max_found then\n            break\n     \
    \   end\n    end\n    if min_idx < max_idx then\n        for i = 1, #lst do\n\
    \            if i % 2 == 1 then\n                table.insert(res, min)\n    \
    \        else\n                table.insert(res, max)\n            end\n     \
    \   end\n    else\n        for i = 1, #lst do\n            if i % 2 == 1 then\n\
    \                table.insert(res, max)\n            else\n                table.insert(res,\
    \ min)\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvn7trgfv.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvn7trgfv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvn7trgfv.lua:63: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while min <= max do\n    if i % 2 == 1 then\n      res[#res\
    \ + 1] = min\n      min = min + 1\n    else\n      res[#res + 1] = max\n     \
    \ max = max - 1\n    end\n    i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hoh553a.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4hoh553a.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4hoh553a.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    for i = 1, #lst do\n        if lst[i] == min and not min_found then\n   \
    \         min_idx = i\n            min_found = true\n        elseif lst[i] ==\
    \ max and not max_found then\n            max_idx = i\n            max_found =\
    \ true\n        end\n    end\n    local min_lst, max_lst = {}, {}\n    for i =\
    \ 1, #lst do\n        if i ~= min_idx then\n            table.insert(min_lst,\
    \ lst[i])\n        end\n        if i ~= max_idx then\n            table.insert(max_lst,\
    \ lst[i])\n        end\n    end\n    local min_min, min_max = math.min(unpack(min_lst)),\
    \ math.max(unpack(min_lst))\n    local max_min, max_max = math.min(unpack(max_lst)),\
    \ math.max(unpack(max_lst))\n    local min_min_idx, min_max_idx = 1, 1\n    local\
    \ max_min_idx, max_max_idx = 1, 1\n    local min_min_found, min_max_found = false,\
    \ false\n    local max_min_found, max_max_found = false, false\n    for i = 1,\
    \ #min_lst do\n        if min_lst[i] == min_min and not min_min_found then\n \
    \           min_min_idx = i\n            min_min_found = true\n        elseif\
    \ min_lst[i] == min_max and not min_max_found then\n            min_max_idx =\
    \ i\n            min_max_found = true\n        end\n    end\n    for i = 1, #max_lst\
    \ do\n        if max_lst[i] == max_min and not max_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplol9sej1.lua:51: ''then'' expected near ''lu''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min_value, max_value = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = 1, #lst\n  local min_found, max_found = false,\
    \ false\n  for i = 1, #lst do\n    if not min_found and lst[i] == min_value then\n\
    \      min_index = i\n      min_found = true\n    end\n    if not max_found and\
    \ lst[i] == max_value then\n      max_index = i\n      max_found = true\n    end\n\
    \    if min_found and max_found then\n      break\n    end\n  end\n  local min_first\
    \ = min_index < max_index\n  for i = 1, #lst do\n    if min_first then\n     \
    \ result[i] = lst[min_index]\n      min_index = min_index + 1\n      min_first\
    \ = false\n    else\n      result[i] = lst[max_index]\n      max_index = max_index\
    \ - 1\n      min_first = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzfv5c56.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmptzfv5c56.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmptzfv5c56.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = 1\n    local min\
    \ = lst[1]\n    local max = lst[1]\n    for i = 1, #lst do\n        if lst[i]\
    \ < min then\n            min = lst[i]\n            min_idx = i\n        end\n\
    \        if lst[i] > max then\n            max = lst[i]\n            max_idx =\
    \ i\n        end\n    end\n    table.insert(res, min)\n    table.insert(res, max)\n\
    \    table.remove(lst, min_idx)\n    table.remove(lst, max_idx - 1)\n    while\
    \ #lst > 0 do\n        min = lst[1]\n        min_idx = 1\n        max = lst[1]\n\
    \        max_idx = 1\n        for i = 1, #lst do\n            if lst[i] < min\
    \ then\n                min = lst[i]\n                min_idx = i\n          \
    \  end\n            if lst[i] > max then\n                max = lst[i]\n     \
    \           max_idx = i\n            end\n        end\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n        table.remove(lst, min_idx)\n \
    \       table.remove(lst, max_idx - 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1il0cst9.lua:58:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 8, 7, 7}\nstack traceback:\n\t\
    /tmp/tmp1il0cst9.lua:58: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if not min_found and lst[i] == min then\n\
    \            min_idx = i\n            min_found = true\n        end\n        if\
    \ not max_found and lst[i] == max then\n            max_idx = i\n            max_found\
    \ = true\n        end\n        if min_found and max_found then\n            break\n\
    \        end\n    end\n    local min_lst, max_lst = {}, {}\n    for i = 1, #lst\
    \ do\n        if i ~= min_idx and i ~= max_idx then\n            table.insert(min_lst,\
    \ lst[i])\n            table.insert(max_lst, lst[i])\n        end\n    end\n \
    \   local min_lst_sorted = strange_sort_list(min_lst)\n    local max_lst_sorted\
    \ = strange_sort_list(max_lst)\n    local min_idx, max_idx = 1, 1\n    for i =\
    \ 1, #lst do\n        if i % 2 == 1 then\n            res[i] = min_lst_sorted[min_idx]\n\
    \            min_idx = min_idx + 1\n        else\n            res[i] = max_lst_sorted[max_idx]\n\
    \            max_idx = max_idx + 1\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphclt0ya3.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphclt0ya3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphclt0ya3.lua:54: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local is_min = true\n  \
    \  for i = 1, #lst do\n        if is_min then\n            res[i] = min\n    \
    \        min_idx = min_idx + 1\n            min = math.min(unpack(lst, min_idx))\n\
    \        else\n            res[i] = max\n            max_idx = max_idx - 1\n \
    \           max = math.max(unpack(lst, 1, max_idx))\n        end\n        is_min\
    \ = not is_min\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4_0fc8ox.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4_0fc8ox.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4_0fc8ox.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local function strange_sort(lst, res)\n        if #lst == 0 then\n      \
    \      return res\n        end\n        local min_val, min_idx = math.min(unpack(lst))\n\
    \        local max_val, max_idx = math.max(unpack(lst))\n        table.insert(res,\
    \ min_val)\n        table.remove(lst, min_idx)\n        table.insert(res, max_val)\n\
    \        table.remove(lst, max_idx)\n        return strange_sort(lst, res)\n \
    \   end\n    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoualvu6d.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpoualvu6d.lua:16:\
    \ in function </tmp/tmpoualvu6d.lua:12>\n\t(...tail calls...)\n\t/tmp/tmpoualvu6d.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min_idx = 1\n  local max_idx = #lst\n  local min_val\
    \ = lst[min_idx]\n  local max_val = lst[max_idx]\n  local min_found = false\n\
    \  local max_found = false\n  local i = 1\n  while i <= #lst do\n    if not min_found\
    \ then\n      for j = min_idx, max_idx do\n        if lst[j] < min_val then\n\
    \          min_val = lst[j]\n          min_idx = j\n        end\n      end\n \
    \     res[i] = min_val\n      min_found = true\n      i = i + 1\n    end\n   \
    \ if not max_found then\n      for j = max_idx, min_idx, -1 do\n        if lst[j]\
    \ > max_val then\n          max_val = lst[j]\n          max_idx = j\n        end\n\
    \      end\n      res[i] = max_val\n      max_found = true\n      i = i + 1\n\
    \    end\n    min_found = false\n    max_found = false\n    min_val = lst[min_idx]\n\
    \    max_val = lst[max_idx]\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ycrkvph.lua:54:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp8ycrkvph.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function get_min_max(lst)\n    local min, max = math.huge, -math.huge\n\
    \    for _, v in ipairs(lst) do\n      if v < min then min = v end\n      if v\
    \ > max then max = v end\n    end\n    return min, max\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdrbia0_f.lua:35: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 0
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min_index, max_index\n  local min, max\n  local\
    \ min_removed, max_removed\n  local i = 1\n  while #lst > 0 do\n    min_index,\
    \ max_index = 1, 1\n    min, max = lst[1], lst[1]\n    for j = 1, #lst do\n  \
    \    if lst[j] < min then\n        min_index = j\n        min = lst[j]\n     \
    \ end\n      if lst[j] > max then\n        max_index = j\n        max = lst[j]\n\
    \      end\n    end\n    if i % 2 == 1 then\n      result[i] = min\n      min_removed\
    \ = table.remove(lst, min_index)\n    else\n      result[i] = max\n      max_removed\
    \ = table.remove(lst, max_index)\n    end\n    i = i + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local i = 1\n    while i <= #lst do\n        if i\
    \ % 2 == 1 then\n            table.insert(sorted, min)\n            table.remove(lst,\
    \ table.index_of(lst, min))\n        else\n            table.insert(sorted, max)\n\
    \            table.remove(lst, table.index_of(lst, max))\n        end\n      \
    \  min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n        i\
    \ = i + 1\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpohxtv7c7.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpohxtv7c7.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpohxtv7c7.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local function get_min_max(lst)\n        local min = math.min(unpack(lst))\n\
    \        local max = math.max(unpack(lst))\n        return min, max\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8d764lls.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_val, max_val\n    local min_idx, max_idx\n\
    \    local min_found, max_found\n    local i, j\n    local n = #lst\n    for i\
    \ = 1, n do\n        min_found = false\n        max_found = false\n        for\
    \ j = 1, n do\n            if not min_found and not lst[j] then\n            \
    \    min_found = true\n                min_val = lst[j]\n                min_idx\
    \ = j\n            elseif not max_found and not lst[j] then\n                max_found\
    \ = true\n                max_val = lst[j]\n                max_idx = j\n    \
    \        elseif not min_found and lst[j] < min_val then\n                min_val\
    \ = lst[j]\n                min_idx = j\n            elseif not max_found and\
    \ lst[j] > max_val then\n                max_val = lst[j]\n                max_idx\
    \ = j\n            end\n        end\n        if i % 2 == 1 then\n            res[i]\
    \ = min_val\n            lst[min_idx] = nil\n        else\n            res[i]\
    \ = max_val\n            lst[max_idx] = nil\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4vm2wpy6.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4vm2wpy6.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp4vm2wpy6.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = lst[min_index], lst[max_index]\n    local min_found, max_found =\
    \ false, false\n    local i = 1\n    while i <= #lst do\n        if not min_found\
    \ then\n            if lst[min_index] < min_value then\n                min_value\
    \ = lst[min_index]\n                min_index = min_index + 1\n            else\n\
    \                min_found = true\n                result[i] = min_value\n   \
    \             i = i + 1\n            end\n        end\n        if not max_found\
    \ then\n            if lst[max_index] > max_value then\n                max_value\
    \ = lst[max_index]\n                max_index = max_index - 1\n            else\n\
    \                max_found = true\n                result[i] = max_value\n   \
    \             i = i + 1\n            end\n        end\n        if min_found and\
    \ max_found then\n            min_found, max_found = false, false\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w5zla9h.lua:48:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp7w5zla9h.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function min_max(lst)\n    local min = math.min(unpack(lst))\n    local\
    \ max = math.max(unpack(lst))\n    return min, max\n  end\n  local function remove_min_max(lst,\
    \ min, max)\n    local new_lst = {}\n    for _, v in ipairs(lst) do\n      if\
    \ v ~= min and v ~= max then\n        table.insert(new_lst, v)\n      end\n  \
    \  end\n    return new_lst\n  end\n  local function strange_sort(lst)\n    if\
    \ #lst == 0 then\n      return {}\n    elseif #lst == 1 then\n      return lst\n\
    \    else\n      local min, max = min_max(lst)\n      local new_lst = remove_min_max(lst,\
    \ min, max)\n      local sorted_lst = strange_sort(new_lst)\n      table.insert(sorted_lst,\
    \ 1, min)\n      table.insert(sorted_lst, max)\n      return sorted_lst\n    end\n\
    \  end\n  return strange_sort(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsejl8hkx.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpsejl8hkx.lua:13:\
    \ in upvalue 'min_max'\n\t/tmp/tmpsejl8hkx.lua:32: in function </tmp/tmpsejl8hkx.lua:26>\n\
    \t(...tail calls...)\n\t/tmp/tmpsejl8hkx.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = min + 1\n        else\n            res[i]\
    \ = max\n            max = max - 1\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdo7qojbf.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdo7qojbf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdo7qojbf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local len = #lst\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 0\n    local max_idx\
    \ = 0\n    for i = 1, len do\n        if lst[i] == min then\n            min_idx\
    \ = i\n        elseif lst[i] == max then\n            max_idx = i\n        end\n\
    \    end\n    local idx = 1\n    while idx <= len do\n        if idx % 2 == 1\
    \ then\n            res[idx] = min\n            min_idx = min_idx + 1\n      \
    \  else\n            res[idx] = max\n            max_idx = max_idx + 1\n     \
    \   end\n        idx = idx + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwh6sjapu.lua:14:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpwh6sjapu.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpwh6sjapu.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = table.index_of(lst, min)\n  local max_idx = table.index_of(lst,\
    \ max)\n  table.remove(lst, min_idx)\n  table.remove(lst, max_idx)\n  table.insert(result,\
    \ min)\n  table.insert(result, max)\n  while #lst > 0 do\n    min = math.min(unpack(lst))\n\
    \    max = math.max(unpack(lst))\n    min_idx = table.index_of(lst, min)\n   \
    \ max_idx = table.index_of(lst, max)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx)\n    table.insert(result, min)\n    table.insert(result, max)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzyf0re10.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzyf0re10.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzyf0re10.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    while #res < #lst do\n        if #res\
    \ % 2 == 0 then\n            res[#res + 1] = min\n            min_idx = min_idx\
    \ + 1\n            min = math.min(unpack(lst, min_idx))\n        else\n      \
    \      res[#res + 1] = max\n            max_idx = max_idx + 1\n            max\
    \ = math.max(unpack(lst, max_idx))\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmponzs5uoh.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmponzs5uoh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmponzs5uoh.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #lst > 0 do\n        if i % 2 == 1 then\n        \
    \    table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9uwadbw_.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9uwadbw_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp9uwadbw_.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = 1\n  \
    \  for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        elseif v == max then\n            max_index = i\n        end\n\
    \    end\n    local min_max = {min, max}\n    local min_max_index = {min_index,\
    \ max_index}\n    local min_max_index_sorted = {}\n    if min_index < max_index\
    \ then\n        min_max_index_sorted = {min_index, max_index}\n    else\n    \
    \    min_max_index_sorted = {max_index, min_index}\n    end\n    local min_max_sorted\
    \ = {}\n    for i, v in ipairs(min_max_index_sorted) do\n        min_max_sorted[i]\
    \ = min_max[v]\n    end\n    local lst_sorted = {}\n    for i, v in ipairs(min_max_index)\
    \ do\n        lst_sorted[i] = lst[v]\n    end\n    local lst_sorted_remaining\
    \ = {}\n    for i, v in ipairs(lst) do\n        if v ~= min and v ~= max then\n\
    \            table.insert(lst_sorted_remaining, v)\n        end\n    end\n   \
    \ local lst_sorted_remaining_sorted = {}\n    for i, v in ipairs(lst_sorted_remaining)\
    \ do\n        lst_sorted_remaining_sorted[i] = v\n    end\n    local lst_sorted_remaining_sorted_reversed\
    \ = {}\n    for i, v in ipairs(lst_sorted_remaining_sorted) do\n        lst_sorted_remaining_sorted_reversed[i]\
    \ = v\n    end\n    local lst_sorted_remaining_sorted_reversed_sorted = {}\n \
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpogby038n.lua:71: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(table.unpack(lst)), math.max(table.unpack(lst))\n\
    \  local min_idx, max_idx = table.index_of(lst, min), table.index_of(lst, max)\n\
    \  local min_cnt, max_cnt = 0, 0\n  local min_idx_list, max_idx_list = {}, {}\n\
    \  for i, v in ipairs(lst) do\n    if v == min then\n      min_cnt = min_cnt +\
    \ 1\n      table.insert(min_idx_list, i)\n    elseif v == max then\n      max_cnt\
    \ = max_cnt + 1\n      table.insert(max_idx_list, i)\n    end\n  end\n  local\
    \ min_idx_cnt, max_idx_cnt = 1, 1\n  for i = 1, #lst do\n    if i % 2 == 1 then\n\
    \      res[i] = min\n      if min_idx_cnt <= min_cnt then\n        min_idx = min_idx_list[min_idx_cnt]\n\
    \        min_idx_cnt = min_idx_cnt + 1\n      end\n    else\n      res[i] = max\n\
    \      if max_idx_cnt <= max_cnt then\n        max_idx = max_idx_list[max_idx_cnt]\n\
    \        max_idx_cnt = max_idx_cnt + 1\n      end\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp9qy_5e3.lua:14:\
    \ attempt to call a nil value (field 'index_of')\nstack traceback:\n\t/tmp/tmpp9qy_5e3.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpp9qy_5e3.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, 1\n    while min_index <= #lst or max_index\
    \ <= #lst do\n        if min_index <= #lst then\n            table.insert(result,\
    \ min)\n            min_index = min_index + 1\n        end\n        if max_index\
    \ <= #lst then\n            table.insert(result, max)\n            max_index =\
    \ max_index + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ahl3f_c.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5ahl3f_c.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp5ahl3f_c.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if not min_found and lst[i] == min then\n\
    \            min_index = i\n            min_found = true\n        end\n      \
    \  if not max_found and lst[i] == max then\n            max_index = i\n      \
    \      max_found = true\n        end\n        if min_found and max_found then\n\
    \            break\n        end\n    end\n    local min_removed, max_removed =\
    \ false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n         \
    \   if not min_removed then\n                result[i] = min\n               \
    \ min_removed = true\n            else\n                result[i] = lst[min_index\
    \ + 1]\n                min_index = min_index + 1\n            end\n        else\n\
    \            if not max_removed then\n                result[i] = max\n      \
    \          max_removed = true\n            else\n                result[i] = lst[max_index\
    \ - 1]\n                max_index = max_index - 1\n            end\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22e8am5s.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp22e8am5s.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp22e8am5s.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local function min_max(lst)\n        local min = math.min(unpack(lst))\n\
    \        local max = math.max(unpack(lst))\n        return min, max\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp8qp_pp3.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local min_found = false\n\
    \    local max_found = false\n    for i = 1, #lst do\n        if lst[i] == min\
    \ then\n            min_idx = i\n            min_found = true\n        end\n \
    \       if lst[i] == max then\n            max_idx = i\n            max_found\
    \ = true\n        end\n        if min_found and max_found then\n            break\n\
    \        end\n    end\n    local min_idx_found = false\n    local max_idx_found\
    \ = false\n    local idx = 1\n    while idx <= #lst do\n        if idx == min_idx\
    \ then\n            min_idx_found = true\n        end\n        if idx == max_idx\
    \ then\n            max_idx_found = true\n        end\n        if min_idx_found\
    \ and max_idx_found then\n            break\n        end\n        if idx % 2 ==\
    \ 1 then\n            res[idx] = min\n            min_idx = min_idx + 1\n    \
    \    else\n            res[idx] = max\n            max_idx = max_idx - 1\n   \
    \     end\n        idx = idx + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5xh5yufv.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5xh5yufv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp5xh5yufv.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(res,\
    \ min)\n      table.remove(lst, table.index_of(lst, min))\n    else\n      table.insert(res,\
    \ max)\n      table.remove(lst, table.index_of(lst, max))\n    end\n    min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    i = i + 1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqx69zu08.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqx69zu08.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqx69zu08.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i] = min\n\
    \      table.remove(lst, table.index_of(lst, min))\n    else\n      res[i] = max\n\
    \      table.remove(lst, table.index_of(lst, max))\n    end\n    min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmputtqt4k9.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmputtqt4k9.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmputtqt4k9.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = table.index_of(lst, min), table.index_of(lst, max)\n\
    \    local min_removed, max_removed = false, false\n    for i = 1, #lst do\n \
    \       if i % 2 == 1 then\n            if not min_removed then\n            \
    \    table.insert(res, min)\n                table.remove(lst, min_idx)\n    \
    \            min_removed = true\n            else\n                table.insert(res,\
    \ math.min(unpack(lst)))\n                table.remove(lst, table.index_of(lst,\
    \ math.min(unpack(lst))))\n            end\n        else\n            if not max_removed\
    \ then\n                table.insert(res, max)\n                table.remove(lst,\
    \ max_idx)\n                max_removed = true\n            else\n           \
    \     table.insert(res, math.max(unpack(lst)))\n                table.remove(lst,\
    \ table.index_of(lst, math.max(unpack(lst))))\n            end\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuhl1o3ug.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpuhl1o3ug.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpuhl1o3ug.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local min_removed\
    \ = false\n    local max_removed = false\n    if min_idx < max_idx then\n    \
    \    min_removed = true\n    else\n        max_removed = true\n    end\n    for\
    \ i = 1, #lst do\n        if min_removed and max_removed then\n            break\n\
    \        end\n        if min_removed and lst[i] == max then\n            table.insert(res,\
    \ max)\n            max_removed = true\n        elseif max_removed and lst[i]\
    \ == min then\n            table.insert(res, min)\n            min_removed = true\n\
    \        end\n    end\n    for i = 1, #lst do\n        if lst[i] ~= min and lst[i]\
    \ ~= max then\n            table.insert(res, lst[i])\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwl_blds.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdwl_blds.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdwl_blds.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] == min then\n                min_idx = i\n                min_found\
    \ = true\n            end\n        end\n        if not max_found then\n      \
    \      if lst[i] == max then\n                max_idx = i\n                max_found\
    \ = true\n            end\n        end\n        if min_found and max_found then\n\
    \            break\n        end\n        i = i + 1\n    end\n    local min_removed,\
    \ max_removed = false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            if not min_removed then\n                table.insert(result, min)\n\
    \                min_removed = true\n            else\n                table.insert(result,\
    \ lst[min_idx])\n            end\n        else\n            if not max_removed\
    \ then\n                table.insert(result, max)\n                max_removed\
    \ = true\n            else\n                table.insert(result, lst[max_idx])\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwozdeax.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmwozdeax.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmwozdeax.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = min + 1\n        else\n            res[i]\
    \ = max\n            max = max - 1\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdo7qojbf.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdo7qojbf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdo7qojbf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = 1\n    local min\
    \ = lst[1]\n    local max = lst[1]\n    local min_found = false\n    local max_found\
    \ = false\n    for i, v in ipairs(lst) do\n        if v < min then\n         \
    \   min = v\n            min_idx = i\n            min_found = true\n        end\n\
    \        if v > max then\n            max = v\n            max_idx = i\n     \
    \       max_found = true\n        end\n    end\n    if not min_found then\n  \
    \      return lst\n    end\n    if not max_found then\n        return lst\n  \
    \  end\n    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n\
    \            res[i] = min\n            min_idx = min_idx + 1\n            if min_idx\
    \ > #lst then\n                min_idx = 1\n            end\n            min =\
    \ lst[min_idx]\n        else\n            res[i] = max\n            max_idx =\
    \ max_idx + 1\n            if max_idx > #lst then\n                max_idx = 1\n\
    \            end\n            max = lst[max_idx]\n        end\n        i = i +\
    \ 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjyoiuh1v.lua:62:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpjyoiuh1v.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if lst[i] == min and not min_found then\n\
    \            min_index = i\n            min_found = true\n        elseif lst[i]\
    \ == max and not max_found then\n            max_index = i\n            max_found\
    \ = true\n        end\n    end\n    if min_index < max_index then\n        for\
    \ i = min_index, max_index do\n            table.insert(result, lst[i])\n    \
    \    end\n        for i = 1, min_index - 1 do\n            table.insert(result,\
    \ lst[i])\n        end\n        for i = max_index + 1, #lst do\n            table.insert(result,\
    \ lst[i])\n        end\n    else\n        for i = max_index, min_index do\n  \
    \          table.insert(result, lst[i])\n        end\n        for i = 1, max_index\
    \ - 1 do\n            table.insert(result, lst[i])\n        end\n        for i\
    \ = min_index + 1, #lst do\n            table.insert(result, lst[i])\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2gxzwzo.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpw2gxzwzo.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpw2gxzwzo.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    local min_found = false\n \
    \   local max_found = false\n    for i, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_idx = i\n            min_found = true\n        end\n \
    \       if v == max then\n            max_idx = i\n            max_found = true\n\
    \        end\n        if min_found and max_found then\n            break\n   \
    \     end\n    end\n    if min_idx < max_idx then\n        for i = 1, #lst, 2\
    \ do\n            res[i] = min\n            res[i + 1] = max\n        end\n  \
    \  else\n        for i = 1, #lst, 2 do\n            res[i] = max\n           \
    \ res[i + 1] = min\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrozxnk6.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmrozxnk6.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmrozxnk6.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index = 1\n    local max_index = #lst\n\
    \    local is_min = true\n    for i = 1, #lst do\n        if is_min then\n   \
    \         result[i] = lst[min_index]\n            min_index = min_index + 1\n\
    \        else\n            result[i] = lst[max_index]\n            max_index =\
    \ max_index - 1\n        end\n        is_min = not is_min\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsditfdcb.lua:35:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpsditfdcb.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min_value = math.min(unpack(lst))\n  local max_value\
    \ = math.max(unpack(lst))\n  local min_index = 1\n  local max_index = #lst\n \
    \ local is_min = true\n  for i = 1, #lst do\n    if is_min then\n      result[i]\
    \ = min_value\n      min_index = min_index + 1\n      min_value = lst[min_index]\n\
    \      is_min = false\n    else\n      result[i] = max_value\n      max_index\
    \ = max_index - 1\n      max_value = lst[max_index]\n      is_min = true\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadz799ct.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpadz799ct.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpadz799ct.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = table.index_of(lst, min)\n    local\
    \ max_index = table.index_of(lst, max)\n    local min_found = false\n    local\
    \ max_found = false\n    for i = 1, #lst do\n        if i == min_index then\n\
    \            min_found = true\n        elseif i == max_index then\n          \
    \  max_found = true\n        end\n        if min_found and max_found then\n  \
    \          break\n        end\n    end\n    if min_found and max_found then\n\
    \        table.insert(result, min)\n        table.insert(result, max)\n      \
    \  table.remove(lst, min_index)\n        table.remove(lst, max_index - 1)\n  \
    \  elseif min_found then\n        table.insert(result, min)\n        table.remove(lst,\
    \ min_index)\n    elseif max_found then\n        table.insert(result, max)\n \
    \       table.remove(lst, max_index)\n    end\n    if #lst > 0 then\n        local\
    \ sub_result = strange_sort_list(lst)\n        for i = 1, #sub_result do\n   \
    \         table.insert(result, sub_result[i])\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphq85teuy.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphq85teuy.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphq85teuy.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while i <= #lst do\n    res[i] = min\n    res[#lst - i + 1]\
    \ = max\n    i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmap_107r.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmap_107r.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmap_107r.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx = 1\n    local\
    \ min_found = false\n    local max_found = false\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_idx = i\n            min_found\
    \ = true\n        end\n        if v == max then\n            max_idx = i\n   \
    \         max_found = true\n        end\n        if min_found and max_found then\n\
    \            break\n        end\n    end\n    local min_idx_found = false\n  \
    \  local max_idx_found = false\n    for i, v in ipairs(lst) do\n        if i ==\
    \ min_idx then\n            min_idx_found = true\n        end\n        if i ==\
    \ max_idx then\n            max_idx_found = true\n        end\n        if min_idx_found\
    \ and max_idx_found then\n            break\n        end\n        if i % 2 ==\
    \ 1 then\n            table.insert(result, min)\n        else\n            table.insert(result,\
    \ max)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzye2l825.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzye2l825.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzye2l825.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_val, max_val = min, max\n  \
    \  local min_found, max_found = false, false\n    local i = 1\n    while i <=\
    \ #lst do\n        if not min_found then\n            if lst[min_idx] == min_val\
    \ then\n                res[i] = min_val\n                min_found = true\n \
    \               i = i + 1\n            end\n            min_idx = min_idx + 1\n\
    \        end\n        if not max_found then\n            if lst[max_idx] == max_val\
    \ then\n                res[i] = max_val\n                max_found = true\n \
    \               i = i + 1\n            end\n            max_idx = max_idx + 1\n\
    \        end\n        if min_found and max_found then\n            min_val = min_val\
    \ + 1\n            max_val = max_val - 1\n            min_found, max_found = false,\
    \ false\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgb2dc8ky.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgb2dc8ky.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpgb2dc8ky.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = lst[min_index], lst[max_index]\n    local min_found, max_found =\
    \ false, false\n    local min_value_index, max_value_index = 1, 1\n    while min_index\
    \ <= max_index do\n        if not min_found then\n            min_value_index,\
    \ min_value = min_index, lst[min_index]\n            for i = min_index, max_index\
    \ do\n                if lst[i] < min_value then\n                    min_value_index,\
    \ min_value = i, lst[i]\n                end\n            end\n            min_found\
    \ = true\n        end\n        if not max_found then\n            max_value_index,\
    \ max_value = max_index, lst[max_index]\n            for i = max_index, min_index,\
    \ -1 do\n                if lst[i] > max_value then\n                    max_value_index,\
    \ max_value = i, lst[i]\n                end\n            end\n            max_found\
    \ = true\n        end\n        if min_found and max_found then\n            res[#res\
    \ + 1] = min_value\n            res[#res + 1] = max_value\n            min_index\
    \ = min_value_index + 1\n            max_index = max_value_index - 1\n       \
    \     min_found, max_found = false, false\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe05ij6bb.lua:51:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 8, 7, 7}\nstack traceback:\n\t\
    /tmp/tmpe05ij6bb.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    table.insert(res, min)\n \
    \   table.insert(res, max)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx - 1)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n \
    \       max = math.max(unpack(lst))\n        min_idx = 1\n        max_idx = 1\n\
    \        for i, v in ipairs(lst) do\n            if v == min then\n          \
    \      min_idx = i\n            elseif v == max then\n                max_idx\
    \ = i\n            end\n        end\n        table.insert(res, min)\n        table.insert(res,\
    \ max)\n        table.remove(lst, min_idx)\n        table.remove(lst, max_idx\
    \ - 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudjo3f3o.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpudjo3f3o.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpudjo3f3o.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_val, max_val\n    local min_idx, max_idx\n\
    \    local min_found, max_found\n    local i, j\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6_7lx3f7.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local n = #lst\n    local i = 1\n    local j = n\n  \
    \  local k = 1\n    while i <= n and j >= 1 do\n        if k % 2 == 1 then\n \
    \           res[k] = lst[i]\n            i = i + 1\n        else\n           \
    \ res[k] = lst[j]\n            j = j - 1\n        end\n        k = k + 1\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx02irbd.lua:33:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 2, 3, 3, 2, 4}\nstack traceback:\n\t\
    /tmp/tmpnx02irbd.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = 1\n  \
    \  for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        end\n        if v == max then\n            max_index = i\n    \
    \    end\n    end\n    local min_found = false\n    local max_found = false\n\
    \    for i, v in ipairs(lst) do\n        if i == min_index then\n            min_found\
    \ = true\n        end\n        if i == max_index then\n            max_found =\
    \ true\n        end\n        if min_found and max_found then\n            break\n\
    \        end\n    end\n    local min_first = false\n    if min_index < max_index\
    \ then\n        min_first = true\n    end\n    local i = 1\n    while i <= #lst\
    \ do\n        if min_first then\n            table.insert(result, min)\n     \
    \       min_first = false\n        else\n            table.insert(result, max)\n\
    \            min_first = true\n        end\n        i = i + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8nal8sz4.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8nal8sz4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8nal8sz4.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 0\n    local max_idx = 0\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_first = min_idx\
    \ < max_idx\n    local i = 1\n    while #lst > 0 do\n        if min_first then\n\
    \            table.insert(res, table.remove(lst, min_idx))\n            min_first\
    \ = false\n        else\n            table.insert(res, table.remove(lst, max_idx))\n\
    \            min_first = true\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptiom_tnv.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmptiom_tnv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmptiom_tnv.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local i = 1\n\
    \    local j = 1\n    local k = 1\n    while i <= #lst do\n        if i % 2 ==\
    \ 1 then\n            res[i] = min\n            min_idx = min_idx + 1\n      \
    \      min = math.min(unpack(lst, min_idx))\n        else\n            res[i]\
    \ = max\n            max_idx = max_idx + 1\n            max = math.max(unpack(lst,\
    \ max_idx))\n        end\n        i = i + 1\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3usloz_e.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp3usloz_e.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3usloz_e.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function get_min_max(lst)\n  \
    \  local min, max = lst[1], lst[1]\n    for i = 2, #lst do\n      if lst[i] <\
    \ min then min = lst[i] end\n      if lst[i] > max then max = lst[i] end\n   \
    \ end\n    return min, max\n  end\n  local function remove_min_max(lst, min, max)\n\
    \    local new_lst = {}\n    for i = 1, #lst do\n      if lst[i] ~= min and lst[i]\
    \ ~= max then\n        new_lst[#new_lst + 1] = lst[i]\n      end\n    end\n  \
    \  return new_lst\n  end\n  local function strange_sort(lst)\n    if #lst == 0\
    \ then return {} end\n    local min, max = get_min_max(lst)\n    local new_lst\
    \ = {min, max}\n    local remaining = remove_min_max(lst, min, max)\n    return\
    \ new_lst + strange_sort(remaining)\n  end\n  return strange_sort(lst)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv2840qgh.lua:35:\
    \ attempt to perform arithmetic on a table value (local 'new_lst')\nstack traceback:\n\
    \t/tmp/tmpv2840qgh.lua:35: in upvalue 'strange_sort'\n\t/tmp/tmpv2840qgh.lua:35:\
    \ in function </tmp/tmpv2840qgh.lua:30>\n\t(...tail calls...)\n\t/tmp/tmpv2840qgh.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local min_cnt = 0\n    local\
    \ max_cnt = 0\n    for i = 1, #lst do\n        if lst[i] == min then\n       \
    \     min_cnt = min_cnt + 1\n        end\n        if lst[i] == max then\n    \
    \        max_cnt = max_cnt + 1\n        end\n    end\n    for i = 1, #lst do\n\
    \        if i % 2 == 1 then\n            res[i] = min\n            min_idx = min_idx\
    \ + 1\n        else\n            res[i] = max\n            max_idx = max_idx -\
    \ 1\n        end\n    end\n    if min_cnt > max_cnt then\n        res[#lst] =\
    \ min\n    elseif min_cnt < max_cnt then\n        res[#lst] = max\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvatkc94t.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvatkc94t.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvatkc94t.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_found, max_found =\
    \ false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n         \
    \   if not min_found then\n                res[i] = min\n                min_found\
    \ = true\n            else\n                res[i] = max\n                max_found\
    \ = true\n            end\n        else\n            if not max_found then\n \
    \               res[i] = max\n                max_found = true\n            else\n\
    \                res[i] = min\n                min_found = true\n            end\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd0q08an1.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpd0q08an1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpd0q08an1.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        res[i] = min\n        res[#lst\
    \ - i + 1] = max\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_icrutb.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpr_icrutb.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpr_icrutb.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local asc = true\n  for i = 1, #lst do\n    if asc then\n      res[i] = min\n\
    \      min = min + 1\n    else\n      res[i] = max\n      max = max - 1\n    end\n\
    \    asc = not asc\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptrztsg1g.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmptrztsg1g.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmptrztsg1g.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i]\
    \ = min\n      min_idx = min_idx + 1\n      min = lst[min_idx]\n    else\n   \
    \   res[i] = max\n      max_idx = max_idx - 1\n      max = lst[max_idx]\n    end\n\
    \    i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnrk4x_pf.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpnrk4x_pf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpnrk4x_pf.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local function min_max(lst)\n        local min = lst[1]\n        local max\
    \ = lst[1]\n        for _, v in ipairs(lst) do\n            if v < min then\n\
    \                min = v\n            end\n            if v > max then\n     \
    \           max = v\n            end\n        end\n        return min, max\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa0cz02i6.lua:40: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_idx_used = false\n\
    \    local max_idx_used = false\n    for i = 1, #lst do\n        if i % 2 == 1\
    \ then\n            if not min_idx_used then\n                res[i] = min\n \
    \               min_idx_used = true\n            else\n                res[i]\
    \ = max\n                max_idx_used = true\n            end\n        else\n\
    \            if not max_idx_used then\n                res[i] = max\n        \
    \        max_idx_used = true\n            else\n                res[i] = min\n\
    \                min_idx_used = true\n            end\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4he4qjup.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4he4qjup.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4he4qjup.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found\
    \ = false\n    local max_found = false\n    local min_idx_found = false\n    local\
    \ max_idx_found = false\n    local i = 1\n    while i <= #lst do\n        if not\
    \ min_found then\n            if lst[i] <= min_val then\n                min_val\
    \ = lst[i]\n                min_idx = i\n            end\n            if i ==\
    \ #lst then\n                min_found = true\n                min_idx_found =\
    \ true\n            end\n        end\n        if not max_found then\n        \
    \    if lst[i] >= max_val then\n                max_val = lst[i]\n           \
    \     max_idx = i\n            end\n            if i == #lst then\n          \
    \      max_found = true\n                max_idx_found = true\n            end\n\
    \        end\n        if min_found and max_found then\n            if min_idx_found\
    \ then\n                result[#result + 1] = min_val\n                min_found\
    \ = false\n                min_idx_found = false\n                min_val = lst[max_idx\
    \ + 1]\n                min_idx = max_idx + 1\n                i = max_idx + 1\n\
    \            elseif max_idx_found then\n                result[#result + 1] =\
    \ max_val\n                max_found = false\n                max_idx_found =\
    \ false\n                max_val = lst[min_idx + 1]\n                max_idx =\
    \ min_idx + 1\n                i = min_idx + 1\n            end\n        end\n\
    \        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsffyj1_1.lua:68:\
    \ expected: {1, 4, 2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpsffyj1_1.lua:68:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_cnt = 0\n    local\
    \ max_cnt = 0\n    local min_val = min\n    local max_val = max\n    local min_idx\
    \ = min_idx\n    local max_idx = max_idx\n    local lst_len = #lst\n    for i\
    \ = 1, lst_len do\n        if i % 2 == 1 then\n            res[i] = min_val\n\
    \            min_cnt = min_cnt + 1\n            if min_cnt == lst_len / 2 then\n\
    \                min_val = max_val\n                min_idx = max_idx\n      \
    \      else\n                min_val = math.min(unpack(lst))\n               \
    \ for j, v in ipairs(lst) do\n                    if v == min_val then\n     \
    \                   min_idx = j\n                    end\n                end\n\
    \            end\n        else\n            res[i] = max_val\n            max_cnt\
    \ = max_cnt + 1\n            if max_cnt == lst_len / 2 then\n                max_val\
    \ = min_val\n                max_idx = min_idx\n            else\n           \
    \     max_val = math.max(unpack(lst))\n                for j, v in ipairs(lst)\
    \ do\n                    if v == max_val then\n                        max_idx\
    \ = j\n                    end\n                end\n            end\n       \
    \ end\n        table.remove(lst, min_idx)\n        table.remove(lst, max_idx -\
    \ 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpte1jwi4m.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpte1jwi4m.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpte1jwi4m.lua:70: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local n = #lst\n    local i = 1\n    while i <= n do\n\
    \        local min_i, min_v = min_index(lst)\n        table.insert(res, min_v)\n\
    \        table.remove(lst, min_i)\n        if i == n then\n            break\n\
    \        end\n        local max_i, max_v = max_index(lst)\n        table.insert(res,\
    \ max_v)\n        table.remove(lst, max_i)\n        i = i + 2\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxw4h_d9.lua:16:\
    \ attempt to call a nil value (global 'min_index')\nstack traceback:\n\t/tmp/tmpgxw4h_d9.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpgxw4h_d9.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local min_flag = true\n\
    \    for i = 1, #lst do\n        if min_flag then\n            res[i] = min\n\
    \            min_idx = min_idx + 1\n            min = math.min(unpack(lst, min_idx))\n\
    \        else\n            res[i] = max\n            max_idx = max_idx - 1\n \
    \           max = math.max(unpack(lst, 1, max_idx))\n        end\n        min_flag\
    \ = not min_flag\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeeda4j5r.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpeeda4j5r.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpeeda4j5r.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  local min_found, max_found = false, false\n\
    \  for i = 1, #lst do\n    if lst[i] == min and not min_found then\n      min_idx\
    \ = i\n      min_found = true\n    elseif lst[i] == max and not max_found then\n\
    \      max_idx = i\n      max_found = true\n    end\n  end\n  if min_idx < max_idx\
    \ then\n    for i = 1, #lst do\n      if i % 2 == 1 then\n        res[i] = min\n\
    \      else\n        res[i] = max\n      end\n    end\n  else\n    for i = 1,\
    \ #lst do\n      if i % 2 == 1 then\n        res[i] = max\n      else\n      \
    \  res[i] = min\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf0vuaozg.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf0vuaozg.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpf0vuaozg.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local len = #lst\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local i = 1\n    while i <= len do\n        if i\
    \ % 2 == 1 then\n            res[i] = min\n            min = min + 1\n       \
    \ else\n            res[i] = max\n            max = max - 1\n        end\n   \
    \     i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnxmyblg7.lua:14:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpnxmyblg7.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpnxmyblg7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    local min_removed = table.remove_at(lst, min_idx)\n    local max_removed\
    \ = table.remove_at(lst, max_idx)\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n        max\
    \ = math.max(unpack(lst))\n        min_idx = table.index_of(lst, min)\n      \
    \  max_idx = table.index_of(lst, max)\n        min_removed = table.remove_at(lst,\
    \ min_idx)\n        max_removed = table.remove_at(lst, max_idx)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpifwkyevu.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpifwkyevu.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpifwkyevu.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ idx = 1\n    while min_idx <= max_idx do\n        res[idx] = lst[min_idx]\n\
    \        idx = idx + 1\n        if min_idx ~= max_idx then\n            res[idx]\
    \ = lst[max_idx]\n            idx = idx + 1\n        end\n        min_idx = min_idx\
    \ + 1\n        max_idx = max_idx - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn25071r.lua:35:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpsn25071r.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if not min_found and lst[i] == min then\n\
    \            min_index = i\n            min_found = true\n        end\n      \
    \  if not max_found and lst[i] == max then\n            max_index = i\n      \
    \      max_found = true\n        end\n        if min_found and max_found then\n\
    \            break\n        end\n    end\n    local min_first = min_index < max_index\n\
    \    local i = 1\n    while i <= #lst do\n        if min_first then\n        \
    \    result[i] = min\n            min_first = false\n        else\n          \
    \  result[i] = max\n            min_first = true\n        end\n        i = i +\
    \ 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31fyqufd.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp31fyqufd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp31fyqufd.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n        elseif v ==\
    \ max then\n            max_index = i\n        end\n    end\n    local min_max\
    \ = min_index > max_index\n    local i = 1\n    while i <= #lst do\n        if\
    \ min_max then\n            res[i] = min\n            res[i + 1] = max\n     \
    \       min_max = false\n        else\n            res[i] = max\n            res[i\
    \ + 1] = min\n            min_max = true\n        end\n        i = i + 2\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmb2yvpaj.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmb2yvpaj.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmb2yvpaj.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, #lst\n    local min_cnt, max_cnt = 0, 0\n   \
    \ for i = 1, #lst do\n        if lst[i] == min then\n            min_cnt = min_cnt\
    \ + 1\n        elseif lst[i] == max then\n            max_cnt = max_cnt + 1\n\
    \        end\n    end\n    while min_idx <= max_idx do\n        if min_cnt > 0\
    \ then\n            res[min_idx] = min\n            min_idx = min_idx + 1\n  \
    \          min_cnt = min_cnt - 1\n        end\n        if max_cnt > 0 then\n \
    \           res[max_idx] = max\n            max_idx = max_idx - 1\n          \
    \  max_cnt = max_cnt - 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsyznrao.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpnsyznrao.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpnsyznrao.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = 1\n  local idx = 1\n  while idx <= #lst\
    \ do\n    if idx % 2 == 1 then\n      res[idx] = min\n      min_idx = min_idx\
    \ + 1\n      min = math.min(unpack(lst, min_idx))\n    else\n      res[idx] =\
    \ max\n      max_idx = max_idx + 1\n      max = math.max(unpack(lst, max_idx))\n\
    \    end\n    idx = idx + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4aii7fm.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj4aii7fm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpj4aii7fm.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local i = 1\n    while i <= #lst do\n        if i\
    \ % 2 == 1 then\n            result[i] = min\n            min = min + 1\n    \
    \    else\n            result[i] = max\n            max = max - 1\n        end\n\
    \        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiks8iskq.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpiks8iskq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpiks8iskq.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            res[i] = min\n        else\n            res[i] = max\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvg1tyw_q.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvg1tyw_q.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpvg1tyw_q.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local\
    \ res = {}\n  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n     \
    \ table.insert(res, min)\n      table.remove(lst, table.index_of(lst, min))\n\
    \    else\n      table.insert(res, max)\n      table.remove(lst, table.index_of(lst,\
    \ max))\n    end\n    min = math.min(unpack(lst))\n    max = math.max(unpack(lst))\n\
    \    i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp94kv4ozd.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp94kv4ozd.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp94kv4ozd.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_index = i\n        elseif lst[i] == max then\n\
    \            max_index = i\n        end\n    end\n    local min_flag = true\n\
    \    for i = 1, #lst do\n        if min_flag then\n            result[i] = min\n\
    \            min_flag = false\n        else\n            result[i] = max\n   \
    \         min_flag = true\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3ulsxjh.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpw3ulsxjh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpw3ulsxjh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = 1, #lst\n  local min_found, max_found = false,\
    \ false\n  for i = 1, #lst do\n    if not min_found and lst[i] == min then\n \
    \     min_index = i\n      min_found = true\n    elseif not max_found and lst[i]\
    \ == max then\n      max_index = i\n      max_found = true\n    end\n    if min_found\
    \ and max_found then\n      break\n    end\n  end\n  local min_removed, max_removed\
    \ = false, false\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      if not min_removed\
    \ then\n        result[i] = min\n        min_removed = true\n      else\n    \
    \    result[i] = lst[min_index + 1]\n        min_index = min_index + 1\n     \
    \ end\n    else\n      if not max_removed then\n        result[i] = max\n    \
    \    max_removed = true\n      else\n        result[i] = lst[max_index - 1]\n\
    \        max_index = max_index - 1\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpio3v_fis.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpio3v_fis.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpio3v_fis.lua:54: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_found, max_found\n    local i, j\n    local n = #lst\n    local\
    \ k = 1\n    while k <= n do\n        min_found = false\n        max_found = false\n\
    \        for i = 1, n do\n            if not result[i] then\n                if\
    \ not min_found then\n                    min_index = i\n                    min_value\
    \ = lst[i]\n                    min_found = true\n                elseif lst[i]\
    \ < min_value then\n                    min_index = i\n                    min_value\
    \ = lst[i]\n                end\n                if not max_found then\n     \
    \               max_index = i\n                    max_value = lst[i]\n      \
    \              max_found = true\n                elseif lst[i] > max_value then\n\
    \                    max_index = i\n                    max_value = lst[i]\n \
    \               end\n            end\n        end\n        result[k] = min_value\n\
    \        k = k + 1\n        if k <= n then\n            result[k] = max_value\n\
    \            k = k + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdy3bhu5j.lua:55:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 3, 4}\nstack traceback:\n\t/tmp/tmpdy3bhu5j.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = table.index_of(lst, min)\n  local max_idx = table.index_of(lst,\
    \ max)\n  table.remove(lst, min_idx)\n  table.remove(lst, max_idx)\n  table.insert(res,\
    \ min)\n  table.insert(res, max)\n  while #lst > 0 do\n    min = math.min(unpack(lst))\n\
    \    max = math.max(unpack(lst))\n    min_idx = table.index_of(lst, min)\n   \
    \ max_idx = table.index_of(lst, max)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx)\n    table.insert(res, min)\n    table.insert(res, max)\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ty4cytx.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp3ty4cytx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3ty4cytx.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ i = 1\n    local min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n\
    \    while min_idx <= max_idx do\n        if i % 2 == 1 then\n            res[i]\
    \ = min_val\n            min_idx = min_idx + 1\n            min_val = lst[min_idx]\n\
    \        else\n            res[i] = max_val\n            max_idx = max_idx - 1\n\
    \            max_val = lst[max_idx]\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz3sgdzg.lua:39:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpgz3sgdzg.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    local min_found = false\n \
    \   local max_found = false\n    for i, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_idx = i\n            min_found = true\n        end\n \
    \       if v == max then\n            max_idx = i\n            max_found = true\n\
    \        end\n        if min_found and max_found then\n            break\n   \
    \     end\n    end\n    local idx = 1\n    while idx <= #lst do\n        if idx\
    \ % 2 == 1 then\n            table.insert(res, min)\n            table.remove(lst,\
    \ min_idx)\n            min = math.min(unpack(lst))\n            min_idx = 1\n\
    \            min_found = false\n            for i, v in ipairs(lst) do\n     \
    \           if v == min then\n                    min_idx = i\n              \
    \      min_found = true\n                end\n                if min_found then\n\
    \                    break\n                end\n            end\n        else\n\
    \            table.insert(res, max)\n            table.remove(lst, max_idx)\n\
    \            max = math.max(unpack(lst))\n            max_idx = 1\n          \
    \  max_found = false\n            for i, v in ipairs(lst) do\n               \
    \ if v == max then\n                    max_idx = i\n                    max_found\
    \ = true\n                end\n                if max_found then\n           \
    \         break\n                end\n            end\n        end\n        idx\
    \ = idx + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k4pd08_.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7k4pd08_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp7k4pd08_.lua:73: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, #lst\n    local i = 1\n    while i <= #lst\
    \ do\n        if i % 2 == 1 then\n            result[i] = min\n            min_index\
    \ = min_index + 1\n            min = math.min(unpack(lst, min_index))\n      \
    \  else\n            result[i] = max\n            max_index = max_index - 1\n\
    \            max = math.max(unpack(lst, 1, max_index))\n        end\n        i\
    \ = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpns3w7twm.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpns3w7twm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpns3w7twm.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while min <= max do\n        res[i] = min\n        i = i\
    \ + 1\n        res[i] = max\n        i = i + 1\n        min = min + 1\n      \
    \  max = max - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzzc7ep1p.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzzc7ep1p.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzzc7ep1p.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function min_max(lst)\n    local min, max = lst[1], lst[1]\n    for _,\
    \ v in ipairs(lst) do\n      if v < min then min = v end\n      if v > max then\
    \ max = v end\n    end\n    return min, max\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkw0g73zp.lua:35: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i, v in ipairs(lst) do\n        if\
    \ v == min_val then\n            min_idx = i\n        elseif v == max_val then\n\
    \            max_idx = i\n        end\n    end\n    local min_idx, max_idx = min_idx,\
    \ max_idx\n    local min_val, max_val = min_val, max_val\n    local min_idx_used,\
    \ max_idx_used = false, false\n    local min_val_used, max_val_used = false, false\n\
    \    for i = 1, #lst do\n        if i % 2 == 1 then\n            if not min_val_used\
    \ then\n                res[i] = min_val\n                min_val_used = true\n\
    \            else\n                res[i] = lst[min_idx]\n                min_idx_used\
    \ = true\n            end\n        else\n            if not max_val_used then\n\
    \                res[i] = max_val\n                max_val_used = true\n     \
    \       else\n                res[i] = lst[max_idx]\n                max_idx_used\
    \ = true\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpknmjcddm.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpknmjcddm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpknmjcddm.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    local min_val = min\n    local\
    \ max_val = max\n    local min_found = false\n    local max_found = false\n  \
    \  local min_cnt = 0\n    local max_cnt = 0\n    for i = 1, #lst do\n        if\
    \ lst[i] == min then\n            min_cnt = min_cnt + 1\n        end\n       \
    \ if lst[i] == max then\n            max_cnt = max_cnt + 1\n        end\n    end\n\
    \    for i = 1, #lst do\n        if lst[i] == min and not min_found then\n   \
    \         min_idx = i\n            min_found = true\n        end\n        if lst[i]\
    \ == max and not max_found then\n            max_idx = i\n            max_found\
    \ = true\n        end\n    end\n    for i = 1, #lst do\n        if i % 2 == 1\
    \ then\n            res[i] = min_val\n            min_cnt = min_cnt - 1\n    \
    \        if min_cnt == 0 then\n                min_val = max_val\n           \
    \ end\n        else\n            res[i] = max_val\n            max_cnt = max_cnt\
    \ - 1\n            if max_cnt == 0 then\n                max_val = min_val\n \
    \           end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd7xk_0b6.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpd7xk_0b6.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpd7xk_0b6.lua:62: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function min_max(lst)\n    local min, max = lst[1], lst[1]\n    for _,\
    \ v in ipairs(lst) do\n      if v < min then min = v end\n      if v > max then\
    \ max = v end\n    end\n    return min, max\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkw0g73zp.lua:35: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local lst_len = #lst\n    local result = {}\n    local min_index, max_index\n\
    \    local min_value, max_value\n    local min_value_set, max_value_set = false,\
    \ false\n    local min_value_set_count, max_value_set_count = 0, 0\n    local\
    \ i = 1\n    while i <= lst_len do\n        if not min_value_set then\n      \
    \      min_value, min_index = math.min(unpack(lst))\n            min_value_set\
    \ = true\n            min_value_set_count = min_value_set_count + 1\n        end\n\
    \        if not max_value_set then\n            max_value, max_index = math.max(unpack(lst))\n\
    \            max_value_set = true\n            max_value_set_count = max_value_set_count\
    \ + 1\n        end\n        if min_value_set_count % 2 == 1 then\n           \
    \ table.insert(result, min_value)\n            table.remove(lst, min_index)\n\
    \            min_value_set = false\n        else\n            table.insert(result,\
    \ max_value)\n            table.remove(lst, max_index)\n            max_value_set\
    \ = false\n        end\n        i = i + 1\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaqyk2dfn.lua:21:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpaqyk2dfn.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpaqyk2dfn.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min_index, max_index\n  local min_value, max_value\n\
    \  local min_value_set, max_value_set = false, false\n  local i = 1\n  while i\
    \ <= #lst do\n    if not min_value_set then\n      min_value, min_index = math.min(unpack(lst))\n\
    \      min_value_set = true\n    else\n      max_value, max_index = math.max(unpack(lst))\n\
    \      max_value_set = true\n    end\n    if min_value_set then\n      table.insert(result,\
    \ min_value)\n      table.remove(lst, min_index)\n      min_value_set = false\n\
    \      i = i + 1\n    end\n    if max_value_set then\n      table.insert(result,\
    \ max_value)\n      table.remove(lst, max_index)\n      max_value_set = false\n\
    \      i = i + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpas4lmgsz.lua:19:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpas4lmgsz.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpas4lmgsz.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local min_removed\
    \ = table.remove(lst, min_idx)\n    local max_removed = table.remove(lst, max_idx)\n\
    \    table.insert(res, min_removed)\n    table.insert(res, max_removed)\n    while\
    \ #lst > 0 do\n        local min = math.min(unpack(lst))\n        local max =\
    \ math.max(unpack(lst))\n        local min_idx = 1\n        local max_idx = 1\n\
    \        for i = 1, #lst do\n            if lst[i] == min then\n             \
    \   min_idx = i\n            end\n            if lst[i] == max then\n        \
    \        max_idx = i\n            end\n        end\n        local min_removed\
    \ = table.remove(lst, min_idx)\n        local max_removed = table.remove(lst,\
    \ max_idx)\n        table.insert(res, min_removed)\n        table.insert(res,\
    \ max_removed)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpba4g9w4j.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpba4g9w4j.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpba4g9w4j.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = #lst\n  local min_done = false\n \
    \ local max_done = false\n  for i = 1, #lst do\n    if i % 2 == 1 then\n     \
    \ if not min_done then\n        res[i] = min\n        min_done = true\n      else\n\
    \        res[i] = lst[min_index]\n        min_index = min_index + 1\n      end\n\
    \    else\n      if not max_done then\n        res[i] = max\n        max_done\
    \ = true\n      else\n        res[i] = lst[max_index]\n        max_index = max_index\
    \ - 1\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm95wptel.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpm95wptel.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpm95wptel.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_value, max_value\n    local min_index, max_index\n\
    \    local min_found, max_found\n    local i, j\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvwpdenoj.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx, max_idx = 1, #lst\n    local min, max\
    \ = lst[min_idx], lst[max_idx]\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] < min then\n                min = lst[i]\n                min_idx\
    \ = i\n            end\n            if i == #lst then\n                res[#res\
    \ + 1] = min\n                min_found = true\n                i = min_idx\n\
    \            end\n        elseif not max_found then\n            if lst[i] > max\
    \ then\n                max = lst[i]\n                max_idx = i\n          \
    \  end\n            if i == #lst then\n                res[#res + 1] = max\n \
    \               max_found = true\n                i = max_idx\n            end\n\
    \        else\n            if lst[i] < min then\n                min = lst[i]\n\
    \                min_idx = i\n            end\n            if i == #lst then\n\
    \                res[#res + 1] = min\n                min_found = true\n     \
    \           i = min_idx\n            end\n        end\n        i = i + 1\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqn68p3j.lua:57:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmptqn68p3j.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local function strange_sort_list_iter(lst, acc)\n        if #lst == 0 then\n\
    \            return acc\n        end\n        local min = math.min(unpack(lst))\n\
    \        local max = math.max(unpack(lst))\n        local min_idx = find_first_idx(lst,\
    \ min)\n        local max_idx = find_first_idx(lst, max)\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx - 1)\n        table.insert(acc,\
    \ min)\n        table.insert(acc, max)\n        return strange_sort_list_iter(lst,\
    \ acc)\n    end\n    return strange_sort_list_iter(lst, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoxluptpd.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpoxluptpd.lua:16:\
    \ in function </tmp/tmpoxluptpd.lua:12>\n\t(...tail calls...)\n\t/tmp/tmpoxluptpd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx = #lst\n   \
    \ local min_val = min\n    local max_val = max\n    local min_found = false\n\
    \    local max_found = false\n    local i = 1\n    while i <= #lst do\n      \
    \  if not min_found then\n            if lst[min_idx] == min_val then\n      \
    \          table.insert(sorted, min_val)\n                min_found = true\n \
    \               min_val = math.min(unpack(lst))\n                min_idx = min_idx\
    \ + 1\n                i = i + 1\n            else\n                min_idx =\
    \ min_idx + 1\n            end\n        elseif not max_found then\n          \
    \  if lst[max_idx] == max_val then\n                table.insert(sorted, max_val)\n\
    \                max_found = true\n                max_val = math.max(unpack(lst))\n\
    \                max_idx = max_idx - 1\n                i = i + 1\n          \
    \  else\n                max_idx = max_idx - 1\n            end\n        else\n\
    \            min_found = false\n            max_found = false\n        end\n \
    \   end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvuvotb86.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvuvotb86.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvuvotb86.lua:54: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min_idx, max_idx\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_cnt, max_cnt = 0, 0\n  for i, v in ipairs(lst)\
    \ do\n    if v == min then\n      min_cnt = min_cnt + 1\n      min_idx = i\n \
    \   elseif v == max then\n      max_cnt = max_cnt + 1\n      max_idx = i\n   \
    \ end\n  end\n  local min_idx_cnt, max_idx_cnt = 0, 0\n  for i = 1, #lst do\n\
    \    if i % 2 == 1 then\n      if min_idx_cnt < min_cnt then\n        min_idx_cnt\
    \ = min_idx_cnt + 1\n        res[i] = min\n      else\n        res[i] = max\n\
    \      end\n    else\n      if max_idx_cnt < max_cnt then\n        max_idx_cnt\
    \ = max_idx_cnt + 1\n        res[i] = max\n      else\n        res[i] = min\n\
    \      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaa9g60eg.lua:14:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpaa9g60eg.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpaa9g60eg.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_used = false\n \
    \   local max_used = false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            if not min_used then\n                res[i] = min\n            \
    \    min_used = true\n            else\n                res[i] = max\n       \
    \         max_used = true\n            end\n        else\n            if not max_used\
    \ then\n                res[i] = max\n                max_used = true\n      \
    \      else\n                res[i] = min\n                min_used = true\n \
    \           end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpydcnm15z.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpydcnm15z.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpydcnm15z.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    for i = 1, #lst do\n        if not min_found and lst[i] == min then\n   \
    \         min_idx = i\n            min_found = true\n        end\n        if not\
    \ max_found and lst[i] == max then\n            max_idx = i\n            max_found\
    \ = true\n        end\n    end\n    local i = 1\n    while i <= #lst do\n    \
    \    if i % 2 == 1 then\n            table.insert(res, lst[min_idx])\n       \
    \     table.remove(lst, min_idx)\n        else\n            table.insert(res,\
    \ lst[max_idx])\n            table.remove(lst, max_idx)\n        end\n       \
    \ i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp64az2u4m.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp64az2u4m.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp64az2u4m.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = min + 1\n        else\n            res[i]\
    \ = max\n            max = max - 1\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdo7qojbf.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdo7qojbf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdo7qojbf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_value_count,\
    \ max_value_count = 0, 0\n    for _, v in ipairs(lst) do\n        if v == min_value\
    \ then\n            min_value_count = min_value_count + 1\n        elseif v ==\
    \ max_value then\n            max_value_count = max_value_count + 1\n        end\n\
    \    end\n    local min_value_index, max_value_index = 1, #lst - min_value_count\
    \ + 1\n    for i = 1, #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = min_value\n            min_value_index = min_value_index + 1\n        else\n\
    \            res[i] = max_value\n            max_value_index = max_value_index\
    \ + 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptf_l_cck.lua:14:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmptf_l_cck.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmptf_l_cck.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local min_found\
    \ = false\n    local max_found = false\n    for i = 1, #lst do\n        if i %\
    \ 2 == 1 then\n            if not min_found then\n                res[i] = min\n\
    \                min_found = true\n            else\n                res[i] =\
    \ max\n                max_found = true\n            end\n        else\n     \
    \       if not max_found then\n                res[i] = max\n                max_found\
    \ = true\n            else\n                res[i] = min\n                min_found\
    \ = true\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplfjt091u.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmplfjt091u.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplfjt091u.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_found, max_found\n    local i, j\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83ti2wmc.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_idx_found, max_idx_found = false, false\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then\n      if not min_idx_found then\n        res[i]\
    \ = min\n        min_idx_found = true\n      else\n        res[i] = max\n    \
    \    max_idx_found = true\n      end\n    else\n      if not max_idx_found then\n\
    \        res[i] = max\n        max_idx_found = true\n      else\n        res[i]\
    \ = min\n        min_idx_found = true\n      end\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4a_bxj1.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmps4a_bxj1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmps4a_bxj1.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_val, max_val = min,\
    \ max\n    for i = 1, #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = min_val\n            min_val = lst[min_idx % #lst + 1]\n            min_idx\
    \ = min_idx % #lst + 1\n        else\n            res[i] = max_val\n         \
    \   max_val = lst[max_idx % #lst + 1]\n            max_idx = max_idx % #lst +\
    \ 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9bsxgior.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9bsxgior.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp9bsxgior.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local min_index, max_index = 1, #lst\n  local result = {}\n  local i = 1\n\
    \  while i <= #lst do\n    result[i] = lst[min_index]\n    i = i + 1\n    if i\
    \ <= #lst then\n      result[i] = lst[max_index]\n      i = i + 1\n    end\n \
    \   min_index = min_index + 1\n    max_index = max_index - 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5gpve9v.lua:34:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpk5gpve9v.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      sorted[i]\
    \ = min\n      min = min + 1\n    else\n      sorted[i] = max\n      max = max\
    \ - 1\n    end\n    i = i + 1\n  end\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqoqnxrio.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqoqnxrio.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqoqnxrio.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local n = #lst\n  local i = 1\n  local j = n\n  local k =\
    \ 1\n  while i <= n and j >= 1 do\n    res[k] = lst[i]\n    res[k + 1] = lst[j]\n\
    \    i = i + 1\n    j = j - 1\n    k = k + 2\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzkcjuu9.lua:30:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 2, 3, 3, 2, 4, 1}\nstack traceback:\n\
    \t/tmp/tmpvzkcjuu9.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index = 1\n    local max_index = #lst\n\
    \    local min_value = lst[min_index]\n    local max_value = lst[max_index]\n\
    \    local min_found = false\n    local max_found = false\n    local i = 1\n \
    \   while i <= #lst do\n        if not min_found then\n            min_value =\
    \ lst[min_index]\n            min_found = true\n        end\n        if not max_found\
    \ then\n            max_value = lst[max_index]\n            max_found = true\n\
    \        end\n        if i % 2 == 1 then\n            result[i] = min_value\n\
    \            min_found = false\n            min_index = min_index + 1\n      \
    \  else\n            result[i] = max_value\n            max_found = false\n  \
    \          max_index = max_index - 1\n        end\n        i = i + 1\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k5ky25f.lua:49:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmp6k5ky25f.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local len = #lst\n  local i = 1\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_i, max_i = 0, 0\n  while i <= len do\n  \
    \  if i % 2 == 1 then\n      min_i = min_i + 1\n      res[i] = min\n      min\
    \ = math.min(unpack(lst))\n    else\n      max_i = max_i + 1\n      res[i] = max\n\
    \      max = math.max(unpack(lst))\n    end\n    i = i + 1\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfy1o9aur.lua:15:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpfy1o9aur.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpfy1o9aur.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min_val, max_val\n  while #lst > 0 do\n    min_val\
    \ = math.min(unpack(lst))\n    max_val = math.max(unpack(lst))\n    table.insert(result,\
    \ min_val)\n    table.insert(result, max_val)\n    table.remove_value(lst, min_val)\n\
    \    table.remove_value(lst, max_val)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmtiowbj6.lua:15:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmtiowbj6.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpmtiowbj6.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_is_next\
    \ = true\n    while min_idx <= max_idx do\n        if min_is_next then\n     \
    \       table.insert(res, min_val)\n            min_idx = min_idx + 1\n      \
    \      min_val = lst[min_idx]\n        else\n            table.insert(res, max_val)\n\
    \            max_idx = max_idx - 1\n            max_val = lst[max_idx]\n     \
    \   end\n        min_is_next = not min_is_next\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90zx_elo.lua:39:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmp90zx_elo.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(res,\
    \ min)\n      table.remove(lst, table.index_of(lst, min))\n    else\n      table.insert(res,\
    \ max)\n      table.remove(lst, table.index_of(lst, max))\n    end\n    min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    i = i + 1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqx69zu08.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqx69zu08.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqx69zu08.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function strange_sort(lst, res)\n    if #lst == 0 then\n      return\
    \ res\n    end\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_i = table.indexof(lst, min)\n    local max_i = table.indexof(lst,\
    \ max)\n    table.remove(lst, min_i)\n    table.remove(lst, max_i - 1)\n    table.insert(res,\
    \ min)\n    table.insert(res, max)\n    return strange_sort(lst, res)\n  end\n\
    \  return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8tdmosei.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8tdmosei.lua:16:\
    \ in function </tmp/tmp8tdmosei.lua:12>\n\t(...tail calls...)\n\t/tmp/tmp8tdmosei.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = min + 1\n        else\n            res[i]\
    \ = max\n            max = max - 1\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdo7qojbf.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdo7qojbf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdo7qojbf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] == min then\n                min_idx = i\n                min_found\
    \ = true\n            end\n        end\n        if not max_found then\n      \
    \      if lst[i] == max then\n                max_idx = i\n                max_found\
    \ = true\n            end\n        end\n        if min_found and max_found then\n\
    \            break\n        end\n        i = i + 1\n    end\n    local min_val,\
    \ max_val = min, max\n    local min_removed, max_removed = false, false\n    for\
    \ i = 1, #lst do\n        if not min_removed then\n            res[i] = min_val\n\
    \            min_removed = true\n        elseif not max_removed then\n       \
    \     res[i] = max_val\n            max_removed = true\n        else\n       \
    \     min_val = math.min(unpack(lst))\n            max_val = math.max(unpack(lst))\n\
    \            min_removed = false\n            max_removed = false\n          \
    \  i = i - 1\n        end\n        table.remove(lst, min_idx)\n        table.remove(lst,\
    \ max_idx - 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9kqrj3_.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpq9kqrj3_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpq9kqrj3_.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] == min then\n                min_idx = i\n                min_found\
    \ = true\n            end\n        end\n        if not max_found then\n      \
    \      if lst[i] == max then\n                max_idx = i\n                max_found\
    \ = true\n            end\n        end\n        if min_found and max_found then\n\
    \            break\n        end\n        i = i + 1\n    end\n    local min_removed,\
    \ max_removed = false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            if not min_removed then\n                res[i] = min\n         \
    \       min_removed = true\n            else\n                res[i] = table.remove(lst,\
    \ min_idx)\n            end\n        else\n            if not max_removed then\n\
    \                res[i] = max\n                max_removed = true\n          \
    \  else\n                res[i] = table.remove(lst, max_idx)\n            end\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprv7z8shj.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmprv7z8shj.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmprv7z8shj.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = lst[min_index], lst[max_index]\n    local is_min = true\n    for\
    \ i = 1, #lst do\n        if is_min then\n            result[i] = min_value\n\
    \            min_index = min_index + 1\n            min_value = lst[min_index]\n\
    \            is_min = false\n        else\n            result[i] = max_value\n\
    \            max_index = max_index - 1\n            max_value = lst[max_index]\n\
    \            is_min = true\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9780q9d.lua:38:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpc9780q9d.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function strange_sort(lst, res)\n\
    \    if #lst == 0 then return res end\n    local m = min(unpack(lst))\n    local\
    \ M = max(unpack(lst))\n    local lst_new = {}\n    for i = 1, #lst do\n     \
    \ if lst[i] ~= m and lst[i] ~= M then\n        lst_new[#lst_new + 1] = lst[i]\n\
    \      end\n    end\n    res[#res + 1] = m\n    res[#res + 1] = M\n    return\
    \ strange_sort(lst_new, res)\n  end\n  return strange_sort(lst, {})\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8vmwgqyw.lua:15:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8vmwgqyw.lua:15:\
    \ in function </tmp/tmp8vmwgqyw.lua:13>\n\t(...tail calls...)\n\t/tmp/tmp8vmwgqyw.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local n = #lst\n    local i = 1\n    local j = n\n  \
    \  local k = 1\n    while i <= n and j >= 1 do\n        res[k] = lst[i]\n    \
    \    k = k + 1\n        res[k] = lst[j]\n        k = k + 1\n        i = i + 1\n\
    \        j = j - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_7nuisg.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 2, 3, 3, 2, 4, 1}\nstack traceback:\n\
    \t/tmp/tmpr_7nuisg.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_idx, max_idx = min_idx, max_idx\n  local min_val, max_val\
    \ = min, max\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      res[i] = min_val\n\
    \      min_val = nil\n    else\n      res[i] = max_val\n      max_val = nil\n\
    \    end\n  end\n  for i = 1, #lst do\n    if not res[i] then\n      if i % 2\
    \ == 1 then\n        res[i] = max_val\n      else\n        res[i] = min_val\n\
    \      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4k_gtd1n.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4k_gtd1n.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4k_gtd1n.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local idx = 1\n    while idx\
    \ <= #lst do\n        if idx % 2 == 1 then\n            res[idx] = min\n     \
    \       min_idx = min_idx + 1\n        else\n            res[idx] = max\n    \
    \        max_idx = max_idx + 1\n        end\n        idx = idx + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3thc1vk.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpy3thc1vk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpy3thc1vk.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i] = min\n\
    \      table.remove(lst, table.index_of(lst, min))\n    else\n      res[i] = max\n\
    \      table.remove(lst, table.index_of(lst, max))\n    end\n    min = math.min(unpack(lst))\n\
    \    max = math.max(unpack(lst))\n    i = i + 1\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9j2tx7b.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_9j2tx7b.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_9j2tx7b.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min_idx = 1\n  local max_idx = #lst\n  local min_val\
    \ = lst[min_idx]\n  local max_val = lst[max_idx]\n  local min_found = false\n\
    \  local max_found = false\n  local i = 1\n  while i <= #lst do\n    if not min_found\
    \ then\n      for j = min_idx, max_idx do\n        if lst[j] < min_val then\n\
    \          min_val = lst[j]\n          min_idx = j\n        end\n      end\n \
    \     res[i] = min_val\n      min_found = true\n      i = i + 1\n    end\n   \
    \ if not max_found then\n      for j = max_idx, min_idx, -1 do\n        if lst[j]\
    \ > max_val then\n          max_val = lst[j]\n          max_idx = j\n        end\n\
    \      end\n      res[i] = max_val\n      max_found = true\n      i = i + 1\n\
    \    end\n    min_found = false\n    max_found = false\n    min_val = lst[min_idx]\n\
    \    max_val = lst[max_idx]\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ycrkvph.lua:54:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp8ycrkvph.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    local idx = 1\n    while idx\
    \ <= #lst do\n        if idx % 2 == 1 then\n            res[idx] = min\n     \
    \       min_idx = min_idx + 1\n            min = math.min(unpack(lst, min_idx))\n\
    \        else\n            res[idx] = max\n            max_idx = max_idx + 1\n\
    \            max = math.max(unpack(lst, max_idx))\n        end\n        idx =\
    \ idx + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1lr5fpsh.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1lr5fpsh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1lr5fpsh.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(t)\n    local\
    \ mn, mx = min(unpack(t)), max(unpack(t))\n    local mn_i, mx_i = 0, 0\n    for\
    \ i, v in ipairs(t) do\n      if v == mn then mn_i = i end\n      if v == mx then\
    \ mx_i = i end\n    end\n    return mn, mx, mn_i, mx_i\n  end\n  local function\
    \ remove(t, i)\n    local r = {}\n    for j, v in ipairs(t) do\n      if j ~=\
    \ i then r[#r + 1] = v end\n    end\n    return r\n  end\n  local function strange_sort(t)\n\
    \    if #t == 0 then return {} end\n    local mn, mx, mn_i, mx_i = min_max(t)\n\
    \    local r = {mn, mx}\n    local t1, t2 = remove(t, mn_i), remove(t, mx_i)\n\
    \    local r1, r2 = strange_sort(t1), strange_sort(t2)\n    for i = 1, #r1 do\
    \ r[#r + 1] = r1[i] end\n    for i = 1, #r2 do r[#r + 1] = r2[i] end\n    return\
    \ r\n  end\n  return strange_sort(lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphronaj_k.lua:14:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphronaj_k.lua:14:\
    \ in upvalue 'min_max'\n\t/tmp/tmphronaj_k.lua:31: in function </tmp/tmphronaj_k.lua:29>\n\
    \t(...tail calls...)\n\t/tmp/tmphronaj_k.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min_idx = 1\n  local max_idx = #lst\n  local min_val\
    \ = lst[min_idx]\n  local max_val = lst[max_idx]\n  local min_found = false\n\
    \  local max_found = false\n  local i = 1\n  while i <= #lst do\n    if not min_found\
    \ then\n      for j = min_idx, max_idx do\n        if lst[j] < min_val then\n\
    \          min_val = lst[j]\n          min_idx = j\n        end\n      end\n \
    \     res[i] = min_val\n      min_found = true\n      i = i + 1\n    end\n   \
    \ if not max_found then\n      for j = max_idx, min_idx, -1 do\n        if lst[j]\
    \ > max_val then\n          max_val = lst[j]\n          max_idx = j\n        end\n\
    \      end\n      res[i] = max_val\n      max_found = true\n      i = i + 1\n\
    \    end\n    min_found = false\n    max_found = false\n    min_val = lst[min_idx]\n\
    \    max_val = lst[max_idx]\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ycrkvph.lua:54:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp8ycrkvph.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  if #lst == 0 then\n    return {}\n  end\n  local min = math.min(unpack(lst))\n\
    \  local max = math.max(unpack(lst))\n  local new_lst = {}\n  local i = 1\n  while\
    \ #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(new_lst, min)\n    \
    \  table.remove(lst, table.index_of(lst, min))\n    else\n      table.insert(new_lst,\
    \ max)\n      table.remove(lst, table.index_of(lst, max))\n    end\n    min =\
    \ math.min(unpack(lst))\n    max = math.max(unpack(lst))\n    i = i + 1\n  end\n\
    \  return new_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr35k9_1b.lua:15:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpr35k9_1b.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpr35k9_1b.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = 1, 1\n  local min_found, max_found = false, false\n\
    \  for i = 1, #lst do\n    if lst[i] == min then\n      min_index = i\n      min_found\
    \ = true\n    end\n    if lst[i] == max then\n      max_index = i\n      max_found\
    \ = true\n    end\n    if min_found and max_found then\n      break\n    end\n\
    \  end\n  local min_first = min_index < max_index\n  local min_max_index = min_first\
    \ and min_index or max_index\n  local max_min_index = min_first and max_index\
    \ or min_index\n  local min_max_value = min_first and min or max\n  local max_min_value\
    \ = min_first and max or min\n  for i = 1, #lst do\n    if i % 2 == 1 then\n \
    \     result[i] = min_max_value\n      min_max_value = lst[min_max_index]\n  \
    \    min_max_index = min_max_index + 1\n    else\n      result[i] = max_min_value\n\
    \      max_min_value = lst[max_min_index]\n      max_min_index = max_min_index\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbigcr0g3.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbigcr0g3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbigcr0g3.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min_index, max_index\n  local min, max\n  local\
    \ i = 1\n  while #lst > 0 do\n    min_index, max_index = 1, 1\n    min, max =\
    \ lst[1], lst[1]\n    for j = 1, #lst do\n      if lst[j] < min then\n       \
    \ min = lst[j]\n        min_index = j\n      end\n      if lst[j] > max then\n\
    \        max = lst[j]\n        max_index = j\n      end\n    end\n    if i % 2\
    \ == 1 then\n      result[i] = min\n      table.remove(lst, min_index)\n    else\n\
    \      result[i] = max\n      table.remove(lst, max_index)\n    end\n    i = i\
    \ + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_value_found, max_value_found\n    local min_value_found_index,\
    \ max_value_found_index\n    local lst_len = #lst\n    local i = 1\n    while\
    \ i <= lst_len do\n        min_value_found = false\n        max_value_found =\
    \ false\n        min_value_found_index = 0\n        max_value_found_index = 0\n\
    \        for j = 1, lst_len do\n            if lst[j] ~= nil then\n          \
    \      if not min_value_found then\n                    min_value_found = true\n\
    \                    min_value = lst[j]\n                    min_value_found_index\
    \ = j\n                elseif lst[j] < min_value then\n                    min_value\
    \ = lst[j]\n                    min_value_found_index = j\n                end\n\
    \                if not max_value_found then\n                    max_value_found\
    \ = true\n                    max_value = lst[j]\n                    max_value_found_index\
    \ = j\n                elseif lst[j] > max_value then\n                    max_value\
    \ = lst[j]\n                    max_value_found_index = j\n                end\n\
    \            end\n        end\n        if i % 2 == 1 then\n            result[i]\
    \ = min_value\n            lst[min_value_found_index] = nil\n        else\n  \
    \          result[i] = max_value\n            lst[max_value_found_index] = nil\n\
    \        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_value_found, max_value_found\n    local i = 1\n    while #lst >\
    \ 0 do\n        min_value_found = false\n        max_value_found = false\n   \
    \     for j, v in ipairs(lst) do\n            if not min_value_found then\n  \
    \              min_value = v\n                min_index = j\n                min_value_found\
    \ = true\n            elseif v < min_value then\n                min_value = v\n\
    \                min_index = j\n            end\n            if not max_value_found\
    \ then\n                max_value = v\n                max_index = j\n       \
    \         max_value_found = true\n            elseif v > max_value then\n    \
    \            max_value = v\n                max_index = j\n            end\n \
    \       end\n        if i % 2 == 1 then\n            res[i] = min_value\n    \
    \        table.remove(lst, min_index)\n        else\n            res[i] = max_value\n\
    \            table.remove(lst, max_index)\n        end\n        i = i + 1\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local len = #lst\n    local min_index, max_index\n\
    \    local min, max\n    local i = 1\n    while i <= len do\n        min_index,\
    \ max_index = min_max_index(lst)\n        min, max = lst[min_index], lst[max_index]\n\
    \        if i % 2 == 1 then\n            result[i] = min\n            lst[min_index]\
    \ = max\n        else\n            result[i] = max\n            lst[max_index]\
    \ = min\n        end\n        i = i + 1\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7pi9tw8_.lua:18:\
    \ attempt to call a nil value (global 'min_max_index')\nstack traceback:\n\t/tmp/tmp7pi9tw8_.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7pi9tw8_.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local i = 1\n    while #lst > 0 do\n        if i\
    \ % 2 == 1 then\n            table.insert(result, min)\n            table.remove(lst,\
    \ table.index_of(lst, min))\n        else\n            table.insert(result, max)\n\
    \            table.remove(lst, table.index_of(lst, max))\n        end\n      \
    \  min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n        i\
    \ = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyn82vw76.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpyn82vw76.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpyn82vw76.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    if #lst == 0 then\n        return {}\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_index = 0\n    local max_index\
    \ = 0\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        elseif v == max then\n            max_index = i\n        end\n\
    \    end\n    local new_lst = {}\n    for i, v in ipairs(lst) do\n        if i\
    \ == min_index then\n            new_lst[#new_lst + 1] = min\n        elseif i\
    \ == max_index then\n            new_lst[#new_lst + 1] = max\n        else\n \
    \           new_lst[#new_lst + 1] = v\n        end\n    end\n    return strange_sort_list(new_lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1v2_uckp.lua:15:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1v2_uckp.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1v2_uckp.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    table.insert(res, min)\n   \
    \ table.insert(res, max)\n    for i = 1, #lst do\n        if i ~= min_idx and\
    \ i ~= max_idx then\n            table.insert(res, lst[i])\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgbd01r6r.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgbd01r6r.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpgbd01r6r.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n        i = i + 2\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9tv1uk9c.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9tv1uk9c.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp9tv1uk9c.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min_idx = 1\n  local max_idx = #lst\n  local min_val\
    \ = lst[min_idx]\n  local max_val = lst[max_idx]\n  local min_found = false\n\
    \  local max_found = false\n  local i = 1\n  while i <= #lst do\n    if not min_found\
    \ then\n      for j = min_idx, max_idx do\n        if lst[j] < min_val then\n\
    \          min_val = lst[j]\n          min_idx = j\n        end\n      end\n \
    \     res[i] = min_val\n      min_found = true\n      i = i + 1\n    end\n   \
    \ if not max_found then\n      for j = max_idx, min_idx, -1 do\n        if lst[j]\
    \ > max_val then\n          max_val = lst[j]\n          max_idx = j\n        end\n\
    \      end\n      res[i] = max_val\n      max_found = true\n      i = i + 1\n\
    \    end\n    min_found = false\n    max_found = false\n    min_val = lst[min_idx]\n\
    \    max_val = lst[max_idx]\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ycrkvph.lua:54:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp8ycrkvph.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min, max\n  local min_index, max_index\n  local\
    \ i = 1\n  while #lst > 0 do\n    min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    min_index, max_index = index_of(lst, min), index_of(lst, max)\n    if i %\
    \ 2 == 1 then\n      table.insert(result, min)\n      table.remove(lst, min_index)\n\
    \    else\n      table.insert(result, max)\n      table.remove(lst, max_index)\n\
    \    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_dtaigk.lua:17:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmph_dtaigk.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmph_dtaigk.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function strange_sort(lst, acc)\n    if #lst == 0 then\n      return\
    \ acc\n    end\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = index_of(lst, min)\n    local max_idx = index_of(lst, max)\n\
    \    local new_lst = remove_at(lst, min_idx)\n    new_lst = remove_at(new_lst,\
    \ max_idx - 1)\n    acc[#acc + 1] = min\n    acc[#acc + 1] = max\n    return strange_sort(new_lst,\
    \ acc)\n  end\n  return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h5r2gzh.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8h5r2gzh.lua:16:\
    \ in function </tmp/tmp8h5r2gzh.lua:12>\n\t(...tail calls...)\n\t/tmp/tmp8h5r2gzh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    local min_removed = table.remove_at(lst, min_idx)\n    local max_removed\
    \ = table.remove_at(lst, max_idx)\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n        max\
    \ = math.max(unpack(lst))\n        min_idx = table.index_of(lst, min)\n      \
    \  max_idx = table.index_of(lst, max)\n        min_removed = table.remove_at(lst,\
    \ min_idx)\n        max_removed = table.remove_at(lst, max_idx)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpifwkyevu.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpifwkyevu.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpifwkyevu.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index_of(min_val), lst:index_of(max_val)\n \
    \   local min_idx_used, max_idx_used = false, false\n    local i = 1\n    while\
    \ #res < #lst do\n        if not min_idx_used and not max_idx_used then\n    \
    \        if i % 2 == 1 then\n                res[#res + 1] = min_val\n       \
    \         min_idx_used = true\n            else\n                res[#res + 1]\
    \ = max_val\n                max_idx_used = true\n            end\n        elseif\
    \ min_idx_used and not max_idx_used then\n            res[#res + 1] = max_val\n\
    \            max_idx_used = true\n        elseif not min_idx_used and max_idx_used\
    \ then\n            res[#res + 1] = min_val\n            min_idx_used = true\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp74n7vxyp.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp74n7vxyp.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp74n7vxyp.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = #lst\n\
    \    local min_value = min\n    local max_value = max\n    local min_found = false\n\
    \    local max_found = false\n    local min_value_found = false\n    local max_value_found\
    \ = false\n    local min_value_index = 0\n    local max_value_index = 0\n    local\
    \ i = 1\n    while i <= #lst do\n        if not min_found then\n            if\
    \ lst[i] == min then\n                min_found = true\n                min_index\
    \ = i\n            end\n        end\n        if not max_found then\n         \
    \   if lst[i] == max then\n                max_found = true\n                max_index\
    \ = i\n            end\n        end\n        if not min_value_found then\n   \
    \         if lst[i] > min_value then\n                min_value_found = true\n\
    \                min_value = lst[i]\n                min_value_index = i\n   \
    \         end\n        end\n        if not max_value_found then\n            if\
    \ lst[i] < max_value then\n                max_value_found = true\n          \
    \      max_value = lst[i]\n                max_value_index = i\n            end\n\
    \        end\n        i = i + 1\n    end\n    if min_index < max_index then\n\
    \        result[1] = min\n        result[2] = max_value\n        result[3] = min_value\n\
    \        result[4] = max\n    else\n        result[1] = min\n        result[2]\
    \ = min_value\n        result[3] = max_value\n        result[4] = max\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzs9x8dyb.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzs9x8dyb.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzs9x8dyb.lua:72: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_value_index, max_value_index\n    local min_value_index_found,\
    \ max_value_index_found\n    local i, j\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd9_2fbkc.lua:33: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function strange_sort(lst, res)\n    if #lst == 0 then\n      return\
    \ res\n    end\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.indexof(lst, min)\n    local max_idx = table.indexof(lst,\
    \ max)\n    table.remove(lst, min_idx)\n    table.remove(lst, max_idx)\n    table.insert(res,\
    \ min)\n    table.insert(res, max)\n    return strange_sort(lst, res)\n  end\n\
    \  return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3157cqu.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpz3157cqu.lua:16:\
    \ in function </tmp/tmpz3157cqu.lua:12>\n\t(...tail calls...)\n\t/tmp/tmpz3157cqu.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    if #lst == 0 then\n        return {}\n    end\n    local min_val = math.min(unpack(lst))\n\
    \    local max_val = math.max(unpack(lst))\n    local min_idx = table.index_of(lst,\
    \ min_val)\n    local max_idx = table.index_of(lst, max_val)\n    local new_lst\
    \ = {min_val}\n    table.remove(lst, min_idx)\n    while #lst > 0 do\n       \
    \ local min_val = math.min(unpack(lst))\n        local max_val = math.max(unpack(lst))\n\
    \        local min_idx = table.index_of(lst, min_val)\n        local max_idx =\
    \ table.index_of(lst, max_val)\n        table.insert(new_lst, max_val)\n     \
    \   table.remove(lst, max_idx)\n        if #lst > 0 then\n            table.insert(new_lst,\
    \ min_val)\n            table.remove(lst, min_idx)\n        end\n    end\n   \
    \ return new_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpigfd7f7d.lua:15:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpigfd7f7d.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpigfd7f7d.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_value, min_index\n    local max_value, max_index\n\
    \    local min_max_flag = true\n    local i = 1\n    while i <= #lst do\n    \
    \    if min_max_flag then\n            min_value, min_index = math.min(unpack(lst))\n\
    \            result[i] = min_value\n            table.remove(lst, min_index)\n\
    \        else\n            max_value, max_index = math.max(unpack(lst))\n    \
    \        result[i] = max_value\n            table.remove(lst, max_index)\n   \
    \     end\n        min_max_flag = not min_max_flag\n        i = i + 1\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6k40r6pn.lua:19:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp6k40r6pn.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp6k40r6pn.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = 1\n  \
    \  for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        end\n        if v == max then\n            max_index = i\n    \
    \    end\n    end\n    local min_flag = true\n    local max_flag = true\n    for\
    \ i = 1, #lst do\n        if min_flag then\n            result[i] = min\n    \
    \        min_flag = false\n            max_flag = true\n        elseif max_flag\
    \ then\n            result[i] = max\n            max_flag = false\n          \
    \  min_flag = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hxa28iu.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4hxa28iu.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4hxa28iu.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local idx =\
    \ 1\n    local min_flag = true\n    while idx <= #lst do\n        if min_flag\
    \ then\n            res[idx] = min\n            min_flag = false\n           \
    \ idx = idx + 1\n        else\n            res[idx] = max\n            min_flag\
    \ = true\n            idx = idx + 1\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp2xcti7f.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpp2xcti7f.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpp2xcti7f.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min_index, max_index\n  local min_value, max_value\n\
    \  local min_found, max_found\n  local i, j\n  local lst_len = #lst\n  for i =\
    \ 1, lst_len do\n    min_found = false\n    max_found = false\n    for j = 1,\
    \ lst_len do\n      if not min_found and lst[j] then\n        min_index = j\n\
    \        min_value = lst[j]\n        min_found = true\n      elseif lst[j] and\
    \ lst[j] < min_value then\n        min_index = j\n        min_value = lst[j]\n\
    \      end\n      if not max_found and lst[j] then\n        max_index = j\n  \
    \      max_value = lst[j]\n        max_found = true\n      elseif lst[j] and lst[j]\
    \ > max_value then\n        max_index = j\n        max_value = lst[j]\n      end\n\
    \    end\n    if min_found then\n      result[#result + 1] = min_value\n     \
    \ lst[min_index] = nil\n    end\n    if max_found then\n      result[#result +\
    \ 1] = max_value\n      lst[max_index] = nil\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjah552ac.lua:55:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 8, 7, 7}\nstack traceback:\n\t\
    /tmp/tmpjah552ac.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5317oocm.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5317oocm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp5317oocm.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = 1\n    local min_val\
    \ = lst[1]\n    local max_val = lst[1]\n    for i, v in ipairs(lst) do\n     \
    \   if v < min_val then\n            min_val = v\n            min_idx = i\n  \
    \      end\n        if v > max_val then\n            max_val = v\n           \
    \ max_idx = i\n        end\n    end\n    local min_done = false\n    local max_done\
    \ = false\n    while not (min_done and max_done) do\n        if not min_done then\n\
    \            table.insert(res, min_val)\n            min_done = true\n       \
    \ end\n        if not max_done then\n            table.insert(res, max_val)\n\
    \            max_done = true\n        end\n        min_val = lst[1]\n        max_val\
    \ = lst[1]\n        min_idx = 1\n        max_idx = 1\n        for i, v in ipairs(lst)\
    \ do\n            if i ~= min_idx and i ~= max_idx then\n                if v\
    \ < min_val then\n                    min_val = v\n                    min_idx\
    \ = i\n                end\n                if v > max_val then\n            \
    \        max_val = v\n                    max_idx = i\n                end\n \
    \           end\n        end\n        if min_idx ~= max_idx then\n           \
    \ min_done = false\n            max_done = false\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_value, max_value\n    local min_index, max_index\n\
    \    local min_found, max_found\n    local i, j\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvwpdenoj.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min\
    \ then\n      min_index = i\n    elseif lst[i] == max then\n      max_index =\
    \ i\n    end\n  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n\
    \      result[i] = min\n      min_index = min_index + 1\n      min = lst[min_index]\n\
    \    else\n      result[i] = max\n      max_index = max_index - 1\n      max =\
    \ lst[max_index]\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpqzaoxd.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmplpqzaoxd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplpqzaoxd.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    for i = 1, #lst do\n        if lst[i] == min and not min_found then\n   \
    \         min_idx = i\n            min_found = true\n        elseif lst[i] ==\
    \ max and not max_found then\n            max_idx = i\n            max_found =\
    \ true\n        end\n    end\n    local min_removed, max_removed = false, false\n\
    \    for i = 1, #lst do\n        if i % 2 == 1 then\n            if not min_removed\
    \ then\n                result[i] = min\n                min_removed = true\n\
    \            else\n                result[i] = lst[min_idx + 1]\n            \
    \    min_idx = min_idx + 1\n            end\n        else\n            if not\
    \ max_removed then\n                result[i] = max\n                max_removed\
    \ = true\n            else\n                result[i] = lst[max_idx - 1]\n   \
    \             max_idx = max_idx - 1\n            end\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdykofmvt.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdykofmvt.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdykofmvt.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min_idx = 1\n  local max_idx = #lst\n  local min_val\
    \ = lst[min_idx]\n  local max_val = lst[max_idx]\n  local min_found = false\n\
    \  local max_found = false\n  local i = 1\n  while i <= #lst do\n    if not min_found\
    \ then\n      if lst[i] < min_val then\n        min_val = lst[i]\n        min_idx\
    \ = i\n      end\n      if i == #lst then\n        min_found = true\n        i\
    \ = 1\n      end\n    elseif not max_found then\n      if lst[i] > max_val then\n\
    \        max_val = lst[i]\n        max_idx = i\n      end\n      if i == #lst\
    \ then\n        max_found = true\n        i = 1\n      end\n    else\n      if\
    \ i == min_idx then\n        table.insert(res, min_val)\n        min_found = false\n\
    \        min_val = max_val\n        min_idx = max_idx\n      elseif i == max_idx\
    \ then\n        table.insert(res, max_val)\n        max_found = false\n      \
    \  max_val = min_val\n        max_idx = min_idx\n      end\n      if i == #lst\
    \ then\n        i = 1\n      end\n    end\n    i = i + 1\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, #lst\n  local i = 1\n  while min_idx <= max_idx\
    \ do\n    if i % 2 == 1 then\n      res[i] = min\n      min_idx = min_idx + 1\n\
    \    else\n      res[i] = max\n      max_idx = max_idx - 1\n    end\n    i = i\
    \ + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb38utv9v.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpb38utv9v.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpb38utv9v.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_max = {min, max}\n  local min_max_idx = {min_idx, max_idx}\n\
    \  local min_max_idx_sorted = {}\n  for i = 1, #min_max do\n    local min_max_idx_sorted_i\
    \ = math.min(unpack(min_max_idx))\n    table.insert(min_max_idx_sorted, min_max_idx_sorted_i)\n\
    \    table.remove(min_max_idx, min_max_idx_sorted_i)\n  end\n  for i = 1, #min_max\
    \ do\n    table.insert(res, min_max[i])\n    table.remove(lst, min_max_idx_sorted[i])\n\
    \  end\n  if #lst > 0 then\n    return strange_sort_list(res)\n  else\n    return\
    \ res\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8xuzps7.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpz8xuzps7.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpz8xuzps7.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_found, max_found =\
    \ false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n         \
    \   if not min_found then\n                res[i] = min\n                min_found\
    \ = true\n            else\n                res[i] = max\n                max_found\
    \ = true\n            end\n        else\n            if not max_found then\n \
    \               res[i] = max\n                max_found = true\n            else\n\
    \                res[i] = min\n                min_found = true\n            end\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd0q08an1.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpd0q08an1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpd0q08an1.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx, max_idx\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    while #lst > 0 do\n        min_idx, max_idx = nil,\
    \ nil\n        for i, v in ipairs(lst) do\n            if v == min then\n    \
    \            min_idx = i\n            elseif v == max then\n                max_idx\
    \ = i\n            end\n        end\n        table.insert(res, min)\n        table.insert(res,\
    \ max)\n        table.remove(lst, min_idx)\n        table.remove(lst, max_idx)\n\
    \        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    end\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3r716v30.lua:14:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp3r716v30.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp3r716v30.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = 1\n  \
    \  for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        end\n        if v == max then\n            max_index = i\n    \
    \    end\n    end\n    local min_found = false\n    local max_found = false\n\
    \    for i, v in ipairs(lst) do\n        if i == min_index then\n            table.insert(result,\
    \ v)\n            min_found = true\n        elseif i == max_index then\n     \
    \       table.insert(result, v)\n            max_found = true\n        end\n \
    \   end\n    if not min_found then\n        table.insert(result, min)\n    end\n\
    \    if not max_found then\n        table.insert(result, max)\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnc7nat5o.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpnc7nat5o.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpnc7nat5o.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = 1\n  for i = 1, #lst do\n    if lst[i]\
    \ == min then\n      min_idx = i\n    end\n    if lst[i] == max then\n      max_idx\
    \ = i\n    end\n  end\n  local min_flag = true\n  for i = 1, #lst do\n    if min_flag\
    \ then\n      res[i] = min\n      min_flag = false\n    else\n      res[i] = max\n\
    \      min_flag = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp93w4qqw0.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp93w4qqw0.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp93w4qqw0.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found\
    \ = false\n    local max_found = false\n    local min_found_idx = 0\n    local\
    \ max_found_idx = 0\n    local min_found_val = 0\n    local max_found_val = 0\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] < min_val then\n                min_found = true\n        \
    \        min_found_idx = i\n                min_found_val = lst[i]\n         \
    \   end\n        end\n        if not max_found then\n            if lst[i] > max_val\
    \ then\n                max_found = true\n                max_found_idx = i\n\
    \                max_found_val = lst[i]\n            end\n        end\n      \
    \  if min_found and max_found then\n            break\n        end\n        i\
    \ = i + 1\n    end\n    if min_found then\n        min_idx = min_found_idx\n \
    \       min_val = min_found_val\n    end\n    if max_found then\n        max_idx\
    \ = max_found_idx\n        max_val = max_found_val\n    end\n    local j = 1\n\
    \    while j <= #lst do\n        if j % 2 == 1 then\n            table.insert(result,\
    \ min_val)\n            min_idx = min_idx + 1\n            if min_idx <= #lst\
    \ then\n                min_val = lst[min_idx]\n            end\n        else\n\
    \            table.insert(result, max_val)\n            max_idx = max_idx - 1\n\
    \            if max_idx >= 1 then\n                max_val = lst[max_idx]\n  \
    \          end\n        end\n        j = j + 1\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4dbax5r.lua:78:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {1, 5, 1, 5, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpz4dbax5r.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = lst[min_index], lst[max_index]\n    local min_found, max_found =\
    \ false, false\n    local min_value_index, max_value_index = 1, 1\n    local min_value_found,\
    \ max_value_found = false, false\n    local min_value_found_index, max_value_found_index\
    \ = 1, 1\n    local min_value_found_index_found, max_value_found_index_found =\
    \ false, false\n    local min_value_found_index_found_index, max_value_found_index_found_index\
    \ = 1, 1\n    local min_value_found_index_found_index_found, max_value_found_index_found_index_found\
    \ = false, false\n    local min_value_found_index_found_index_found_index, max_value_found_index_found_index_found_index\
    \ = 1, 1\n    local min_value_found_index_found_index_found_index_found, max_value_found_index_found_index_found_index_found\
    \ = false, false\n    local min_value_found_index_found_index_found_index_found_index,\
    \ max_value_found_index_found_index_found_index_found_index = 1, 1\n    local\
    \ min_value_found_index_found_index_found_index_found_index_found, max_value_found_index_found_index_found_index_found_index_found\
    \ = false, false\n    local min_value_found_index_found_index_found_index_found_index_found_index,\
    \ max_value_found_index_found_index_found_index_found_index_found_index = 1, 1\n\
    \    local min_value_found_index_found_index_found_index_found_index_found_index_found,\
    \ max_value_found_index_found_index_found_index_found_index_found_index_found\
    \ = false, false\n    local min_value_found_index_found_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqk68srmp.lua:44: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = 1\n  for i = 1, #lst do\n    if lst[i]\
    \ == min then\n      min_index = i\n    end\n    if lst[i] == max then\n     \
    \ max_index = i\n    end\n  end\n  local min_flag = true\n  local max_flag = true\n\
    \  for i = 1, #lst do\n    if min_flag then\n      result[i] = min\n      min_flag\
    \ = false\n      max_flag = true\n    elseif max_flag then\n      result[i] =\
    \ max\n      max_flag = false\n      min_flag = true\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6nyyt2y.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf6nyyt2y.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpf6nyyt2y.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local idx = 1\n    while idx\
    \ <= #lst do\n        if idx % 2 == 1 then\n            res[idx] = min\n     \
    \       min_idx = min_idx + 1\n            if min_idx <= #lst then\n         \
    \       min = math.min(unpack(lst, min_idx))\n            end\n        else\n\
    \            res[idx] = max\n            max_idx = max_idx + 1\n            if\
    \ max_idx <= #lst then\n                max = math.max(unpack(lst, max_idx))\n\
    \            end\n        end\n        idx = idx + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqgrcu2v5.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqgrcu2v5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqgrcu2v5.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    if min_idx <\
    \ max_idx then\n        for i = 1, #lst do\n            if i % 2 == 1 then\n \
    \               res[i] = min\n                min = min + 1\n            else\n\
    \                res[i] = max\n                max = max - 1\n            end\n\
    \        end\n    else\n        for i = 1, #lst do\n            if i % 2 == 1\
    \ then\n                res[i] = max\n                max = max - 1\n        \
    \    else\n                res[i] = min\n                min = min + 1\n     \
    \       end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwi8rhwqh.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpwi8rhwqh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpwi8rhwqh.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function min_max(lst)\n    local min = math.min(unpack(lst))\n    local\
    \ max = math.max(unpack(lst))\n    return min, max\n  end\n  local function remove_min_max(lst,\
    \ min, max)\n    local new_lst = {}\n    for _, v in ipairs(lst) do\n      if\
    \ v ~= min and v ~= max then\n        table.insert(new_lst, v)\n      end\n  \
    \  end\n    return new_lst\n  end\n  local function strange_sort(lst)\n    if\
    \ #lst == 0 then\n      return {}\n    elseif #lst == 1 then\n      return lst\n\
    \    else\n      local min, max = min_max(lst)\n      local new_lst = remove_min_max(lst,\
    \ min, max)\n      return {min, max} + strange_sort(new_lst)\n    end\n  end\n\
    \  return strange_sort(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxkr8xdq.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphxkr8xdq.lua:13:\
    \ in upvalue 'min_max'\n\t/tmp/tmphxkr8xdq.lua:32: in function </tmp/tmphxkr8xdq.lua:26>\n\
    \t(...tail calls...)\n\t/tmp/tmphxkr8xdq.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    local min_cnt, max_cnt = 0, 0\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_cnt = min_cnt + 1\n        elseif lst[i] == max\
    \ then\n            max_cnt = max_cnt + 1\n        end\n    end\n    for i = 1,\
    \ #lst do\n        if not min_found then\n            if lst[i] == min then\n\
    \                min_idx = i\n                min_found = true\n            end\n\
    \        elseif not max_found then\n            if lst[i] == max then\n      \
    \          max_idx = i\n                max_found = true\n            end\n  \
    \      end\n        if min_found and max_found then\n            break\n     \
    \   end\n    end\n    if min_idx < max_idx then\n        for i = 1, #lst do\n\
    \            if i % 2 == 1 then\n                table.insert(res, min)\n    \
    \        else\n                table.insert(res, max)\n            end\n     \
    \   end\n    else\n        for i = 1, #lst do\n            if i % 2 == 1 then\n\
    \                table.insert(res, max)\n            else\n                table.insert(res,\
    \ min)\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvn7trgfv.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvn7trgfv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvn7trgfv.lua:63: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local function get_min(t)\n        local min = math.huge\n        for _,\
    \ v in ipairs(t) do\n            if v < min then\n                min = v\n  \
    \          end\n        end\n        return min\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3rptjnv_.lua:36: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = table.index_of(lst, min)\n    local\
    \ max_index = table.index_of(lst, max)\n    local min_removed = table.remove_at(lst,\
    \ min_index)\n    local max_removed = table.remove_at(lst, max_index)\n    table.insert(result,\
    \ min)\n    table.insert(result, max)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n\
    \        max = math.max(unpack(lst))\n        min_index = table.index_of(lst,\
    \ min)\n        max_index = table.index_of(lst, max)\n        min_removed = table.remove_at(lst,\
    \ min_index)\n        max_removed = table.remove_at(lst, max_index)\n        table.insert(result,\
    \ min)\n        table.insert(result, max)\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoudd8ia_.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpoudd8ia_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpoudd8ia_.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found\
    \ = false\n    local max_found = false\n    local min_cnt = 0\n    local max_cnt\
    \ = 0\n    local i = 1\n    while i <= #lst do\n        if not min_found then\n\
    \            if min_val == lst[i] then\n                min_found = true\n   \
    \             min_cnt = min_cnt + 1\n            else\n                min_idx\
    \ = i\n                min_val = lst[i]\n            end\n        end\n      \
    \  if not max_found then\n            if max_val == lst[i] then\n            \
    \    max_found = true\n                max_cnt = max_cnt + 1\n            else\n\
    \                max_idx = i\n                max_val = lst[i]\n            end\n\
    \        end\n        if min_found and max_found then\n            break\n   \
    \     end\n        i = i + 1\n    end\n    local min_idx_start = min_idx\n   \
    \ local max_idx_start = max_idx\n    local min_idx_end = min_idx + min_cnt - 1\n\
    \    local max_idx_end = max_idx + max_cnt - 1\n    local min_idx_cur = min_idx_start\n\
    \    local max_idx_cur = max_idx_start\n    local min_idx_inc = 1\n    local max_idx_inc\
    \ = 1\n    local min_idx_end_reached = false\n    local max_idx_end_reached =\
    \ false\n    local min_idx_start_reached = false\n    local max_idx_start_reached\
    \ = false\n    while i <= #lst do\n        if not min_idx_end_reached then\n \
    \           res[i] = lst[min_idx_cur]\n            min_idx_cur = min_idx_cur +\
    \ min_idx_inc\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx8sx4gf8.lua:77: ''end'' expected (to close ''if'' at line
    59) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local function strange_sort_list_iter(lst, res)\n        if #lst == 0 then\n\
    \            return res\n        end\n        local min_val, min_idx = math.min(unpack(lst))\n\
    \        local max_val, max_idx = math.max(unpack(lst))\n        table.insert(res,\
    \ min_val)\n        table.remove(lst, min_idx)\n        if #lst > 0 then\n   \
    \         table.insert(res, max_val)\n            table.remove(lst, max_idx)\n\
    \        end\n        return strange_sort_list_iter(lst, res)\n    end\n    return\
    \ strange_sort_list_iter(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk_8otyoy.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpk_8otyoy.lua:16:\
    \ in function </tmp/tmpk_8otyoy.lua:12>\n\t(...tail calls...)\n\t/tmp/tmpk_8otyoy.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found\
    \ = false\n    local max_found = false\n    local i = 1\n    while i <= #lst do\n\
    \        if not min_found then\n            if min_val > lst[i] then\n       \
    \         min_val = lst[i]\n                min_idx = i\n            end\n   \
    \         if i == #lst then\n                min_found = true\n              \
    \  res[#res + 1] = min_val\n                table.remove(lst, min_idx)\n     \
    \       end\n        elseif not max_found then\n            if max_val < lst[i]\
    \ then\n                max_val = lst[i]\n                max_idx = i\n      \
    \      end\n            if i == #lst then\n                max_found = true\n\
    \                res[#res + 1] = max_val\n                table.remove(lst, max_idx)\n\
    \            end\n        else\n            min_found = false\n            max_found\
    \ = false\n            min_idx = 1\n            max_idx = #lst\n            min_val\
    \ = lst[min_idx]\n            max_val = lst[max_idx]\n            i = 1\n    \
    \    end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91d3mtbj.lua:58:\
    \ expected: {1, 4, 2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmp91d3mtbj.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local len = #lst\n  local min, max = math.min, math.max\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, len do\n    if lst[min_idx] > lst[i]\
    \ then min_idx = i end\n    if lst[max_idx] < lst[i] then max_idx = i end\n  end\n\
    \  for i = 1, len do\n    if i % 2 == 1 then\n      res[i] = lst[min_idx]\n  \
    \    lst[min_idx] = max(unpack(lst))\n    else\n      res[i] = lst[max_idx]\n\
    \      lst[max_idx] = min(unpack(lst))\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_a24e5ty.lua:23:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_a24e5ty.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp_a24e5ty.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = min + 1\n        else\n            res[i]\
    \ = max\n            max = max - 1\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdo7qojbf.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdo7qojbf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdo7qojbf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    for i, v in ipairs(lst) do\n        if\
    \ v == min_val then\n            min_idx = i\n        elseif v == max_val then\n\
    \            max_idx = i\n        end\n    end\n    local min_idx_used, max_idx_used\
    \ = false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n       \
    \     if not min_idx_used then\n                res[i] = min_val\n           \
    \     min_idx_used = true\n            else\n                res[i] = lst[min_idx]\n\
    \            end\n        else\n            if not max_idx_used then\n       \
    \         res[i] = max_val\n                max_idx_used = true\n            else\n\
    \                res[i] = lst[max_idx]\n            end\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2eavo2du.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp2eavo2du.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2eavo2du.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_first = min_idx < max_idx\n  local idx = 1\n  while #lst >\
    \ 0 do\n    if min_first then\n      res[idx] = table.remove(lst, min_idx)\n \
    \     min_first = false\n    else\n      res[idx] = table.remove(lst, max_idx)\n\
    \      min_first = true\n    end\n    idx = idx + 1\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps30zb_ud.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmps30zb_ud.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmps30zb_ud.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = min_max(lst)\n    local min_idx, max_idx\
    \ = min_max_idx(lst)\n    local min_val, max_val = lst[min_idx], lst[max_idx]\n\
    \    local min_cnt, max_cnt = 0, 0\n    local min_idx, max_idx = min_max_idx(lst)\n\
    \    local min_val, max_val = lst[min_idx], lst[max_idx]\n    local min_cnt, max_cnt\
    \ = 0, 0\n    local min_idx, max_idx = min_max_idx(lst)\n    local min_val, max_val\
    \ = lst[min_idx], lst[max_idx]\n    local min_cnt, max_cnt = 0, 0\n    local min_idx,\
    \ max_idx = min_max_idx(lst)\n    local min_val, max_val = lst[min_idx], lst[max_idx]\n\
    \    local min_cnt, max_cnt = 0, 0\n    local min_idx, max_idx = min_max_idx(lst)\n\
    \    local min_val, max_val = lst[min_idx], lst[max_idx]\n    local min_cnt, max_cnt\
    \ = 0, 0\n    local min_idx, max_idx = min_max_idx(lst)\n    local min_val, max_val\
    \ = lst[min_idx], lst[max_idx]\n    local min_cnt, max_cnt = 0, 0\n    local min_idx,\
    \ max_idx = min_max_idx(lst)\n    local min_val, max_val = lst[min_idx], lst[max_idx]\n\
    \    local min_cnt, max_cnt = 0, 0\n    local min_idx, max_idx = min_max_idx(lst)\n\
    \    local min_val,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsom46x2f.lua:52: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(res,\
    \ min)\n      table.remove(lst, table.index_of(lst, min))\n    else\n      table.insert(res,\
    \ max)\n      table.remove(lst, table.index_of(lst, max))\n    end\n    min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    i = i + 1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqx69zu08.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqx69zu08.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqx69zu08.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_value, max_value, min_index, max_index\n\
    \    local min_value_found, max_value_found = false, false\n    local min_value_index_found,\
    \ max_value_index_found = false, false\n    local min_value_index, max_value_index\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_value_found then\n\
    \            min_value = lst[i]\n            min_value_index = i\n           \
    \ min_value_found = true\n            min_value_index_found = true\n        elseif\
    \ not max_value_found then\n            max_value = lst[i]\n            max_value_index\
    \ = i\n            max_value_found = true\n            max_value_index_found =\
    \ true\n        else\n            if lst[i] < min_value then\n               \
    \ min_value = lst[i]\n                min_value_index = i\n                min_value_index_found\
    \ = true\n            elseif lst[i] > max_value then\n                max_value\
    \ = lst[i]\n                max_value_index = i\n                max_value_index_found\
    \ = true\n            end\n        end\n        if min_value_index_found and max_value_index_found\
    \ then\n            table.insert(result, min_value)\n            table.insert(result,\
    \ max_value)\n            min_value_found, max_value_found = false, false\n  \
    \          min_value_index_found, max_value_index_found = false, false\n     \
    \       lst[min_value_index] = nil\n            lst[max_value_index] = nil\n \
    \           i = 1\n        else\n            i = i + 1\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_value = math.min(unpack(lst))\n    local\
    \ max_value = math.max(unpack(lst))\n    local min_index = 1\n    local max_index\
    \ = 1\n    local index = 1\n    while index <= #lst do\n        if index % 2 ==\
    \ 1 then\n            result[index] = min_value\n            min_index = min_index\
    \ + 1\n        else\n            result[index] = max_value\n            max_index\
    \ = max_index + 1\n        end\n        index = index + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjww0095s.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjww0095s.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjww0095s.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min = math.min(unpack(lst))\n\
    \        max = math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8_r4e6kw.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8_r4e6kw.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8_r4e6kw.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = #lst\n  local is_min = true\n  for i =\
    \ 1, #lst do\n    if is_min then\n      result[i] = min\n      min_idx = min_idx\
    \ + 1\n      min = lst[min_idx]\n      is_min = false\n    else\n      result[i]\
    \ = max\n      max_idx = max_idx - 1\n      max = lst[max_idx]\n      is_min =\
    \ true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplziwpffv.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmplziwpffv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplziwpffv.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] == min_val then\n                min_idx = i\n            \
    \    min_found = true\n            end\n        end\n        if not max_found\
    \ then\n            if lst[i] == max_val then\n                max_idx = i\n \
    \               max_found = true\n            end\n        end\n        if min_found\
    \ and max_found then\n            break\n        end\n        i = i + 1\n    end\n\
    \    local min_idx_found, max_idx_found = false, false\n    for i = 1, #lst do\n\
    \        if i % 2 == 1 then\n            if not min_idx_found then\n         \
    \       res[i] = min_val\n                min_idx_found = true\n            else\n\
    \                res[i] = max_val\n                max_idx_found = true\n    \
    \        end\n        else\n            if not max_idx_found then\n          \
    \      res[i] = max_val\n                max_idx_found = true\n            else\n\
    \                res[i] = min_val\n                min_idx_found = true\n    \
    \        end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hk7c46y.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp6hk7c46y.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp6hk7c46y.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = 1\n  for i = 1, #lst do\n    if lst[i]\
    \ == min then\n      min_idx = i\n    end\n    if lst[i] == max then\n      max_idx\
    \ = i\n    end\n  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1\
    \ then\n      res[i] = min\n      min_idx = min_idx + 1\n      min = math.min(unpack(lst,\
    \ min_idx))\n    else\n      res[i] = max\n      max_idx = max_idx + 1\n     \
    \ max = math.max(unpack(lst, max_idx))\n    end\n    i = i + 1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0te60uhm.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0te60uhm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp0te60uhm.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_value_set, max_value_set\n    local i\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgyv7pnpr.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = table.index_of(lst, min)\n  local max_index = table.index_of(lst,\
    \ max)\n  local min_removed = table.remove_at(lst, min_index)\n  local max_removed\
    \ = table.remove_at(lst, max_index)\n  table.insert(sorted, min)\n  table.insert(sorted,\
    \ max)\n  table.insert(sorted, unpack(lst))\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvlajvio.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjvlajvio.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjvlajvio.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found\
    \ = false\n    local max_found = false\n    local i = 1\n    while i <= #lst do\n\
    \        if not min_found then\n            if lst[i] < min_val then\n       \
    \         min_val = lst[i]\n                min_idx = i\n            end\n   \
    \         if i == #lst then\n                min_found = true\n              \
    \  i = 1\n            end\n        elseif not max_found then\n            if lst[i]\
    \ > max_val then\n                max_val = lst[i]\n                max_idx =\
    \ i\n            end\n            if i == #lst then\n                max_found\
    \ = true\n                i = 1\n            end\n        else\n            if\
    \ min_idx < max_idx then\n                res[#res + 1] = min_val\n          \
    \      res[#res + 1] = max_val\n                lst[min_idx] = nil\n         \
    \       lst[max_idx] = nil\n                min_found = false\n              \
    \  max_found = false\n                i = 1\n            else\n              \
    \  res[#res + 1] = max_val\n                res[#res + 1] = min_val\n        \
    \        lst[min_idx] = nil\n                lst[max_idx] = nil\n            \
    \    min_found = false\n                max_found = false\n                i =\
    \ 1\n            end\n        end\n        i = i + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(res,\
    \ table.remove(lst, lst[min]))\n    else\n      table.insert(res, table.remove(lst,\
    \ lst[max]))\n    end\n    i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4247ozbz.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4247ozbz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4247ozbz.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local i = 1\n    while #lst > 0 do\n        local min\
    \ = math.min(unpack(lst))\n        local max = math.max(unpack(lst))\n       \
    \ if i % 2 == 1 then\n            res[i] = min\n            table.remove(lst,\
    \ table.index_of(lst, min))\n        else\n            res[i] = max\n        \
    \    table.remove(lst, table.index_of(lst, max))\n        end\n        i = i +\
    \ 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0vnngoba.lua:15:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0vnngoba.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp0vnngoba.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_lst, max_lst = {}, {}\n    for\
    \ i, v in ipairs(lst) do\n        if v == min then\n            min_lst[min_idx]\
    \ = i\n            min_idx = min_idx + 1\n        elseif v == max then\n     \
    \       max_lst[max_idx] = i\n            max_idx = max_idx + 1\n        end\n\
    \    end\n    for i = 1, #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = lst[min_lst[(i + 1) // 2]]\n        else\n            res[i] = lst[max_lst[i\
    \ // 2]]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpso5y3ol5.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpso5y3ol5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpso5y3ol5.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found\
    \ = false\n    local max_found = false\n    local min_idx_found = false\n    local\
    \ max_idx_found = false\n    local i = 1\n    while i <= #lst do\n        if not\
    \ min_found then\n            if lst[i] < min_val then\n                min_val\
    \ = lst[i]\n                min_idx = i\n            end\n            if i ==\
    \ #lst then\n                min_found = true\n                min_idx_found =\
    \ true\n            end\n        end\n        if not max_found then\n        \
    \    if lst[i] > max_val then\n                max_val = lst[i]\n            \
    \    max_idx = i\n            end\n            if i == #lst then\n           \
    \     max_found = true\n                max_idx_found = true\n            end\n\
    \        end\n        if min_found and max_found then\n            if min_idx_found\
    \ then\n                table.insert(res, min_val)\n                min_found\
    \ = false\n                min_idx_found = false\n                min_val = lst[max_idx\
    \ + 1]\n                min_idx = max_idx + 1\n            elseif max_idx_found\
    \ then\n                table.insert(res, max_val)\n                max_found\
    \ = false\n                max_idx_found = false\n                max_val = lst[min_idx\
    \ + 1]\n                max_idx = min_idx + 1\n            end\n        end\n\
    \        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2iwq29ze.lua:66:\
    \ expected: {1, 4, 2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmp2iwq29ze.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found\
    \ = false\n    local max_found = false\n    local i = 1\n    while i <= #lst do\n\
    \        if not min_found then\n            if lst[i] < min_val then\n       \
    \         min_val = lst[i]\n                min_idx = i\n            end\n   \
    \         if i == #lst then\n                min_found = true\n              \
    \  res[#res + 1] = min_val\n                table.remove(lst, min_idx)\n     \
    \       end\n        elseif not max_found then\n            if lst[i] > max_val\
    \ then\n                max_val = lst[i]\n                max_idx = i\n      \
    \      end\n            if i == #lst then\n                max_found = true\n\
    \                res[#res + 1] = max_val\n                table.remove(lst, max_idx)\n\
    \            end\n        else\n            min_found = false\n            max_found\
    \ = false\n            i = 0\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_5i8pk6.lua:54:\
    \ expected: {1, 4, 2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmp7_5i8pk6.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = #lst\n    for i = 1, #lst do\n\
    \        if i % 2 == 1 then\n            res[i] = min\n            min_index =\
    \ min_index + 1\n        else\n            res[i] = max\n            max_index\
    \ = max_index - 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsd_sskw_.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpsd_sskw_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpsd_sskw_.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    for i = 1, #lst do\n       \
    \ if i % 2 == 1 then\n            res[i] = min\n            lst[min_idx] = max\n\
    \        else\n            res[i] = max\n            lst[max_idx] = min\n    \
    \    end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  \
    \      min_idx, max_idx = 1, 1\n        for j = 1, #lst do\n            if lst[j]\
    \ == min then\n                min_idx = j\n            elseif lst[j] == max then\n\
    \                max_idx = j\n            end\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0iube96o.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0iube96o.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp0iube96o.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
