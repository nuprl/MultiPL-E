---
name: HumanEval_30_get_positive
language: lua
results:
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for i, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local r = {}
      for _, v in ipairs(l) do
        if v > 0 then
          r[#r + 1] = v
        end
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for i, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local t = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(t, v)
            end
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,
    2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123,
    1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\tlocal
    res = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(res,
    v)\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4,
    5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),
    {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),
    {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local result = {}
      for i = 1, #l do
        if l[i] > 0 then
          result[#result + 1] = l[i]
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local r = {}
      for _, v in ipairs(l) do
        if v > 0 then
          r[#r + 1] = v
        end
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local t = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(t, v)
            end
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(r, v)
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local t = {}
      for i, v in ipairs(l) do
        if v > 0 then
          t[#t + 1] = v
        end
      end
      return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local t = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(t, v)
        end
      end
      return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local ret = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(ret, v)
            end
        end
        return ret
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local r = {}
      for _, v in ipairs(l) do
        if v > 0 then
          r[#r + 1] = v
        end
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local r = {}
      for _, v in ipairs(l) do
        if v > 0 then
          r[#r + 1] = v
        end
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local t = {}
        for i, v in ipairs(l) do
            if v > 0 then
                table.insert(t, v)
            end
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for i, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for i, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local t = {}
        for i = 1, #l do
            if l[i] > 0 then
                t[#t + 1] = l[i]
            end
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for i = 1, #l do
            if l[i] > 0 then
                res[#res + 1] = l[i]
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local t = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(t, v)
            end
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local t = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(t, v)
            end
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for i, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for i, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local t = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(t, v)
        end
      end
      return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(r, v)
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(r, v)
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local t = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(t, v)
            end
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local ret = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(ret, v)
            end
        end
        return ret
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for i = 1, #l do
            if l[i] > 0 then
                res[#res + 1] = l[i]
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(r, v)
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local t = {}
      for i, v in ipairs(l) do
        if v > 0 then
          t[#t + 1] = v
        end
      end
      return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(r, v)
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local t = {}
      for i, v in ipairs(l) do
        if v > 0 then
          t[#t + 1] = v
        end
      end
      return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local r = {}
      for _, v in ipairs(l) do
        if v > 0 then
          r[#r + 1] = v
        end
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for i = 1, #l do
        if l[i] > 0 then
          res[#res + 1] = l[i]
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local r = {}
      for _, v in ipairs(l) do
        if v > 0 then
          r[#r + 1] = v
        end
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local result = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local r = {}
      for _, v in ipairs(l) do
        if v > 0 then
          r[#r + 1] = v
        end
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local r = {}
        for _, v in ipairs(l) do
            if v > 0 then
                r[#r + 1] = v
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local res = {}
      for _, v in ipairs(l) do
        if v > 0 then
          table.insert(res, v)
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
      local t = {}
      for i, v in ipairs(l) do
        if v > 0 then
          t[#t+1] = v
        end
      end
      return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local ret = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(ret, v)
            end
        end
        return ret
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,
    2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123,
    1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\tlocal
    res = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(res,
    v)\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4,
    5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),
    {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),
    {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local result = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return only positive numbers in the table.
    -- >>> get_positive({-1, 2, -4, 5, 6})
    -- {2, 5, 6}
    -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- {5, 3, 2, 3, 9, 123, 1}
    local function get_positive(l)
        local res = {}
        for _, v in ipairs(l) do
            if v > 0 then
                table.insert(res, v)
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = get_positive
        lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
        lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
        lu.assertEquals(candidate({-1, -2}), {})
        lu.assertEquals(candidate({}), {})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
