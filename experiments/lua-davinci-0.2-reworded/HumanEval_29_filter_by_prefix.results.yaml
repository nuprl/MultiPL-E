---
name: HumanEval_29_filter_by_prefix
language: lua
results:
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local filtered = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(filtered, str)
        end
      end
      return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, v in ipairs(strings) do
        if v:startswith(prefix) then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy78kiere.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpy78kiere.lua:9:
    in local 'candidate'\n\t/tmp/tmpy78kiere.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, v in ipairs(strings) do
            if v:startswith(prefix) then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7lxe3csc.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp7lxe3csc.lua:9:
    in local 'candidate'\n\t/tmp/tmp7lxe3csc.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqls59m4.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpvqls59m4.lua:9:
    in local 'candidate'\n\t/tmp/tmpvqls59m4.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local filtered = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(filtered, s)
        end
      end
      return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpekvp94_o.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpekvp94_o.lua:9:
    in local 'candidate'\n\t/tmp/tmpekvp94_o.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_978h3ac.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp_978h3ac.lua:9:
    in local 'candidate'\n\t/tmp/tmp_978h3ac.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpboei68oc.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpboei68oc.lua:9:
    in local 'candidate'\n\t/tmp/tmpboei68oc.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8g9ltw2t.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp8g9ltw2t.lua:9:
    in local 'candidate'\n\t/tmp/tmp8g9ltw2t.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if string.sub(s, 1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:startswith(prefix) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpepweniw2.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpepweniw2.lua:9:
    in local 'candidate'\n\t/tmp/tmpepweniw2.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:startswith(prefix) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dtz6ebh.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp7dtz6ebh.lua:9:
    in local 'candidate'\n\t/tmp/tmp7dtz6ebh.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:startswith(prefix) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpipv6z_a9.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpipv6z_a9.lua:9:
    in local 'candidate'\n\t/tmp/tmpipv6z_a9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:startswith(prefix) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkjhzo0su.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpkjhzo0su.lua:9:
    in local 'candidate'\n\t/tmp/tmpkjhzo0su.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local filtered = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(filtered, s)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local filtered = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(filtered, str)
        end
      end
      return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, v in ipairs(strings) do
            if v:sub(1, #prefix) == prefix then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, v in ipairs(strings) do
            if v:sub(1, #prefix) == prefix then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for i, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:startswith(prefix) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp935_4l9h.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp935_4l9h.lua:9:
    in local 'candidate'\n\t/tmp/tmp935_4l9h.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:startswith(prefix) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr3gy9ewe.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpr3gy9ewe.lua:9:
    in local 'candidate'\n\t/tmp/tmpr3gy9ewe.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:startswith(prefix) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjsr_y4ka.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpjsr_y4ka.lua:9:
    in local 'candidate'\n\t/tmp/tmpjsr_y4ka.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplywtdhha.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmplywtdhha.lua:9:
    in local 'candidate'\n\t/tmp/tmplywtdhha.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:startswith(prefix) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ins6qtq.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp_ins6qtq.lua:9:
    in local 'candidate'\n\t/tmp/tmp_ins6qtq.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, v in ipairs(strings) do
            if string.sub(v, 1, #prefix) == prefix then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, string in ipairs(strings) do
        if string:sub(1, #prefix) == prefix then
          table.insert(result, string)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ueuggw7.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp8ueuggw7.lua:9:
    in local 'candidate'\n\t/tmp/tmp8ueuggw7.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, string in ipairs(strings) do
            if string:sub(1, #prefix) == prefix then
                table.insert(result, string)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_z5u0s8n.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp_z5u0s8n.lua:9:
    in local 'candidate'\n\t/tmp/tmp_z5u0s8n.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprjbmthle.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmprjbmthle.lua:9:
    in local 'candidate'\n\t/tmp/tmprjbmthle.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:startswith(prefix) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp13gbrys5.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp13gbrys5.lua:9:
    in local 'candidate'\n\t/tmp/tmp13gbrys5.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpog6mza7d.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpog6mza7d.lua:9:
    in local 'candidate'\n\t/tmp/tmpog6mza7d.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:startswith(prefix) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9mijp5oe.lua:9:
    attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp9mijp5oe.lua:9:
    in local 'candidate'\n\t/tmp/tmp9mijp5oe.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
      local result = {}
      for _, s in ipairs(strings) do
        if s:sub(1, #prefix) == prefix then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, s in ipairs(strings) do
            if s:sub(1, #prefix) == prefix then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that start with a given prefix.
    -- >>> filter_by_prefix({}, 'a')
    -- {}
    -- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
    -- {'abc', 'array'}
    local function filter_by_prefix(strings, prefix)
        local result = {}
        for _, str in ipairs(strings) do
            if str:sub(1, #prefix) == prefix then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_prefix
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
